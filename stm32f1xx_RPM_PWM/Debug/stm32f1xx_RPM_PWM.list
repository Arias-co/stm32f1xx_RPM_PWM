
stm32f1xx_RPM_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000660c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006720  08006720  00016720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d0  080069d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080069d0  080069d0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069d0  080069d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080069dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001e0  08006bbc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006bbc  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cc4  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002de6  00000000  00000000  00039ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  0003d960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c519  00000000  00000000  0003e510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be5b  00000000  00000000  0005aa29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009866c  00000000  00000000  00066884  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000feef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000fef6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006704 	.word	0x08006704

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006704 	.word	0x08006704

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <_ZN5PrintC1Ev+0x1c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
{

}
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	08006748 	.word	0x08006748

08001044 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8001044:	b40e      	push	{r1, r2, r3}
 8001046:	b580      	push	{r7, lr}
 8001048:	b0b7      	sub	sp, #220	; 0xdc
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
     un número variable de argumentos. */
    va_list argp;

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );
 800104e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001052:	60fb      	str	r3, [r7, #12]

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800105e:	4618      	mov	r0, r3
 8001060:	f004 f864 	bl	800512c <vsiprintf>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfcc      	ite	gt
 800106a:	2301      	movgt	r3, #1
 800106c:	2300      	movle	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <_ZN5Print5printEPKcz+0x40>
    {
        write( (uint8_t*) string );  // funcion virtual
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f107 0210 	add.w	r2, r7, #16
 800107e:	4611      	mov	r1, r2
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	4798      	blx	r3
    }

    va_end( argp );

}
 8001084:	bf00      	nop
 8001086:	37dc      	adds	r7, #220	; 0xdc
 8001088:	46bd      	mov	sp, r7
 800108a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800108e:	b003      	add	sp, #12
 8001090:	4770      	bx	lr

08001092 <_ZN5Print5printEPh>:
/**
 *
 * @param text_in dato de tipo uint8_t a transmitir
 */
void Print::print( uint8_t * bytes_in )
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]

    write( bytes_in );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3

}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d009      	beq.n	80010dc <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <ITM_SendChar+0x2c>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <ITM_SendChar+0x2e>
 80010dc:	2300      	movs	r3, #0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d010      	beq.n	8001104 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <ITM_SendChar+0x4a>
    {
      __NOP();
 80010f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010f8:	e7f3      	b.n	80010e2 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <_ZN6SerialC1EP20__UART_HandleTypeDef10Mode_print>:
 *      Author: Macbook
 */

#include "Serial.h"

Serial::Serial( UART_HandleTypeDef * uartx, Mode_print mode_p )
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff7f 	bl	8001024 <_ZN5PrintC1Ev>
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <_ZN6SerialC1EP20__UART_HandleTypeDef10Mode_print+0x34>)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated constructor stub
    mode = mode_p;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	711a      	strb	r2, [r3, #4]
    uart = uartx;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	609a      	str	r2, [r3, #8]
}
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08006754 	.word	0x08006754

08001148 <_ZN6Serial7receiveEPht14Mode_timeout_t>:

void Serial::receive( uint8_t * data, uint16_t timeout,
        Mode_timeout_t modeTimeout )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	460b      	mov	r3, r1
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4613      	mov	r3, r2
 800115c:	717b      	strb	r3, [r7, #5]
    uint8_t *bufer = data;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	617b      	str	r3, [r7, #20]
    uint32_t lastTime = HAL_GetTick();
 8001162:	f000 fdad 	bl	8001cc0 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

    *bufer = (uint8_t) uart->Instance->DR;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	701a      	strb	r2, [r3, #0]
    bufer++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]

    if ( modeTimeout == TIMEOUT )
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d124      	bne.n	80011cc <_ZN6Serial7receiveEPht14Mode_timeout_t+0x84>
    {
        while ( ( HAL_GetTick() - lastTime ) < timeout )
 8001182:	f000 fd9d 	bl	8001cc0 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad2      	subs	r2, r2, r3
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	bf34      	ite	cc
 8001192:	2301      	movcc	r3, #1
 8001194:	2300      	movcs	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d048      	beq.n	800122e <_ZN6Serial7receiveEPht14Mode_timeout_t+0xe6>
        {
            if ( __HAL_UART_GET_FLAG( uart, UART_FLAG_RXNE ) )
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0e5      	beq.n	8001182 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x3a>
            {
                *bufer = (uint8_t) ( uart->Instance->DR & (uint8_t) 0x00FF );
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	701a      	strb	r2, [r3, #0]
                bufer++;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
        while ( ( HAL_GetTick() - lastTime ) < timeout )
 80011ca:	e7da      	b.n	8001182 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x3a>
            }
        }
    }
    else if(modeTimeout == INTER_BYTE_TIMEOUT)
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d12d      	bne.n	800122e <_ZN6Serial7receiveEPht14Mode_timeout_t+0xe6>
    {
        if(timeout == 1) timeout++;
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <_ZN6Serial7receiveEPht14Mode_timeout_t+0x96>
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	3301      	adds	r3, #1
 80011dc:	80fb      	strh	r3, [r7, #6]

        while ( ( HAL_GetTick() - lastTime ) < timeout )
 80011de:	f000 fd6f 	bl	8001cc0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	bf34      	ite	cc
 80011ee:	2301      	movcc	r3, #1
 80011f0:	2300      	movcs	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01a      	beq.n	800122e <_ZN6Serial7receiveEPht14Mode_timeout_t+0xe6>
        {
            if ( __HAL_UART_GET_FLAG( uart, UART_FLAG_RXNE ) )
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b20      	cmp	r3, #32
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0e5      	beq.n	80011de <_ZN6Serial7receiveEPht14Mode_timeout_t+0x96>
            {
                *bufer = (uint8_t) uart->Instance->DR ;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	701a      	strb	r2, [r3, #0]
                bufer++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
                lastTime = HAL_GetTick();
 8001226:	f000 fd4b 	bl	8001cc0 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]
        while ( ( HAL_GetTick() - lastTime ) < timeout )
 800122c:	e7d7      	b.n	80011de <_ZN6Serial7receiveEPht14Mode_timeout_t+0x96>
            }
        }
    }
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZN6Serial5writeEPh>:

void Serial::write( uint8_t * text )
{
 8001236:	b590      	push	{r4, r7, lr}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]

    if ( mode == PRINT_UART )
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10d      	bne.n	8001268 <_ZN6Serial5writeEPh+0x32>
    {
        HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689c      	ldr	r4, [r3, #8]
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f7fe ff7d 	bl	8000150 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	4620      	mov	r0, r4
 8001262:	f002 ff7a 	bl	800415a <HAL_UART_Transmit>
        for ( i = 0; i < strlen( (char*) text ); i++ )
        {
            ITM_SendChar( text[i] );
        }
    }
}
 8001266:	e013      	b.n	8001290 <_ZN6Serial5writeEPh+0x5a>
        for ( i = 0; i < strlen( (char*) text ); i++ )
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	7bfc      	ldrb	r4, [r7, #15]
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f7fe ff6e 	bl	8000150 <strlen>
 8001274:	4603      	mov	r3, r0
 8001276:	429c      	cmp	r4, r3
 8001278:	d20a      	bcs.n	8001290 <_ZN6Serial5writeEPh+0x5a>
            ITM_SendChar( text[i] );
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff14 	bl	80010b0 <ITM_SendChar>
        for ( i = 0; i < strlen( (char*) text ); i++ )
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3301      	adds	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e7ed      	b.n	800126c <_ZN6Serial5writeEPh+0x36>
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b598      	push	{r3, r4, r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fcb8 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f874 	bl	800138c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 fa26 	bl	80016f4 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80012a8:	f000 f8c0 	bl	800142c <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 80012ac:	f000 f9f4 	bl	8001698 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 80012b0:	f000 f964 	bl	800157c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
    /* inicia el timer en modo captura generando una interrupcion en cada flanco
     * de subida de la señal de entrada.
     */
    if ( HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 ) != HAL_OK )  //pin A0
 80012b4:	2100      	movs	r1, #0
 80012b6:	482c      	ldr	r0, [pc, #176]	; (8001368 <main+0xd0>)
 80012b8:	f001 fd98 	bl	8002dec <HAL_TIM_IC_Start_IT>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <main+0x38>
    {
        /* Starting Error */
        Error_Handler();
 80012cc:	f000 fab0 	bl	8001830 <Error_Handler>
    }
    /* inicia la señal pwm a 25 khz por el canal 1 */
    if ( HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1 ) != HAL_OK )  //pin A0
 80012d0:	2100      	movs	r1, #0
 80012d2:	4826      	ldr	r0, [pc, #152]	; (800136c <main+0xd4>)
 80012d4:	f001 fc90 	bl	8002bf8 <HAL_TIM_PWM_Start>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <main+0x54>
    {
        /* Starting Error */
        Error_Handler();
 80012e8:	f000 faa2 	bl	8001830 <Error_Handler>
    }
    /* en mi caso el valor desde donde empieza a variar la velocidad del ventilador
     *  es de 44 hasta 79  ( 1700 a 3500 aprox ) depende del ventilador
     *  utilizado
     */
    __HAL_TIM_SET_COMPARE( &htim3, TIM_CHANNEL_1, 60 ); // señal pwm 25 khz
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <main+0xd4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	223c      	movs	r2, #60	; 0x3c
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UART_ENABLE_IT( &huart1, UART_IT_RXNE );
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <main+0xd8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <main+0xd8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	60da      	str	r2, [r3, #12]
        /*
         *  multiplico el valor de la captura por 0.00001 para determinar el periodo
         * de la señal en segundos. el valor de 0.00001 es la resolucion del
         * contador , es decir que cada cuenta o paso del contador son 10 us.
         */
        periodo = valorCaptura * 0.00001; // calculamos el periodo en segundos
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <main+0xdc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f88d 	bl	8000428 <__aeabi_f2d>
 800130e:	a314      	add	r3, pc, #80	; (adr r3, 8001360 <main+0xc8>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4603      	mov	r3, r0
 800131a:	460c      	mov	r4, r1
 800131c:	4618      	mov	r0, r3
 800131e:	4621      	mov	r1, r4
 8001320:	f7ff fbb2 	bl	8000a88 <__aeabi_d2f>
 8001324:	4602      	mov	r2, r0
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <main+0xe0>)
 8001328:	601a      	str	r2, [r3, #0]
        rpm = 60 / periodo; // frecuencia = 1 / periodo --- rpm = 60 / periodo
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <main+0xe0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <main+0xe4>)
 8001332:	f7ff fdbb 	bl	8000eac <__aeabi_fdiv>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe53 	bl	8000fe4 <__aeabi_f2uiz>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <main+0xe8>)
 8001344:	801a      	strh	r2, [r3, #0]
        serial.print( "rpm: %d \r\n", rpm );
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <main+0xe8>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	490d      	ldr	r1, [pc, #52]	; (8001384 <main+0xec>)
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <main+0xf0>)
 8001350:	f7ff fe78 	bl	8001044 <_ZN5Print5printEPKcz>
        HAL_Delay( 500 );
 8001354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001358:	f000 fcbc 	bl	8001cd4 <HAL_Delay>
        periodo = valorCaptura * 0.00001; // calculamos el periodo en segundos
 800135c:	e7d2      	b.n	8001304 <main+0x6c>
 800135e:	bf00      	nop
 8001360:	88e368f1 	.word	0x88e368f1
 8001364:	3ee4f8b5 	.word	0x3ee4f8b5
 8001368:	200001fc 	.word	0x200001fc
 800136c:	20000244 	.word	0x20000244
 8001370:	2000028c 	.word	0x2000028c
 8001374:	200002d0 	.word	0x200002d0
 8001378:	200002cc 	.word	0x200002cc
 800137c:	42700000 	.word	0x42700000
 8001380:	200002d4 	.word	0x200002d4
 8001384:	08006720 	.word	0x08006720
 8001388:	200002d8 	.word	0x200002d8

0800138c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2228      	movs	r2, #40	; 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f003 f8cc 	bl	8004538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 ff4b 	bl	8002270 <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf14      	ite	ne
 80013e0:	2301      	movne	r3, #1
 80013e2:	2300      	moveq	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80013ea:	f000 fa21 	bl	8001830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80013fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001400:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f001 f9b0 	bl	8002770 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8001420:	f000 fa06 	bl	8001830 <Error_Handler>
  }
}
 8001424:	bf00      	nop
 8001426:	3740      	adds	r7, #64	; 0x40
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b090      	sub	sp, #64	; 0x40
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001470:	22b3      	movs	r2, #179	; 0xb3
 8001472:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b40      	ldr	r3, [pc, #256]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 800147c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001480:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148e:	483a      	ldr	r0, [pc, #232]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001490:	f001 fb0a 	bl	8002aa8 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <_ZL12MX_TIM2_Initv+0x7c>
  {
    Error_Handler();
 80014a4:	f000 f9c4 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b2:	4619      	mov	r1, r3
 80014b4:	4830      	ldr	r0, [pc, #192]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 80014b6:	f001 fff9 	bl	80034ac <HAL_TIM_ConfigClockSource>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL12MX_TIM2_Initv+0xa2>
  {
    Error_Handler();
 80014ca:	f000 f9b1 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014ce:	482a      	ldr	r0, [pc, #168]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 80014d0:	f001 fc34 	bl	8002d3c <HAL_TIM_IC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80014e4:	f000 f9a4 	bl	8001830 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80014e8:	2304      	movs	r3, #4
 80014ea:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80014ec:	2350      	movs	r3, #80	; 0x50
 80014ee:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	481e      	ldr	r0, [pc, #120]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001500:	f002 f88b 	bl	800361a <HAL_TIM_SlaveConfigSynchro>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf14      	ite	ne
 800150a:	2301      	movne	r3, #1
 800150c:	2300      	moveq	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <_ZL12MX_TIM2_Initv+0xec>
  {
    Error_Handler();
 8001514:	f000 f98c 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001528:	f002 fd5a 	bl	8003fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_ZL12MX_TIM2_Initv+0x114>
  {
    Error_Handler();
 800153c:	f000 f978 	bl	8001830 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001544:	2301      	movs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 800154c:	230f      	movs	r3, #15
 800154e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	4619      	mov	r1, r3
 8001556:	4808      	ldr	r0, [pc, #32]	; (8001578 <_ZL12MX_TIM2_Initv+0x14c>)
 8001558:	f001 fe56 	bl	8003208 <HAL_TIM_IC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL12MX_TIM2_Initv+0x144>
  {
    Error_Handler();
 800156c:	f000 f960 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3740      	adds	r7, #64	; 0x40
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001fc 	.word	0x200001fc

0800157c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015ae:	4a39      	ldr	r2, [pc, #228]	; (8001694 <_ZL12MX_TIM3_Initv+0x118>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015c0:	224f      	movs	r2, #79	; 0x4f
 80015c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015d0:	482f      	ldr	r0, [pc, #188]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015d2:	f001 fa69 	bl	8002aa8 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 80015e6:	f000 f923 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 80015f8:	f001 ff58 	bl	80034ac <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800160c:	f000 f910 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 8001612:	f001 fa98 	bl	8002b46 <HAL_TIM_PWM_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf14      	ite	ne
 800161c:	2301      	movne	r3, #1
 800161e:	2300      	moveq	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001626:	f000 f903 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	4619      	mov	r1, r3
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 800163a:	f002 fcd1 	bl	8003fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800164e:	f000 f8ef 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001652:	2360      	movs	r3, #96	; 0x60
 8001654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001656:	2314      	movs	r3, #20
 8001658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 800166a:	f001 fe61 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800167e:	f000 f8d7 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <_ZL12MX_TIM3_Initv+0x114>)
 8001684:	f000 f986 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8001688:	bf00      	nop
 800168a:	3738      	adds	r7, #56	; 0x38
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000244 	.word	0x20000244
 8001694:	40000400 	.word	0x40000400

08001698 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_ZL19MX_USART1_UART_Initv+0x58>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80016d0:	f002 fcf6 	bl	80040c0 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80016e4:	f000 f8a4 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000028c 	.word	0x2000028c
 80016f0:	40013800 	.word	0x40013800

080016f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 8001726:	f043 0320 	orr.w	r3, r3, #32
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <_ZL12MX_GPIO_Initv+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <_ZL12MX_GPIO_Initv+0x94>)
 8001758:	f000 fd72 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800175c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2302      	movs	r3, #2
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <_ZL12MX_GPIO_Initv+0x94>)
 8001776:	f000 fc09 	bl	8001f8c <HAL_GPIO_Init>

}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	40011000 	.word	0x40011000

0800178c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef * htim )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    /* verifica que la captura sea del canal 1 */
    if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7f1b      	ldrb	r3, [r3, #28]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10a      	bne.n	80017b2 <HAL_TIM_IC_CaptureCallback+0x26>
    {
        valorCaptura = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 );
 800179c:	2100      	movs	r1, #0
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f001 ff7e 	bl	80036a0 <HAL_TIM_ReadCapturedValue>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fa74 	bl	8000c94 <__aeabi_ui2f>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_TIM_IC_CaptureCallback+0x30>)
 80017b0:	601a      	str	r2, [r3, #0]
    }
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002d0 	.word	0x200002d0

080017c0 <USART1_IRQHandler>:


void USART1_IRQHandler( void )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
    uint8_t pData[10];
    uint16_t val_ccr1;
    /* limpia el array */
    memset( pData, 0, sizeof( pData ) );
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	220a      	movs	r2, #10
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 feb3 	bl	8004538 <memset>
    /* verifica que la fuente de interrupcion fue por la
     * recepcion de datos.
     */
    if ( __HAL_UART_GET_IT_SOURCE( &huart1, UART_IT_RXNE ) )
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <USART1_IRQHandler+0x64>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d010      	beq.n	800180c <USART1_IRQHandler+0x4c>
    {
        serial.receive( pData, 1, INTER_BYTE_TIMEOUT );
 80017ea:	1d39      	adds	r1, r7, #4
 80017ec:	2301      	movs	r3, #1
 80017ee:	2201      	movs	r2, #1
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <USART1_IRQHandler+0x68>)
 80017f2:	f7ff fca9 	bl	8001148 <_ZN6Serial7receiveEPht14Mode_timeout_t>
        val_ccr1 = atoi( (char*) pData ); //convierte a entero el valor recibido
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fe35 	bl	8004468 <atoi>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29b      	uxth	r3, r3
 8001802:	807b      	strh	r3, [r7, #2]
       /* almaceno el valor en el registro TIM3->CCR1 */
        __HAL_TIM_SET_COMPARE( &htim3, TIM_CHANNEL_1, val_ccr1 );
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <USART1_IRQHandler+0x6c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	635a      	str	r2, [r3, #52]	; 0x34

    }

    serial.print( pData ); // imprimo el valor reibido
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <USART1_IRQHandler+0x68>)
 8001812:	f7ff fc3e 	bl	8001092 <_ZN5Print5printEPh>
    /* limpia las interuupciones pendientes por el usart1 */
    HAL_NVIC_ClearPendingIRQ (USART1_IRQn); //
 8001816:	2025      	movs	r0, #37	; 0x25
 8001818:	f000 fba9 	bl	8001f6e <HAL_NVIC_ClearPendingIRQ>

}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000028c 	.word	0x2000028c
 8001828:	200002d8 	.word	0x200002d8
 800182c:	20000244 	.word	0x20000244

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_Z41__static_initialization_and_destruction_0ii>:
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d109      	bne.n	8001860 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001852:	4293      	cmp	r3, r2
 8001854:	d104      	bne.n	8001860 <_Z41__static_initialization_and_destruction_0ii+0x24>
Serial serial( &huart1 );
 8001856:	2201      	movs	r2, #1
 8001858:	4903      	ldr	r1, [pc, #12]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800185c:	f7ff fc58 	bl	8001110 <_ZN6SerialC1EP20__UART_HandleTypeDef10Mode_print>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000028c 	.word	0x2000028c
 800186c:	200002d8 	.word	0x200002d8

08001870 <_GLOBAL__sub_I_htim2>:
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
 8001874:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ffdf 	bl	800183c <_Z41__static_initialization_and_destruction_0ii>
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_MspInit+0x5c>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_MspInit+0x5c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6193      	str	r3, [r2, #24]
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_MspInit+0x5c>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x5c>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x5c>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x5c>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_MspInit+0x60>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_MspInit+0x60>)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000

080018e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0318 	add.w	r3, r7, #24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001902:	d12c      	bne.n	800195e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	61d3      	str	r3, [r2, #28]
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001934:	2301      	movs	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	4811      	ldr	r0, [pc, #68]	; (800198c <HAL_TIM_Base_MspInit+0xa8>)
 8001948:	f000 fb20 	bl	8001f8c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2101      	movs	r1, #1
 8001950:	201c      	movs	r0, #28
 8001952:	f000 fad6 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001956:	201c      	movs	r0, #28
 8001958:	f000 faef 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800195c:	e010      	b.n	8001980 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM3)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_TIM_Base_MspInit+0xac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d10b      	bne.n	8001980 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	61d3      	str	r3, [r2, #28]
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_TIM_Base_MspInit+0xa4>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	40010800 	.word	0x40010800
 8001990:	40000400 	.word	0x40000400

08001994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_TIM_MspPostInit+0x58>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d117      	bne.n	80019e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_TIM_MspPostInit+0x5c>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_TIM_MspPostInit+0x5c>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_TIM_MspPostInit+0x5c>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019cc:	2340      	movs	r3, #64	; 0x40
 80019ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_TIM_MspPostInit+0x60>)
 80019e0:	f000 fad4 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010800 	.word	0x40010800

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <HAL_UART_MspInit+0x9c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d139      	bne.n	8001a8c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_UART_MspInit+0xa0>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_UART_MspInit+0xa0>)
 8001a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_UART_MspInit+0xa0>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_UART_MspInit+0xa0>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_UART_MspInit+0xa0>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_UART_MspInit+0xa0>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480f      	ldr	r0, [pc, #60]	; (8001a9c <HAL_UART_MspInit+0xa4>)
 8001a5e:	f000 fa95 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <HAL_UART_MspInit+0xa4>)
 8001a78:	f000 fa88 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2102      	movs	r1, #2
 8001a80:	2025      	movs	r0, #37	; 0x25
 8001a82:	f000 fa3e 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a86:	2025      	movs	r0, #37	; 0x25
 8001a88:	f000 fa57 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40013800 	.word	0x40013800
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010800 	.word	0x40010800

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <BusFault_Handler+0x4>

08001abe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <UsageFault_Handler+0x4>

08001ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f8d6 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <TIM2_IRQHandler+0x10>)
 8001afa:	f001 fa7d 	bl	8002ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200001fc 	.word	0x200001fc

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_kill>:

int _kill(int pid, int sig)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b20:	f002 fca6 	bl	8004470 <__errno>
 8001b24:	4602      	mov	r2, r0
 8001b26:	2316      	movs	r3, #22
 8001b28:	6013      	str	r3, [r2, #0]
	return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_exit>:

void _exit (int status)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffe7 	bl	8001b16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b48:	e7fe      	b.n	8001b48 <_exit+0x12>
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f002 fc78 	bl	8004470 <__errno>
 8001b80:	4602      	mov	r2, r0
 8001b82:	230c      	movs	r3, #12
 8001b84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20005000 	.word	0x20005000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	200002e4 	.word	0x200002e4
 8001bb4:	200002f8 	.word	0x200002f8

08001bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc6:	e003      	b.n	8001bd0 <LoopCopyDataInit>

08001bc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bcc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bce:	3104      	adds	r1, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd8:	d3f6      	bcc.n	8001bc8 <CopyDataInit>
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bdc:	e002      	b.n	8001be4 <LoopFillZerobss>

08001bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001be0:	f842 3b04 	str.w	r3, [r2], #4

08001be4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be8:	d3f9      	bcc.n	8001bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bea:	f7ff ffe5 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f002 fc45 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf2:	f7ff fb51 	bl	8001298 <main>
  bx lr
 8001bf6:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf8:	080069dc 	.word	0x080069dc
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c00:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001c04:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001c08:	200002f8 	.word	0x200002f8

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f963 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fe28 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f97b 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f000 f943 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <HAL_IncTick+0x20>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200002f0 	.word	0x200002f0

08001cc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <HAL_GetTick+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	200002f0 	.word	0x200002f0

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_Delay+0x40>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffe0 	bl	8001cc0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000008 	.word	0x20000008

08001d18 <__NVIC_SetPriorityGrouping>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <__NVIC_EnableIRQ+0x34>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_ClearPendingIRQ>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0c      	blt.n	8001de0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_ClearPendingIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	3360      	adds	r3, #96	; 0x60
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Config>:
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ecc:	f7ff ff90 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff0f 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff24 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff17 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff19 	bl	8001db4 <__NVIC_ClearPendingIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	e127      	b.n	80021f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8116 	bne.w	80021ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d034      	beq.n	8002030 <HAL_GPIO_Init+0xa4>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d80d      	bhi.n	8001fe6 <HAL_GPIO_Init+0x5a>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d02b      	beq.n	8002026 <HAL_GPIO_Init+0x9a>
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d804      	bhi.n	8001fdc <HAL_GPIO_Init+0x50>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d031      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d01c      	beq.n	8002014 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e048      	b.n	800206e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d043      	beq.n	8002068 <HAL_GPIO_Init+0xdc>
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d01b      	beq.n	800201c <HAL_GPIO_Init+0x90>
          break;
 8001fe4:	e043      	b.n	800206e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fe6:	4a89      	ldr	r2, [pc, #548]	; (800220c <HAL_GPIO_Init+0x280>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d026      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8001fec:	4a87      	ldr	r2, [pc, #540]	; (800220c <HAL_GPIO_Init+0x280>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d806      	bhi.n	8002000 <HAL_GPIO_Init+0x74>
 8001ff2:	4a87      	ldr	r2, [pc, #540]	; (8002210 <HAL_GPIO_Init+0x284>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d020      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8001ff8:	4a86      	ldr	r2, [pc, #536]	; (8002214 <HAL_GPIO_Init+0x288>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_GPIO_Init+0xae>
          break;
 8001ffe:	e036      	b.n	800206e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002000:	4a85      	ldr	r2, [pc, #532]	; (8002218 <HAL_GPIO_Init+0x28c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0xae>
 8002006:	4a85      	ldr	r2, [pc, #532]	; (800221c <HAL_GPIO_Init+0x290>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_GPIO_Init+0xae>
 800200c:	4a84      	ldr	r2, [pc, #528]	; (8002220 <HAL_GPIO_Init+0x294>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xae>
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e028      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e023      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01e      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e019      	b.n	800206e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e012      	b.n	800206e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e008      	b.n	800206e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2bff      	cmp	r3, #255	; 0xff
 8002072:	d801      	bhi.n	8002078 <HAL_GPIO_Init+0xec>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	e001      	b.n	800207c <HAL_GPIO_Init+0xf0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2bff      	cmp	r3, #255	; 0xff
 8002082:	d802      	bhi.n	800208a <HAL_GPIO_Init+0xfe>
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x104>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	3b08      	subs	r3, #8
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	210f      	movs	r1, #15
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	6a39      	ldr	r1, [r7, #32]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	431a      	orrs	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8096 	beq.w	80021ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_GPIO_Init+0x298>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_GPIO_Init+0x298>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6193      	str	r3, [r2, #24]
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_GPIO_Init+0x298>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d6:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_GPIO_Init+0x29c>)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_GPIO_Init+0x2a0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x19e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_GPIO_Init+0x2a4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x19a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x196>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2ac>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x192>
 800211a:	2303      	movs	r3, #3
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 800211e:	2304      	movs	r3, #4
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x1a0>
 800212a:	2300      	movs	r3, #0
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213c:	493a      	ldr	r1, [pc, #232]	; (8002228 <HAL_GPIO_Init+0x29c>)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4938      	ldr	r1, [pc, #224]	; (800223c <HAL_GPIO_Init+0x2b0>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	43db      	mvns	r3, r3
 800216c:	4933      	ldr	r1, [pc, #204]	; (800223c <HAL_GPIO_Init+0x2b0>)
 800216e:	4013      	ands	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	492e      	ldr	r1, [pc, #184]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_GPIO_Init+0x2b0>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	43db      	mvns	r3, r3
 8002194:	4929      	ldr	r1, [pc, #164]	; (800223c <HAL_GPIO_Init+0x2b0>)
 8002196:	4013      	ands	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	4924      	ldr	r1, [pc, #144]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	491f      	ldr	r1, [pc, #124]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	491a      	ldr	r1, [pc, #104]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60cb      	str	r3, [r1, #12]
 80021da:	e006      	b.n	80021ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4915      	ldr	r1, [pc, #84]	; (800223c <HAL_GPIO_Init+0x2b0>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f aed0 	bne.w	8001fa0 <HAL_GPIO_Init+0x14>
  }
}
 8002200:	bf00      	nop
 8002202:	372c      	adds	r7, #44	; 0x2c
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	10210000 	.word	0x10210000
 8002210:	10110000 	.word	0x10110000
 8002214:	10120000 	.word	0x10120000
 8002218:	10310000 	.word	0x10310000
 800221c:	10320000 	.word	0x10320000
 8002220:	10220000 	.word	0x10220000
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000
 800222c:	40010800 	.word	0x40010800
 8002230:	40010c00 	.word	0x40010c00
 8002234:	40011000 	.word	0x40011000
 8002238:	40011400 	.word	0x40011400
 800223c:	40010400 	.word	0x40010400

08002240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
 800224c:	4613      	mov	r3, r2
 800224e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002250:	787b      	ldrb	r3, [r7, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800225c:	e003      	b.n	8002266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	041a      	lsls	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e26c      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8087 	beq.w	800239e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b04      	cmp	r3, #4
 800229a:	d00c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800229c:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d112      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d10b      	bne.n	80022ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d06c      	beq.n	800239c <HAL_RCC_OscConfig+0x12c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d168      	bne.n	800239c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e246      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x76>
 80022d8:	4b80      	ldr	r3, [pc, #512]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7f      	ldr	r2, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x98>
 80022ee:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a7a      	ldr	r2, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a77      	ldr	r2, [pc, #476]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xbc>
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a71      	ldr	r2, [pc, #452]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xd4>
 800232c:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6a      	ldr	r2, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a67      	ldr	r2, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fcb8 	bl	8001cc0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fcb4 	bl	8001cc0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1fa      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xe4>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fca4 	bl	8001cc0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fca0 	bl	8001cc0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1e6      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x10c>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d063      	beq.n	8002472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d11c      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1ba      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4939      	ldr	r1, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	e03a      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fc59 	bl	8001cc0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff fc55 	bl	8001cc0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e19b      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4927      	ldr	r1, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x270>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff fc38 	bl	8001cc0 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002454:	f7ff fc34 	bl	8001cc0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e17a      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03a      	beq.n	80024f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d019      	beq.n	80024ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7ff fc18 	bl	8001cc0 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff fc14 	bl	8001cc0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e15a      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 fada 	bl	8002a6c <RCC_Delay>
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCC_OscConfig+0x274>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fbfe 	bl	8001cc0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff fbfa 	bl	8001cc0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d908      	bls.n	80024e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e140      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	42420000 	.word	0x42420000
 80024e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e9      	bne.n	80024c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a6 	beq.w	800264e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a93      	ldr	r2, [pc, #588]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b8e      	ldr	r3, [pc, #568]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b8b      	ldr	r3, [pc, #556]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a8a      	ldr	r2, [pc, #552]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7ff fbbb 	bl	8001cc0 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7ff fbb7 	bl	8001cc0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0fd      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_OscConfig+0x4f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x312>
 8002574:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e02d      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x334>
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a75      	ldr	r2, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	e01c      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x356>
 80025ac:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a6c      	ldr	r2, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e00b      	b.n	80025de <HAL_RCC_OscConfig+0x36e>
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a66      	ldr	r2, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fb6b 	bl	8001cc0 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff fb67 	bl	8001cc0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0ab      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ee      	beq.n	80025ee <HAL_RCC_OscConfig+0x37e>
 8002610:	e014      	b.n	800263c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fb55 	bl	8001cc0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff fb51 	bl	8001cc0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e095      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b48      	ldr	r3, [pc, #288]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8081 	beq.w	800275a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	4b42      	ldr	r3, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d061      	beq.n	8002728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d146      	bne.n	80026fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fb25 	bl	8001cc0 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7ff fb21 	bl	8001cc0 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e067      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	492d      	ldr	r1, [pc, #180]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a19      	ldr	r1, [r3, #32]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	430b      	orrs	r3, r1
 80026c6:	4927      	ldr	r1, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff faf5 	bl	8001cc0 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7ff faf1 	bl	8001cc0 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e037      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x46a>
 80026f8:	e02f      	b.n	800275a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_RCC_OscConfig+0x4fc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fade 	bl	8001cc0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff fada 	bl	8001cc0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e020      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x498>
 8002726:	e018      	b.n	800275a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e013      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	42420060 	.word	0x42420060

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4965      	ldr	r1, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d040      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e073      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4936      	ldr	r1, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7ff fa2e 	bl	8001cc0 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7ff fa2a 	bl	8001cc0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e053      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4601      	mov	r1, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	fa21 f303 	lsr.w	r3, r1, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f98c 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08006758 	.word	0x08006758
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b490      	push	{r4, r7}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800294c:	1d3c      	adds	r4, r7, #4
 800294e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x46>
 8002982:	e02d      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	e02d      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002996:	4413      	add	r3, r2
 8002998:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800299c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0c5b      	lsrs	r3, r3, #17
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029b6:	4413      	add	r3, r2
 80029b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029c2:	fb02 f203 	mul.w	r2, r2, r3
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e004      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	623b      	str	r3, [r7, #32]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e2:	623b      	str	r3, [r7, #32]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc90      	pop	{r4, r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	0800672c 	.word	0x0800672c
 80029f8:	0800673c 	.word	0x0800673c
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	003d0900 	.word	0x003d0900

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000000 	.word	0x20000000

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a20:	f7ff fff2 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a24:	4601      	mov	r1, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08006768 	.word	0x08006768

08002a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a48:	f7ff ffde 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0adb      	lsrs	r3, r3, #11
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08006768 	.word	0x08006768

08002a6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <RCC_Delay+0x34>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <RCC_Delay+0x38>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0a5b      	lsrs	r3, r3, #9
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a88:	bf00      	nop
  }
  while (Delay --);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	60fa      	str	r2, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <RCC_Delay+0x1c>
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	10624dd3 	.word	0x10624dd3

08002aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe ff08 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fe42 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e041      	b.n	8002bdc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f839 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 fdf3 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x24>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e022      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d109      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x3e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e015      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d109      	bne.n	8002c50 <HAL_TIM_PWM_Start+0x58>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e008      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e05e      	b.n	8002d28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x82>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c78:	e013      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0x92>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c88:	e00b      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0xa2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c98:	e003      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f973 	bl	8003f96 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_TIM_PWM_Start+0x138>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <HAL_TIM_PWM_Start+0x138>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0xfa>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d009      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0xfa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_TIM_PWM_Start+0x13c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0xfa>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <HAL_TIM_PWM_Start+0x140>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d010      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	e007      	b.n	8002d26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800

08002d3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f839 	bl	8002dda <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 fcf8 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0x1a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e013      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x42>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0x2a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	e00b      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x42>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_IC_Start_IT+0x3a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e003      	b.n	8002e2e <HAL_TIM_IC_Start_IT+0x42>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <HAL_TIM_IC_Start_IT+0x54>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e013      	b.n	8002e68 <HAL_TIM_IC_Start_IT+0x7c>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d104      	bne.n	8002e50 <HAL_TIM_IC_Start_IT+0x64>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e00b      	b.n	8002e68 <HAL_TIM_IC_Start_IT+0x7c>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d104      	bne.n	8002e60 <HAL_TIM_IC_Start_IT+0x74>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e003      	b.n	8002e68 <HAL_TIM_IC_Start_IT+0x7c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0b3      	b.n	8002fe2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_IC_Start_IT+0x9e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e88:	e013      	b.n	8002eb2 <HAL_TIM_IC_Start_IT+0xc6>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_IC_Start_IT+0xae>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e98:	e00b      	b.n	8002eb2 <HAL_TIM_IC_Start_IT+0xc6>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_IC_Start_IT+0xbe>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	e003      	b.n	8002eb2 <HAL_TIM_IC_Start_IT+0xc6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_IC_Start_IT+0xd6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	e013      	b.n	8002eea <HAL_TIM_IC_Start_IT+0xfe>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_IC_Start_IT+0xe6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed0:	e00b      	b.n	8002eea <HAL_TIM_IC_Start_IT+0xfe>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_IC_Start_IT+0xf6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee0:	e003      	b.n	8002eea <HAL_TIM_IC_Start_IT+0xfe>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d841      	bhi.n	8002f74 <HAL_TIM_IC_Start_IT+0x188>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_TIM_IC_Start_IT+0x10c>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f75 	.word	0x08002f75
 8002f00:	08002f75 	.word	0x08002f75
 8002f04:	08002f75 	.word	0x08002f75
 8002f08:	08002f3f 	.word	0x08002f3f
 8002f0c:	08002f75 	.word	0x08002f75
 8002f10:	08002f75 	.word	0x08002f75
 8002f14:	08002f75 	.word	0x08002f75
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f75 	.word	0x08002f75
 8002f20:	08002f75 	.word	0x08002f75
 8002f24:	08002f75 	.word	0x08002f75
 8002f28:	08002f63 	.word	0x08002f63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0202 	orr.w	r2, r2, #2
 8002f3a:	60da      	str	r2, [r3, #12]
      break;
 8002f3c:	e01b      	b.n	8002f76 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0204 	orr.w	r2, r2, #4
 8002f4c:	60da      	str	r2, [r3, #12]
      break;
 8002f4e:	e012      	b.n	8002f76 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	60da      	str	r2, [r3, #12]
      break;
 8002f60:	e009      	b.n	8002f76 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0210 	orr.w	r2, r2, #16
 8002f70:	60da      	str	r2, [r3, #12]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002f74:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 f809 	bl	8003f96 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_TIM_IC_Start_IT+0x200>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_IC_Start_IT+0x1c0>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_IC_Start_IT+0x1c0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_TIM_IC_Start_IT+0x204>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_IC_Start_IT+0x1c0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <HAL_TIM_IC_Start_IT+0x208>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d010      	beq.n	8002fe0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800

08002ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe fba6 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb79 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fb7f 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0204 	mvn.w	r2, #4
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fb7c 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fb4f 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fb55 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0208 	mvn.w	r2, #8
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fb52 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fb25 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fb2b 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0210 	mvn.w	r2, #16
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2208      	movs	r2, #8
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe fb28 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fafb 	bl	800373a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fb01 	bl	800374c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0201 	mvn.w	r2, #1
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fad6 	bl	8003728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 ff83 	bl	80040ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fac5 	bl	800375e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff4e 	bl	800409c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_IC_ConfigChannel+0x1a>
 800321e:	2302      	movs	r3, #2
 8003220:	e082      	b.n	8003328 <HAL_TIM_IC_ConfigChannel+0x120>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f000 fd06 	bl	8003c50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 020c 	bic.w	r2, r2, #12
 8003252:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	619a      	str	r2, [r3, #24]
 8003266:	e05a      	b.n	800331e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d11c      	bne.n	80032a8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 fd6f 	bl	8003d60 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003290:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6999      	ldr	r1, [r3, #24]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	619a      	str	r2, [r3, #24]
 80032a6:	e03a      	b.n	800331e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f000 fdba 	bl	8003e36 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 020c 	bic.w	r2, r2, #12
 80032d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	61da      	str	r2, [r3, #28]
 80032e4:	e01b      	b.n	800331e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6819      	ldr	r1, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f000 fdd9 	bl	8003eac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003308:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69d9      	ldr	r1, [r3, #28]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003346:	2302      	movs	r3, #2
 8003348:	e0ac      	b.n	80034a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	f200 809f 	bhi.w	8003498 <HAL_TIM_PWM_ConfigChannel+0x168>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003395 	.word	0x08003395
 8003364:	08003499 	.word	0x08003499
 8003368:	08003499 	.word	0x08003499
 800336c:	08003499 	.word	0x08003499
 8003370:	080033d5 	.word	0x080033d5
 8003374:	08003499 	.word	0x08003499
 8003378:	08003499 	.word	0x08003499
 800337c:	08003499 	.word	0x08003499
 8003380:	08003417 	.word	0x08003417
 8003384:	08003499 	.word	0x08003499
 8003388:	08003499 	.word	0x08003499
 800338c:	08003499 	.word	0x08003499
 8003390:	08003457 	.word	0x08003457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa4a 	bl	8003834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0208 	orr.w	r2, r2, #8
 80033ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6999      	ldr	r1, [r3, #24]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	619a      	str	r2, [r3, #24]
      break;
 80033d2:	e062      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa90 	bl	8003900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	619a      	str	r2, [r3, #24]
      break;
 8003414:	e041      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fad9 	bl	80039d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0208 	orr.w	r2, r2, #8
 8003430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0204 	bic.w	r2, r2, #4
 8003440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69d9      	ldr	r1, [r3, #28]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
      break;
 8003454:	e021      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fb23 	bl	8003aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	61da      	str	r2, [r3, #28]
      break;
 8003496:	e000      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_ConfigClockSource+0x18>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0a6      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x166>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d067      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0x120>
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d80b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x6c>
 8003500:	2b10      	cmp	r3, #16
 8003502:	d073      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x140>
 8003504:	2b10      	cmp	r3, #16
 8003506:	d802      	bhi.n	800350e <HAL_TIM_ConfigClockSource+0x62>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d06f      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800350c:	e078      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800350e:	2b20      	cmp	r3, #32
 8003510:	d06c      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x140>
 8003512:	2b30      	cmp	r3, #48	; 0x30
 8003514:	d06a      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003516:	e073      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d00d      	beq.n	8003538 <HAL_TIM_ConfigClockSource+0x8c>
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d804      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x7e>
 8003520:	2b50      	cmp	r3, #80	; 0x50
 8003522:	d033      	beq.n	800358c <HAL_TIM_ConfigClockSource+0xe0>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d041      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003528:	e06a      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352e:	d066      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x152>
 8003530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003534:	d017      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003536:	e063      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f000 fd06 	bl	8003f58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800355a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e04c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6899      	ldr	r1, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f000 fcef 	bl	8003f58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003588:	609a      	str	r2, [r3, #8]
      break;
 800358a:	e039      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	461a      	mov	r2, r3
 800359a:	f000 fbb3 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2150      	movs	r1, #80	; 0x50
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fcbd 	bl	8003f24 <TIM_ITRx_SetConfig>
      break;
 80035aa:	e029      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f000 fc0d 	bl	8003dd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2160      	movs	r1, #96	; 0x60
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fcad 	bl	8003f24 <TIM_ITRx_SetConfig>
      break;
 80035ca:	e019      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	461a      	mov	r2, r3
 80035da:	f000 fb93 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2140      	movs	r1, #64	; 0x40
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fc9d 	bl	8003f24 <TIM_ITRx_SetConfig>
      break;
 80035ea:	e009      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fc94 	bl	8003f24 <TIM_ITRx_SetConfig>
        break;
 80035fc:	e000      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_TIM_SlaveConfigSynchro+0x18>
 800362e:	2302      	movs	r3, #2
 8003630:	e031      	b.n	8003696 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa7d 	bl	8003b44 <TIM_SlaveTimer_SetConfig>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e018      	b.n	8003696 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003682:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d831      	bhi.n	8003718 <HAL_TIM_ReadCapturedValue+0x78>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003719 	.word	0x08003719
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003719 	.word	0x08003719
 80036cc:	080036fb 	.word	0x080036fb
 80036d0:	08003719 	.word	0x08003719
 80036d4:	08003719 	.word	0x08003719
 80036d8:	08003719 	.word	0x08003719
 80036dc:	08003705 	.word	0x08003705
 80036e0:	08003719 	.word	0x08003719
 80036e4:	08003719 	.word	0x08003719
 80036e8:	08003719 	.word	0x08003719
 80036ec:	0800370f 	.word	0x0800370f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	60fb      	str	r3, [r7, #12]

      break;
 80036f8:	e00f      	b.n	800371a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	60fb      	str	r3, [r7, #12]

      break;
 8003702:	e00a      	b.n	800371a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	60fb      	str	r3, [r7, #12]

      break;
 800370c:	e005      	b.n	800371a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	60fb      	str	r3, [r7, #12]

      break;
 8003716:	e000      	b.n	800371a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003718:	bf00      	nop
  }

  return tmpreg;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop

08003728 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a29      	ldr	r2, [pc, #164]	; (8003828 <TIM_Base_SetConfig+0xb8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00b      	beq.n	80037a0 <TIM_Base_SetConfig+0x30>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d007      	beq.n	80037a0 <TIM_Base_SetConfig+0x30>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a26      	ldr	r2, [pc, #152]	; (800382c <TIM_Base_SetConfig+0xbc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x30>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a25      	ldr	r2, [pc, #148]	; (8003830 <TIM_Base_SetConfig+0xc0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <TIM_Base_SetConfig+0xb8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d007      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <TIM_Base_SetConfig+0xbc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0x62>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <TIM_Base_SetConfig+0xc0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a07      	ldr	r2, [pc, #28]	; (8003828 <TIM_Base_SetConfig+0xb8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d103      	bne.n	8003818 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	615a      	str	r2, [r3, #20]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 0302 	bic.w	r3, r3, #2
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <TIM_OC1_SetConfig+0xc8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10c      	bne.n	80038aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0308 	bic.w	r3, r3, #8
 8003896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a13      	ldr	r2, [pc, #76]	; (80038fc <TIM_OC1_SetConfig+0xc8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00

08003900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0210 	bic.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0320 	bic.w	r3, r3, #32
 800394a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <TIM_OC2_SetConfig+0xd0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10d      	bne.n	800397c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <TIM_OC2_SetConfig+0xd0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d113      	bne.n	80039ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800398a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00

080039d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <TIM_OC3_SetConfig+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10d      	bne.n	8003a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <TIM_OC3_SetConfig+0xd0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d113      	bne.n	8003a7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40012c00 	.word	0x40012c00

08003aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	031b      	lsls	r3, r3, #12
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <TIM_OC4_SetConfig+0x98>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d109      	bne.n	8003b1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00

08003b44 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0307 	bic.w	r3, r3, #7
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b30      	cmp	r3, #48	; 0x30
 8003b88:	d05c      	beq.n	8003c44 <TIM_SlaveTimer_SetConfig+0x100>
 8003b8a:	2b30      	cmp	r3, #48	; 0x30
 8003b8c:	d806      	bhi.n	8003b9c <TIM_SlaveTimer_SetConfig+0x58>
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d058      	beq.n	8003c44 <TIM_SlaveTimer_SetConfig+0x100>
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d056      	beq.n	8003c44 <TIM_SlaveTimer_SetConfig+0x100>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d054      	beq.n	8003c44 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003b9a:	e054      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d03d      	beq.n	8003c1c <TIM_SlaveTimer_SetConfig+0xd8>
 8003ba0:	2b50      	cmp	r3, #80	; 0x50
 8003ba2:	d802      	bhi.n	8003baa <TIM_SlaveTimer_SetConfig+0x66>
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d010      	beq.n	8003bca <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003ba8:	e04d      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003baa:	2b60      	cmp	r3, #96	; 0x60
 8003bac:	d040      	beq.n	8003c30 <TIM_SlaveTimer_SetConfig+0xec>
 8003bae:	2b70      	cmp	r3, #112	; 0x70
 8003bb0:	d000      	beq.n	8003bb4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003bb2:	e048      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68d9      	ldr	r1, [r3, #12]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f000 f9c8 	bl	8003f58 <TIM_ETR_SetConfig>
      break;
 8003bc8:	e03d      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d101      	bne.n	8003bd6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e038      	b.n	8003c48 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	621a      	str	r2, [r3, #32]
      break;
 8003c1a:	e014      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f000 f86b 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      break;
 8003c2e:	e00a      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6899      	ldr	r1, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f000 f8cb 	bl	8003dd8 <TIM_TI2_ConfigInputStage>
      break;
 8003c42:	e000      	b.n	8003c46 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8003c44:	bf00      	nop
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f023 0201 	bic.w	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <TIM_TI1_SetConfig+0xa8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_TI1_SetConfig+0x46>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d007      	beq.n	8003c96 <TIM_TI1_SetConfig+0x46>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <TIM_TI1_SetConfig+0xac>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_TI1_SetConfig+0x46>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <TIM_TI1_SetConfig+0xb0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <TIM_TI1_SetConfig+0x4a>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <TIM_TI1_SetConfig+0x4c>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e003      	b.n	8003cba <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f023 030a 	bic.w	r3, r3, #10
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 030a 	and.w	r3, r3, #10
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800

08003d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 030a 	bic.w	r3, r3, #10
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0210 	bic.w	r2, r3, #16
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	031b      	lsls	r3, r3, #12
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 0210 	bic.w	r2, r3, #16
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	031b      	lsls	r3, r3, #12
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	621a      	str	r2, [r3, #32]
}
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b087      	sub	sp, #28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	031b      	lsls	r3, r3, #12
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003efe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	031b      	lsls	r3, r3, #12
 8003f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f043 0307 	orr.w	r3, r3, #7
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	609a      	str	r2, [r3, #8]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	021a      	lsls	r2, r3, #8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	609a      	str	r2, [r3, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2201      	movs	r2, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	401a      	ands	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e046      	b.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d009      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a10      	ldr	r2, [pc, #64]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10c      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800

0800409c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e03f      	b.n	8004152 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd fc86 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	; 0x24
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f905 	bl	8004314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af02      	add	r7, sp, #8
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d17c      	bne.n	8004274 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_UART_Transmit+0x2c>
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e075      	b.n	8004276 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_UART_Transmit+0x3e>
 8004194:	2302      	movs	r3, #2
 8004196:	e06e      	b.n	8004276 <HAL_UART_Transmit+0x11c>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041ae:	f7fd fd87 	bl	8001cc0 <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x82>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041ec:	e02a      	b.n	8004244 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f840 	bl	800427e <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e036      	b.n	8004276 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cf      	bne.n	80041ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2140      	movs	r1, #64	; 0x40
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f810 	bl	800427e <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e006      	b.n	8004276 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428e:	e02c      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004296:	d028      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0x30>
 800429e:	f7fd fd0f 	bl	8001cc0 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d21d      	bcs.n	80042ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e00f      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d0c3      	beq.n	8004290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800434e:	f023 030c 	bic.w	r3, r3, #12
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	430b      	orrs	r3, r1
 800435a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <UART_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fe fb62 	bl	8002a44 <HAL_RCC_GetPCLK2Freq>
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	e002      	b.n	800438a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7fe fb4a 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8004388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <UART_SetConfig+0x118>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	0119      	lsls	r1, r3, #4
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <UART_SetConfig+0x118>)
 80043c2:	fba3 0302 	umull	r0, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2064      	movs	r0, #100	; 0x64
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <UART_SetConfig+0x118>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	4419      	add	r1, r3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <UART_SetConfig+0x118>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2064      	movs	r0, #100	; 0x64
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	; 0x32
 800440c:	4a07      	ldr	r2, [pc, #28]	; (800442c <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	440a      	add	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40013800 	.word	0x40013800
 800442c:	51eb851f 	.word	0x51eb851f

08004430 <__cxa_pure_virtual>:
 8004430:	b508      	push	{r3, lr}
 8004432:	f000 f80d 	bl	8004450 <_ZSt9terminatev>

08004436 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004436:	b508      	push	{r3, lr}
 8004438:	4780      	blx	r0
 800443a:	f000 f80e 	bl	800445a <abort>
	...

08004440 <_ZSt13get_terminatev>:
 8004440:	4b02      	ldr	r3, [pc, #8]	; (800444c <_ZSt13get_terminatev+0xc>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	f3bf 8f5b 	dmb	ish
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c

08004450 <_ZSt9terminatev>:
 8004450:	b508      	push	{r3, lr}
 8004452:	f7ff fff5 	bl	8004440 <_ZSt13get_terminatev>
 8004456:	f7ff ffee 	bl	8004436 <_ZN10__cxxabiv111__terminateEPFvvE>

0800445a <abort>:
 800445a:	b508      	push	{r3, lr}
 800445c:	2006      	movs	r0, #6
 800445e:	f000 fda1 	bl	8004fa4 <raise>
 8004462:	2001      	movs	r0, #1
 8004464:	f7fd fb67 	bl	8001b36 <_exit>

08004468 <atoi>:
 8004468:	220a      	movs	r2, #10
 800446a:	2100      	movs	r1, #0
 800446c:	f000 be32 	b.w	80050d4 <strtol>

08004470 <__errno>:
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <__errno+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000010 	.word	0x20000010

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	2500      	movs	r5, #0
 8004480:	4e0c      	ldr	r6, [pc, #48]	; (80044b4 <__libc_init_array+0x38>)
 8004482:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004484:	1ba4      	subs	r4, r4, r6
 8004486:	10a4      	asrs	r4, r4, #2
 8004488:	42a5      	cmp	r5, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	f002 f93a 	bl	8006704 <_init>
 8004490:	2500      	movs	r5, #0
 8004492:	4e0a      	ldr	r6, [pc, #40]	; (80044bc <__libc_init_array+0x40>)
 8004494:	4c0a      	ldr	r4, [pc, #40]	; (80044c0 <__libc_init_array+0x44>)
 8004496:	1ba4      	subs	r4, r4, r6
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	42a5      	cmp	r5, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a4:	4798      	blx	r3
 80044a6:	3501      	adds	r5, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044ae:	4798      	blx	r3
 80044b0:	3501      	adds	r5, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	080069d0 	.word	0x080069d0
 80044b8:	080069d0 	.word	0x080069d0
 80044bc:	080069d0 	.word	0x080069d0
 80044c0:	080069d8 	.word	0x080069d8

080044c4 <malloc>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <malloc+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f000 b889 	b.w	80045e0 <_malloc_r>
 80044ce:	bf00      	nop
 80044d0:	20000010 	.word	0x20000010

080044d4 <memchr>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	b2c9      	uxtb	r1, r1
 80044d8:	4402      	add	r2, r0
 80044da:	4290      	cmp	r0, r2
 80044dc:	4603      	mov	r3, r0
 80044de:	d101      	bne.n	80044e4 <memchr+0x10>
 80044e0:	2300      	movs	r3, #0
 80044e2:	e003      	b.n	80044ec <memchr+0x18>
 80044e4:	781c      	ldrb	r4, [r3, #0]
 80044e6:	3001      	adds	r0, #1
 80044e8:	428c      	cmp	r4, r1
 80044ea:	d1f6      	bne.n	80044da <memchr+0x6>
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <memcpy>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	1e43      	subs	r3, r0, #1
 80044f4:	440a      	add	r2, r1
 80044f6:	4291      	cmp	r1, r2
 80044f8:	d100      	bne.n	80044fc <memcpy+0xc>
 80044fa:	bd10      	pop	{r4, pc}
 80044fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004504:	e7f7      	b.n	80044f6 <memcpy+0x6>

08004506 <memmove>:
 8004506:	4288      	cmp	r0, r1
 8004508:	b510      	push	{r4, lr}
 800450a:	eb01 0302 	add.w	r3, r1, r2
 800450e:	d807      	bhi.n	8004520 <memmove+0x1a>
 8004510:	1e42      	subs	r2, r0, #1
 8004512:	4299      	cmp	r1, r3
 8004514:	d00a      	beq.n	800452c <memmove+0x26>
 8004516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800451a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800451e:	e7f8      	b.n	8004512 <memmove+0xc>
 8004520:	4283      	cmp	r3, r0
 8004522:	d9f5      	bls.n	8004510 <memmove+0xa>
 8004524:	1881      	adds	r1, r0, r2
 8004526:	1ad2      	subs	r2, r2, r3
 8004528:	42d3      	cmn	r3, r2
 800452a:	d100      	bne.n	800452e <memmove+0x28>
 800452c:	bd10      	pop	{r4, pc}
 800452e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004532:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004536:	e7f7      	b.n	8004528 <memmove+0x22>

08004538 <memset>:
 8004538:	4603      	mov	r3, r0
 800453a:	4402      	add	r2, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	d100      	bne.n	8004542 <memset+0xa>
 8004540:	4770      	bx	lr
 8004542:	f803 1b01 	strb.w	r1, [r3], #1
 8004546:	e7f9      	b.n	800453c <memset+0x4>

08004548 <_free_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4605      	mov	r5, r0
 800454c:	2900      	cmp	r1, #0
 800454e:	d043      	beq.n	80045d8 <_free_r+0x90>
 8004550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004554:	1f0c      	subs	r4, r1, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	bfb8      	it	lt
 800455a:	18e4      	addlt	r4, r4, r3
 800455c:	f001 fc58 	bl	8005e10 <__malloc_lock>
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <_free_r+0x94>)
 8004562:	6813      	ldr	r3, [r2, #0]
 8004564:	4610      	mov	r0, r2
 8004566:	b933      	cbnz	r3, 8004576 <_free_r+0x2e>
 8004568:	6063      	str	r3, [r4, #4]
 800456a:	6014      	str	r4, [r2, #0]
 800456c:	4628      	mov	r0, r5
 800456e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004572:	f001 bc4e 	b.w	8005e12 <__malloc_unlock>
 8004576:	42a3      	cmp	r3, r4
 8004578:	d90b      	bls.n	8004592 <_free_r+0x4a>
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	1862      	adds	r2, r4, r1
 800457e:	4293      	cmp	r3, r2
 8004580:	bf01      	itttt	eq
 8004582:	681a      	ldreq	r2, [r3, #0]
 8004584:	685b      	ldreq	r3, [r3, #4]
 8004586:	1852      	addeq	r2, r2, r1
 8004588:	6022      	streq	r2, [r4, #0]
 800458a:	6063      	str	r3, [r4, #4]
 800458c:	6004      	str	r4, [r0, #0]
 800458e:	e7ed      	b.n	800456c <_free_r+0x24>
 8004590:	4613      	mov	r3, r2
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	b10a      	cbz	r2, 800459a <_free_r+0x52>
 8004596:	42a2      	cmp	r2, r4
 8004598:	d9fa      	bls.n	8004590 <_free_r+0x48>
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	1858      	adds	r0, r3, r1
 800459e:	42a0      	cmp	r0, r4
 80045a0:	d10b      	bne.n	80045ba <_free_r+0x72>
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	4401      	add	r1, r0
 80045a6:	1858      	adds	r0, r3, r1
 80045a8:	4282      	cmp	r2, r0
 80045aa:	6019      	str	r1, [r3, #0]
 80045ac:	d1de      	bne.n	800456c <_free_r+0x24>
 80045ae:	6810      	ldr	r0, [r2, #0]
 80045b0:	6852      	ldr	r2, [r2, #4]
 80045b2:	4401      	add	r1, r0
 80045b4:	6019      	str	r1, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	e7d8      	b.n	800456c <_free_r+0x24>
 80045ba:	d902      	bls.n	80045c2 <_free_r+0x7a>
 80045bc:	230c      	movs	r3, #12
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	e7d4      	b.n	800456c <_free_r+0x24>
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	1821      	adds	r1, r4, r0
 80045c6:	428a      	cmp	r2, r1
 80045c8:	bf01      	itttt	eq
 80045ca:	6811      	ldreq	r1, [r2, #0]
 80045cc:	6852      	ldreq	r2, [r2, #4]
 80045ce:	1809      	addeq	r1, r1, r0
 80045d0:	6021      	streq	r1, [r4, #0]
 80045d2:	6062      	str	r2, [r4, #4]
 80045d4:	605c      	str	r4, [r3, #4]
 80045d6:	e7c9      	b.n	800456c <_free_r+0x24>
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	200002e8 	.word	0x200002e8

080045e0 <_malloc_r>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	1ccd      	adds	r5, r1, #3
 80045e4:	f025 0503 	bic.w	r5, r5, #3
 80045e8:	3508      	adds	r5, #8
 80045ea:	2d0c      	cmp	r5, #12
 80045ec:	bf38      	it	cc
 80045ee:	250c      	movcc	r5, #12
 80045f0:	2d00      	cmp	r5, #0
 80045f2:	4606      	mov	r6, r0
 80045f4:	db01      	blt.n	80045fa <_malloc_r+0x1a>
 80045f6:	42a9      	cmp	r1, r5
 80045f8:	d903      	bls.n	8004602 <_malloc_r+0x22>
 80045fa:	230c      	movs	r3, #12
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	2000      	movs	r0, #0
 8004600:	bd70      	pop	{r4, r5, r6, pc}
 8004602:	f001 fc05 	bl	8005e10 <__malloc_lock>
 8004606:	4a21      	ldr	r2, [pc, #132]	; (800468c <_malloc_r+0xac>)
 8004608:	6814      	ldr	r4, [r2, #0]
 800460a:	4621      	mov	r1, r4
 800460c:	b991      	cbnz	r1, 8004634 <_malloc_r+0x54>
 800460e:	4c20      	ldr	r4, [pc, #128]	; (8004690 <_malloc_r+0xb0>)
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	b91b      	cbnz	r3, 800461c <_malloc_r+0x3c>
 8004614:	4630      	mov	r0, r6
 8004616:	f000 fc8d 	bl	8004f34 <_sbrk_r>
 800461a:	6020      	str	r0, [r4, #0]
 800461c:	4629      	mov	r1, r5
 800461e:	4630      	mov	r0, r6
 8004620:	f000 fc88 	bl	8004f34 <_sbrk_r>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d124      	bne.n	8004672 <_malloc_r+0x92>
 8004628:	230c      	movs	r3, #12
 800462a:	4630      	mov	r0, r6
 800462c:	6033      	str	r3, [r6, #0]
 800462e:	f001 fbf0 	bl	8005e12 <__malloc_unlock>
 8004632:	e7e4      	b.n	80045fe <_malloc_r+0x1e>
 8004634:	680b      	ldr	r3, [r1, #0]
 8004636:	1b5b      	subs	r3, r3, r5
 8004638:	d418      	bmi.n	800466c <_malloc_r+0x8c>
 800463a:	2b0b      	cmp	r3, #11
 800463c:	d90f      	bls.n	800465e <_malloc_r+0x7e>
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	18cc      	adds	r4, r1, r3
 8004642:	50cd      	str	r5, [r1, r3]
 8004644:	4630      	mov	r0, r6
 8004646:	f001 fbe4 	bl	8005e12 <__malloc_unlock>
 800464a:	f104 000b 	add.w	r0, r4, #11
 800464e:	1d23      	adds	r3, r4, #4
 8004650:	f020 0007 	bic.w	r0, r0, #7
 8004654:	1ac3      	subs	r3, r0, r3
 8004656:	d0d3      	beq.n	8004600 <_malloc_r+0x20>
 8004658:	425a      	negs	r2, r3
 800465a:	50e2      	str	r2, [r4, r3]
 800465c:	e7d0      	b.n	8004600 <_malloc_r+0x20>
 800465e:	684b      	ldr	r3, [r1, #4]
 8004660:	428c      	cmp	r4, r1
 8004662:	bf16      	itet	ne
 8004664:	6063      	strne	r3, [r4, #4]
 8004666:	6013      	streq	r3, [r2, #0]
 8004668:	460c      	movne	r4, r1
 800466a:	e7eb      	b.n	8004644 <_malloc_r+0x64>
 800466c:	460c      	mov	r4, r1
 800466e:	6849      	ldr	r1, [r1, #4]
 8004670:	e7cc      	b.n	800460c <_malloc_r+0x2c>
 8004672:	1cc4      	adds	r4, r0, #3
 8004674:	f024 0403 	bic.w	r4, r4, #3
 8004678:	42a0      	cmp	r0, r4
 800467a:	d005      	beq.n	8004688 <_malloc_r+0xa8>
 800467c:	1a21      	subs	r1, r4, r0
 800467e:	4630      	mov	r0, r6
 8004680:	f000 fc58 	bl	8004f34 <_sbrk_r>
 8004684:	3001      	adds	r0, #1
 8004686:	d0cf      	beq.n	8004628 <_malloc_r+0x48>
 8004688:	6025      	str	r5, [r4, #0]
 800468a:	e7db      	b.n	8004644 <_malloc_r+0x64>
 800468c:	200002e8 	.word	0x200002e8
 8004690:	200002ec 	.word	0x200002ec

08004694 <__cvt>:
 8004694:	2b00      	cmp	r3, #0
 8004696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469a:	461e      	mov	r6, r3
 800469c:	bfbb      	ittet	lt
 800469e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046a2:	461e      	movlt	r6, r3
 80046a4:	2300      	movge	r3, #0
 80046a6:	232d      	movlt	r3, #45	; 0x2d
 80046a8:	b088      	sub	sp, #32
 80046aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80046ac:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80046b0:	f027 0720 	bic.w	r7, r7, #32
 80046b4:	2f46      	cmp	r7, #70	; 0x46
 80046b6:	4614      	mov	r4, r2
 80046b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046ba:	700b      	strb	r3, [r1, #0]
 80046bc:	d004      	beq.n	80046c8 <__cvt+0x34>
 80046be:	2f45      	cmp	r7, #69	; 0x45
 80046c0:	d100      	bne.n	80046c4 <__cvt+0x30>
 80046c2:	3501      	adds	r5, #1
 80046c4:	2302      	movs	r3, #2
 80046c6:	e000      	b.n	80046ca <__cvt+0x36>
 80046c8:	2303      	movs	r3, #3
 80046ca:	aa07      	add	r2, sp, #28
 80046cc:	9204      	str	r2, [sp, #16]
 80046ce:	aa06      	add	r2, sp, #24
 80046d0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80046d4:	e9cd 3500 	strd	r3, r5, [sp]
 80046d8:	4622      	mov	r2, r4
 80046da:	4633      	mov	r3, r6
 80046dc:	f000 fdc0 	bl	8005260 <_dtoa_r>
 80046e0:	2f47      	cmp	r7, #71	; 0x47
 80046e2:	4680      	mov	r8, r0
 80046e4:	d102      	bne.n	80046ec <__cvt+0x58>
 80046e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046e8:	07db      	lsls	r3, r3, #31
 80046ea:	d526      	bpl.n	800473a <__cvt+0xa6>
 80046ec:	2f46      	cmp	r7, #70	; 0x46
 80046ee:	eb08 0905 	add.w	r9, r8, r5
 80046f2:	d111      	bne.n	8004718 <__cvt+0x84>
 80046f4:	f898 3000 	ldrb.w	r3, [r8]
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d10a      	bne.n	8004712 <__cvt+0x7e>
 80046fc:	2200      	movs	r2, #0
 80046fe:	2300      	movs	r3, #0
 8004700:	4620      	mov	r0, r4
 8004702:	4631      	mov	r1, r6
 8004704:	f7fc f950 	bl	80009a8 <__aeabi_dcmpeq>
 8004708:	b918      	cbnz	r0, 8004712 <__cvt+0x7e>
 800470a:	f1c5 0501 	rsb	r5, r5, #1
 800470e:	f8ca 5000 	str.w	r5, [sl]
 8004712:	f8da 3000 	ldr.w	r3, [sl]
 8004716:	4499      	add	r9, r3
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	4620      	mov	r0, r4
 800471e:	4631      	mov	r1, r6
 8004720:	f7fc f942 	bl	80009a8 <__aeabi_dcmpeq>
 8004724:	b938      	cbnz	r0, 8004736 <__cvt+0xa2>
 8004726:	2230      	movs	r2, #48	; 0x30
 8004728:	9b07      	ldr	r3, [sp, #28]
 800472a:	454b      	cmp	r3, r9
 800472c:	d205      	bcs.n	800473a <__cvt+0xa6>
 800472e:	1c59      	adds	r1, r3, #1
 8004730:	9107      	str	r1, [sp, #28]
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e7f8      	b.n	8004728 <__cvt+0x94>
 8004736:	f8cd 901c 	str.w	r9, [sp, #28]
 800473a:	4640      	mov	r0, r8
 800473c:	9b07      	ldr	r3, [sp, #28]
 800473e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004740:	eba3 0308 	sub.w	r3, r3, r8
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	b008      	add	sp, #32
 8004748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800474c <__exponent>:
 800474c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800474e:	2900      	cmp	r1, #0
 8004750:	bfb4      	ite	lt
 8004752:	232d      	movlt	r3, #45	; 0x2d
 8004754:	232b      	movge	r3, #43	; 0x2b
 8004756:	4604      	mov	r4, r0
 8004758:	bfb8      	it	lt
 800475a:	4249      	neglt	r1, r1
 800475c:	2909      	cmp	r1, #9
 800475e:	f804 2b02 	strb.w	r2, [r4], #2
 8004762:	7043      	strb	r3, [r0, #1]
 8004764:	dd21      	ble.n	80047aa <__exponent+0x5e>
 8004766:	f10d 0307 	add.w	r3, sp, #7
 800476a:	461f      	mov	r7, r3
 800476c:	260a      	movs	r6, #10
 800476e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004772:	fb06 1115 	mls	r1, r6, r5, r1
 8004776:	2d09      	cmp	r5, #9
 8004778:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800477c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004780:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004784:	4629      	mov	r1, r5
 8004786:	dc09      	bgt.n	800479c <__exponent+0x50>
 8004788:	3130      	adds	r1, #48	; 0x30
 800478a:	3b02      	subs	r3, #2
 800478c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004790:	42bb      	cmp	r3, r7
 8004792:	4622      	mov	r2, r4
 8004794:	d304      	bcc.n	80047a0 <__exponent+0x54>
 8004796:	1a10      	subs	r0, r2, r0
 8004798:	b003      	add	sp, #12
 800479a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479c:	4613      	mov	r3, r2
 800479e:	e7e6      	b.n	800476e <__exponent+0x22>
 80047a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a4:	f804 2b01 	strb.w	r2, [r4], #1
 80047a8:	e7f2      	b.n	8004790 <__exponent+0x44>
 80047aa:	2330      	movs	r3, #48	; 0x30
 80047ac:	4419      	add	r1, r3
 80047ae:	7083      	strb	r3, [r0, #2]
 80047b0:	1d02      	adds	r2, r0, #4
 80047b2:	70c1      	strb	r1, [r0, #3]
 80047b4:	e7ef      	b.n	8004796 <__exponent+0x4a>
	...

080047b8 <_printf_float>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	b091      	sub	sp, #68	; 0x44
 80047be:	460c      	mov	r4, r1
 80047c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80047c2:	4693      	mov	fp, r2
 80047c4:	461e      	mov	r6, r3
 80047c6:	4605      	mov	r5, r0
 80047c8:	f001 fb02 	bl	8005dd0 <_localeconv_r>
 80047cc:	6803      	ldr	r3, [r0, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	9309      	str	r3, [sp, #36]	; 0x24
 80047d2:	f7fb fcbd 	bl	8000150 <strlen>
 80047d6:	2300      	movs	r3, #0
 80047d8:	930e      	str	r3, [sp, #56]	; 0x38
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	900a      	str	r0, [sp, #40]	; 0x28
 80047de:	3307      	adds	r3, #7
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	f103 0208 	add.w	r2, r3, #8
 80047e8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80047ec:	f8d4 a000 	ldr.w	sl, [r4]
 80047f0:	603a      	str	r2, [r7, #0]
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047fa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80047fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004802:	930b      	str	r3, [sp, #44]	; 0x2c
 8004804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004808:	4ba6      	ldr	r3, [pc, #664]	; (8004aa4 <_printf_float+0x2ec>)
 800480a:	4638      	mov	r0, r7
 800480c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800480e:	f7fc f8fd 	bl	8000a0c <__aeabi_dcmpun>
 8004812:	bb68      	cbnz	r0, 8004870 <_printf_float+0xb8>
 8004814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004818:	4ba2      	ldr	r3, [pc, #648]	; (8004aa4 <_printf_float+0x2ec>)
 800481a:	4638      	mov	r0, r7
 800481c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800481e:	f7fc f8d7 	bl	80009d0 <__aeabi_dcmple>
 8004822:	bb28      	cbnz	r0, 8004870 <_printf_float+0xb8>
 8004824:	2200      	movs	r2, #0
 8004826:	2300      	movs	r3, #0
 8004828:	4638      	mov	r0, r7
 800482a:	4649      	mov	r1, r9
 800482c:	f7fc f8c6 	bl	80009bc <__aeabi_dcmplt>
 8004830:	b110      	cbz	r0, 8004838 <_printf_float+0x80>
 8004832:	232d      	movs	r3, #45	; 0x2d
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	4f9b      	ldr	r7, [pc, #620]	; (8004aa8 <_printf_float+0x2f0>)
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <_printf_float+0x2f4>)
 800483c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004840:	bf98      	it	ls
 8004842:	461f      	movls	r7, r3
 8004844:	2303      	movs	r3, #3
 8004846:	f04f 0900 	mov.w	r9, #0
 800484a:	6123      	str	r3, [r4, #16]
 800484c:	f02a 0304 	bic.w	r3, sl, #4
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	9600      	str	r6, [sp, #0]
 8004854:	465b      	mov	r3, fp
 8004856:	aa0f      	add	r2, sp, #60	; 0x3c
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f9e2 	bl	8004c24 <_printf_common>
 8004860:	3001      	adds	r0, #1
 8004862:	f040 8090 	bne.w	8004986 <_printf_float+0x1ce>
 8004866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800486a:	b011      	add	sp, #68	; 0x44
 800486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004870:	463a      	mov	r2, r7
 8004872:	464b      	mov	r3, r9
 8004874:	4638      	mov	r0, r7
 8004876:	4649      	mov	r1, r9
 8004878:	f7fc f8c8 	bl	8000a0c <__aeabi_dcmpun>
 800487c:	b110      	cbz	r0, 8004884 <_printf_float+0xcc>
 800487e:	4f8c      	ldr	r7, [pc, #560]	; (8004ab0 <_printf_float+0x2f8>)
 8004880:	4b8c      	ldr	r3, [pc, #560]	; (8004ab4 <_printf_float+0x2fc>)
 8004882:	e7db      	b.n	800483c <_printf_float+0x84>
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800488a:	1c59      	adds	r1, r3, #1
 800488c:	a80d      	add	r0, sp, #52	; 0x34
 800488e:	a90e      	add	r1, sp, #56	; 0x38
 8004890:	d140      	bne.n	8004914 <_printf_float+0x15c>
 8004892:	2306      	movs	r3, #6
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	f04f 0c00 	mov.w	ip, #0
 800489a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800489e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	6022      	str	r2, [r4, #0]
 80048a6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	463a      	mov	r2, r7
 80048ae:	464b      	mov	r3, r9
 80048b0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80048b4:	4628      	mov	r0, r5
 80048b6:	f7ff feed 	bl	8004694 <__cvt>
 80048ba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80048be:	2b47      	cmp	r3, #71	; 0x47
 80048c0:	4607      	mov	r7, r0
 80048c2:	d109      	bne.n	80048d8 <_printf_float+0x120>
 80048c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048c6:	1cd8      	adds	r0, r3, #3
 80048c8:	db02      	blt.n	80048d0 <_printf_float+0x118>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	dd47      	ble.n	8004960 <_printf_float+0x1a8>
 80048d0:	f1a8 0802 	sub.w	r8, r8, #2
 80048d4:	fa5f f888 	uxtb.w	r8, r8
 80048d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80048dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048de:	d824      	bhi.n	800492a <_printf_float+0x172>
 80048e0:	3901      	subs	r1, #1
 80048e2:	4642      	mov	r2, r8
 80048e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048e8:	910d      	str	r1, [sp, #52]	; 0x34
 80048ea:	f7ff ff2f 	bl	800474c <__exponent>
 80048ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f0:	4681      	mov	r9, r0
 80048f2:	1813      	adds	r3, r2, r0
 80048f4:	2a01      	cmp	r2, #1
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	dc02      	bgt.n	8004900 <_printf_float+0x148>
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	07d1      	lsls	r1, r2, #31
 80048fe:	d501      	bpl.n	8004904 <_printf_float+0x14c>
 8004900:	3301      	adds	r3, #1
 8004902:	6123      	str	r3, [r4, #16]
 8004904:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0a2      	beq.n	8004852 <_printf_float+0x9a>
 800490c:	232d      	movs	r3, #45	; 0x2d
 800490e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004912:	e79e      	b.n	8004852 <_printf_float+0x9a>
 8004914:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004918:	f000 816e 	beq.w	8004bf8 <_printf_float+0x440>
 800491c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004920:	d1b9      	bne.n	8004896 <_printf_float+0xde>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1b7      	bne.n	8004896 <_printf_float+0xde>
 8004926:	2301      	movs	r3, #1
 8004928:	e7b4      	b.n	8004894 <_printf_float+0xdc>
 800492a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800492e:	d119      	bne.n	8004964 <_printf_float+0x1ac>
 8004930:	2900      	cmp	r1, #0
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	dd0c      	ble.n	8004950 <_printf_float+0x198>
 8004936:	6121      	str	r1, [r4, #16]
 8004938:	b913      	cbnz	r3, 8004940 <_printf_float+0x188>
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	07d2      	lsls	r2, r2, #31
 800493e:	d502      	bpl.n	8004946 <_printf_float+0x18e>
 8004940:	3301      	adds	r3, #1
 8004942:	440b      	add	r3, r1
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004948:	f04f 0900 	mov.w	r9, #0
 800494c:	65a3      	str	r3, [r4, #88]	; 0x58
 800494e:	e7d9      	b.n	8004904 <_printf_float+0x14c>
 8004950:	b913      	cbnz	r3, 8004958 <_printf_float+0x1a0>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	07d0      	lsls	r0, r2, #31
 8004956:	d501      	bpl.n	800495c <_printf_float+0x1a4>
 8004958:	3302      	adds	r3, #2
 800495a:	e7f3      	b.n	8004944 <_printf_float+0x18c>
 800495c:	2301      	movs	r3, #1
 800495e:	e7f1      	b.n	8004944 <_printf_float+0x18c>
 8004960:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004964:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004968:	4293      	cmp	r3, r2
 800496a:	db05      	blt.n	8004978 <_printf_float+0x1c0>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	6123      	str	r3, [r4, #16]
 8004970:	07d1      	lsls	r1, r2, #31
 8004972:	d5e8      	bpl.n	8004946 <_printf_float+0x18e>
 8004974:	3301      	adds	r3, #1
 8004976:	e7e5      	b.n	8004944 <_printf_float+0x18c>
 8004978:	2b00      	cmp	r3, #0
 800497a:	bfcc      	ite	gt
 800497c:	2301      	movgt	r3, #1
 800497e:	f1c3 0302 	rsble	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	e7de      	b.n	8004944 <_printf_float+0x18c>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	055a      	lsls	r2, r3, #21
 800498a:	d407      	bmi.n	800499c <_printf_float+0x1e4>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	463a      	mov	r2, r7
 8004990:	4659      	mov	r1, fp
 8004992:	4628      	mov	r0, r5
 8004994:	47b0      	blx	r6
 8004996:	3001      	adds	r0, #1
 8004998:	d129      	bne.n	80049ee <_printf_float+0x236>
 800499a:	e764      	b.n	8004866 <_printf_float+0xae>
 800499c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80049a0:	f240 80d7 	bls.w	8004b52 <_printf_float+0x39a>
 80049a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049a8:	2200      	movs	r2, #0
 80049aa:	2300      	movs	r3, #0
 80049ac:	f7fb fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80049b0:	b388      	cbz	r0, 8004a16 <_printf_float+0x25e>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4a40      	ldr	r2, [pc, #256]	; (8004ab8 <_printf_float+0x300>)
 80049b6:	4659      	mov	r1, fp
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b0      	blx	r6
 80049bc:	3001      	adds	r0, #1
 80049be:	f43f af52 	beq.w	8004866 <_printf_float+0xae>
 80049c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049c6:	429a      	cmp	r2, r3
 80049c8:	db02      	blt.n	80049d0 <_printf_float+0x218>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	07d8      	lsls	r0, r3, #31
 80049ce:	d50e      	bpl.n	80049ee <_printf_float+0x236>
 80049d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d4:	4659      	mov	r1, fp
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b0      	blx	r6
 80049da:	3001      	adds	r0, #1
 80049dc:	f43f af43 	beq.w	8004866 <_printf_float+0xae>
 80049e0:	2700      	movs	r7, #0
 80049e2:	f104 081a 	add.w	r8, r4, #26
 80049e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049e8:	3b01      	subs	r3, #1
 80049ea:	42bb      	cmp	r3, r7
 80049ec:	dc09      	bgt.n	8004a02 <_printf_float+0x24a>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	079f      	lsls	r7, r3, #30
 80049f2:	f100 80fd 	bmi.w	8004bf0 <_printf_float+0x438>
 80049f6:	68e0      	ldr	r0, [r4, #12]
 80049f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049fa:	4298      	cmp	r0, r3
 80049fc:	bfb8      	it	lt
 80049fe:	4618      	movlt	r0, r3
 8004a00:	e733      	b.n	800486a <_printf_float+0xb2>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4642      	mov	r2, r8
 8004a06:	4659      	mov	r1, fp
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b0      	blx	r6
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f43f af2a 	beq.w	8004866 <_printf_float+0xae>
 8004a12:	3701      	adds	r7, #1
 8004a14:	e7e7      	b.n	80049e6 <_printf_float+0x22e>
 8004a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dc2b      	bgt.n	8004a74 <_printf_float+0x2bc>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <_printf_float+0x300>)
 8004a20:	4659      	mov	r1, fp
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b0      	blx	r6
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f af1d 	beq.w	8004866 <_printf_float+0xae>
 8004a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a2e:	b923      	cbnz	r3, 8004a3a <_printf_float+0x282>
 8004a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a32:	b913      	cbnz	r3, 8004a3a <_printf_float+0x282>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	07d9      	lsls	r1, r3, #31
 8004a38:	d5d9      	bpl.n	80049ee <_printf_float+0x236>
 8004a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a3e:	4659      	mov	r1, fp
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b0      	blx	r6
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f af0e 	beq.w	8004866 <_printf_float+0xae>
 8004a4a:	f04f 0800 	mov.w	r8, #0
 8004a4e:	f104 091a 	add.w	r9, r4, #26
 8004a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a54:	425b      	negs	r3, r3
 8004a56:	4543      	cmp	r3, r8
 8004a58:	dc01      	bgt.n	8004a5e <_printf_float+0x2a6>
 8004a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a5c:	e797      	b.n	800498e <_printf_float+0x1d6>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	464a      	mov	r2, r9
 8004a62:	4659      	mov	r1, fp
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b0      	blx	r6
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f aefc 	beq.w	8004866 <_printf_float+0xae>
 8004a6e:	f108 0801 	add.w	r8, r8, #1
 8004a72:	e7ee      	b.n	8004a52 <_printf_float+0x29a>
 8004a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	bfa8      	it	ge
 8004a7c:	461a      	movge	r2, r3
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	4690      	mov	r8, r2
 8004a82:	dd07      	ble.n	8004a94 <_printf_float+0x2dc>
 8004a84:	4613      	mov	r3, r2
 8004a86:	4659      	mov	r1, fp
 8004a88:	463a      	mov	r2, r7
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b0      	blx	r6
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f aee9 	beq.w	8004866 <_printf_float+0xae>
 8004a94:	f104 031a 	add.w	r3, r4, #26
 8004a98:	f04f 0a00 	mov.w	sl, #0
 8004a9c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aa2:	e015      	b.n	8004ad0 <_printf_float+0x318>
 8004aa4:	7fefffff 	.word	0x7fefffff
 8004aa8:	08006774 	.word	0x08006774
 8004aac:	08006770 	.word	0x08006770
 8004ab0:	0800677c 	.word	0x0800677c
 8004ab4:	08006778 	.word	0x08006778
 8004ab8:	08006780 	.word	0x08006780
 8004abc:	2301      	movs	r3, #1
 8004abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b0      	blx	r6
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f aecd 	beq.w	8004866 <_printf_float+0xae>
 8004acc:	f10a 0a01 	add.w	sl, sl, #1
 8004ad0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004ad4:	eba9 0308 	sub.w	r3, r9, r8
 8004ad8:	4553      	cmp	r3, sl
 8004ada:	dcef      	bgt.n	8004abc <_printf_float+0x304>
 8004adc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	444f      	add	r7, r9
 8004ae4:	db14      	blt.n	8004b10 <_printf_float+0x358>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	07da      	lsls	r2, r3, #31
 8004aea:	d411      	bmi.n	8004b10 <_printf_float+0x358>
 8004aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004af0:	eba3 0209 	sub.w	r2, r3, r9
 8004af4:	eba3 0901 	sub.w	r9, r3, r1
 8004af8:	4591      	cmp	r9, r2
 8004afa:	bfa8      	it	ge
 8004afc:	4691      	movge	r9, r2
 8004afe:	f1b9 0f00 	cmp.w	r9, #0
 8004b02:	dc0d      	bgt.n	8004b20 <_printf_float+0x368>
 8004b04:	2700      	movs	r7, #0
 8004b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b0a:	f104 081a 	add.w	r8, r4, #26
 8004b0e:	e018      	b.n	8004b42 <_printf_float+0x38a>
 8004b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b14:	4659      	mov	r1, fp
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b0      	blx	r6
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d1e6      	bne.n	8004aec <_printf_float+0x334>
 8004b1e:	e6a2      	b.n	8004866 <_printf_float+0xae>
 8004b20:	464b      	mov	r3, r9
 8004b22:	463a      	mov	r2, r7
 8004b24:	4659      	mov	r1, fp
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b0      	blx	r6
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d1ea      	bne.n	8004b04 <_printf_float+0x34c>
 8004b2e:	e69a      	b.n	8004866 <_printf_float+0xae>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4642      	mov	r2, r8
 8004b34:	4659      	mov	r1, fp
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b0      	blx	r6
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f ae93 	beq.w	8004866 <_printf_float+0xae>
 8004b40:	3701      	adds	r7, #1
 8004b42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	eba3 0309 	sub.w	r3, r3, r9
 8004b4c:	42bb      	cmp	r3, r7
 8004b4e:	dcef      	bgt.n	8004b30 <_printf_float+0x378>
 8004b50:	e74d      	b.n	80049ee <_printf_float+0x236>
 8004b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b54:	2a01      	cmp	r2, #1
 8004b56:	dc01      	bgt.n	8004b5c <_printf_float+0x3a4>
 8004b58:	07db      	lsls	r3, r3, #31
 8004b5a:	d538      	bpl.n	8004bce <_printf_float+0x416>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	463a      	mov	r2, r7
 8004b60:	4659      	mov	r1, fp
 8004b62:	4628      	mov	r0, r5
 8004b64:	47b0      	blx	r6
 8004b66:	3001      	adds	r0, #1
 8004b68:	f43f ae7d 	beq.w	8004866 <_printf_float+0xae>
 8004b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b70:	4659      	mov	r1, fp
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b0      	blx	r6
 8004b76:	3001      	adds	r0, #1
 8004b78:	f107 0701 	add.w	r7, r7, #1
 8004b7c:	f43f ae73 	beq.w	8004866 <_printf_float+0xae>
 8004b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b86:	2200      	movs	r2, #0
 8004b88:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f7fb ff0b 	bl	80009a8 <__aeabi_dcmpeq>
 8004b92:	b9c0      	cbnz	r0, 8004bc6 <_printf_float+0x40e>
 8004b94:	4643      	mov	r3, r8
 8004b96:	463a      	mov	r2, r7
 8004b98:	4659      	mov	r1, fp
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b0      	blx	r6
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d10d      	bne.n	8004bbe <_printf_float+0x406>
 8004ba2:	e660      	b.n	8004866 <_printf_float+0xae>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	4659      	mov	r1, fp
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b0      	blx	r6
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f ae59 	beq.w	8004866 <_printf_float+0xae>
 8004bb4:	3701      	adds	r7, #1
 8004bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	42bb      	cmp	r3, r7
 8004bbc:	dcf2      	bgt.n	8004ba4 <_printf_float+0x3ec>
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bc4:	e6e4      	b.n	8004990 <_printf_float+0x1d8>
 8004bc6:	2700      	movs	r7, #0
 8004bc8:	f104 081a 	add.w	r8, r4, #26
 8004bcc:	e7f3      	b.n	8004bb6 <_printf_float+0x3fe>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7e1      	b.n	8004b96 <_printf_float+0x3de>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b0      	blx	r6
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae42 	beq.w	8004866 <_printf_float+0xae>
 8004be2:	3701      	adds	r7, #1
 8004be4:	68e3      	ldr	r3, [r4, #12]
 8004be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	42bb      	cmp	r3, r7
 8004bec:	dcf1      	bgt.n	8004bd2 <_printf_float+0x41a>
 8004bee:	e702      	b.n	80049f6 <_printf_float+0x23e>
 8004bf0:	2700      	movs	r7, #0
 8004bf2:	f104 0819 	add.w	r8, r4, #25
 8004bf6:	e7f5      	b.n	8004be4 <_printf_float+0x42c>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f43f ae94 	beq.w	8004926 <_printf_float+0x16e>
 8004bfe:	f04f 0c00 	mov.w	ip, #0
 8004c02:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c06:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004c0a:	6022      	str	r2, [r4, #0]
 8004c0c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c10:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	463a      	mov	r2, r7
 8004c18:	464b      	mov	r3, r9
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f7ff fd3a 	bl	8004694 <__cvt>
 8004c20:	4607      	mov	r7, r0
 8004c22:	e64f      	b.n	80048c4 <_printf_float+0x10c>

08004c24 <_printf_common>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	4691      	mov	r9, r2
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	688a      	ldr	r2, [r1, #8]
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	4606      	mov	r6, r0
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bfb8      	it	lt
 8004c36:	4613      	movlt	r3, r2
 8004c38:	f8c9 3000 	str.w	r3, [r9]
 8004c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c40:	460c      	mov	r4, r1
 8004c42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c46:	b112      	cbz	r2, 8004c4e <_printf_common+0x2a>
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f8c9 3000 	str.w	r3, [r9]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	0699      	lsls	r1, r3, #26
 8004c52:	bf42      	ittt	mi
 8004c54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c58:	3302      	addmi	r3, #2
 8004c5a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c5e:	6825      	ldr	r5, [r4, #0]
 8004c60:	f015 0506 	ands.w	r5, r5, #6
 8004c64:	d107      	bne.n	8004c76 <_printf_common+0x52>
 8004c66:	f104 0a19 	add.w	sl, r4, #25
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	42ab      	cmp	r3, r5
 8004c74:	dc29      	bgt.n	8004cca <_printf_common+0xa6>
 8004c76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	3300      	adds	r3, #0
 8004c7e:	bf18      	it	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	0692      	lsls	r2, r2, #26
 8004c84:	d42e      	bmi.n	8004ce4 <_printf_common+0xc0>
 8004c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	47c0      	blx	r8
 8004c90:	3001      	adds	r0, #1
 8004c92:	d021      	beq.n	8004cd8 <_printf_common+0xb4>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	68e5      	ldr	r5, [r4, #12]
 8004c98:	f003 0306 	and.w	r3, r3, #6
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	bf18      	it	ne
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	f8d9 2000 	ldr.w	r2, [r9]
 8004ca6:	f04f 0900 	mov.w	r9, #0
 8004caa:	bf08      	it	eq
 8004cac:	1aad      	subeq	r5, r5, r2
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	bf08      	it	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bfc4      	itt	gt
 8004cbc:	1a9b      	subgt	r3, r3, r2
 8004cbe:	18ed      	addgt	r5, r5, r3
 8004cc0:	341a      	adds	r4, #26
 8004cc2:	454d      	cmp	r5, r9
 8004cc4:	d11a      	bne.n	8004cfc <_printf_common+0xd8>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e008      	b.n	8004cdc <_printf_common+0xb8>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4639      	mov	r1, r7
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	47c0      	blx	r8
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d103      	bne.n	8004ce0 <_printf_common+0xbc>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7c2      	b.n	8004c6a <_printf_common+0x46>
 8004ce4:	2030      	movs	r0, #48	; 0x30
 8004ce6:	18e1      	adds	r1, r4, r3
 8004ce8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf2:	4422      	add	r2, r4
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfa:	e7c4      	b.n	8004c86 <_printf_common+0x62>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4622      	mov	r2, r4
 8004d00:	4639      	mov	r1, r7
 8004d02:	4630      	mov	r0, r6
 8004d04:	47c0      	blx	r8
 8004d06:	3001      	adds	r0, #1
 8004d08:	d0e6      	beq.n	8004cd8 <_printf_common+0xb4>
 8004d0a:	f109 0901 	add.w	r9, r9, #1
 8004d0e:	e7d8      	b.n	8004cc2 <_printf_common+0x9e>

08004d10 <_printf_i>:
 8004d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d18:	460c      	mov	r4, r1
 8004d1a:	7e09      	ldrb	r1, [r1, #24]
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	296e      	cmp	r1, #110	; 0x6e
 8004d20:	4617      	mov	r7, r2
 8004d22:	4606      	mov	r6, r0
 8004d24:	4698      	mov	r8, r3
 8004d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d28:	f000 80b3 	beq.w	8004e92 <_printf_i+0x182>
 8004d2c:	d822      	bhi.n	8004d74 <_printf_i+0x64>
 8004d2e:	2963      	cmp	r1, #99	; 0x63
 8004d30:	d036      	beq.n	8004da0 <_printf_i+0x90>
 8004d32:	d80a      	bhi.n	8004d4a <_printf_i+0x3a>
 8004d34:	2900      	cmp	r1, #0
 8004d36:	f000 80b9 	beq.w	8004eac <_printf_i+0x19c>
 8004d3a:	2958      	cmp	r1, #88	; 0x58
 8004d3c:	f000 8083 	beq.w	8004e46 <_printf_i+0x136>
 8004d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d48:	e032      	b.n	8004db0 <_printf_i+0xa0>
 8004d4a:	2964      	cmp	r1, #100	; 0x64
 8004d4c:	d001      	beq.n	8004d52 <_printf_i+0x42>
 8004d4e:	2969      	cmp	r1, #105	; 0x69
 8004d50:	d1f6      	bne.n	8004d40 <_printf_i+0x30>
 8004d52:	6820      	ldr	r0, [r4, #0]
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	0605      	lsls	r5, r0, #24
 8004d58:	f103 0104 	add.w	r1, r3, #4
 8004d5c:	d52a      	bpl.n	8004db4 <_printf_i+0xa4>
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6011      	str	r1, [r2, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da03      	bge.n	8004d6e <_printf_i+0x5e>
 8004d66:	222d      	movs	r2, #45	; 0x2d
 8004d68:	425b      	negs	r3, r3
 8004d6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d6e:	486f      	ldr	r0, [pc, #444]	; (8004f2c <_printf_i+0x21c>)
 8004d70:	220a      	movs	r2, #10
 8004d72:	e039      	b.n	8004de8 <_printf_i+0xd8>
 8004d74:	2973      	cmp	r1, #115	; 0x73
 8004d76:	f000 809d 	beq.w	8004eb4 <_printf_i+0x1a4>
 8004d7a:	d808      	bhi.n	8004d8e <_printf_i+0x7e>
 8004d7c:	296f      	cmp	r1, #111	; 0x6f
 8004d7e:	d020      	beq.n	8004dc2 <_printf_i+0xb2>
 8004d80:	2970      	cmp	r1, #112	; 0x70
 8004d82:	d1dd      	bne.n	8004d40 <_printf_i+0x30>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	f043 0320 	orr.w	r3, r3, #32
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	e003      	b.n	8004d96 <_printf_i+0x86>
 8004d8e:	2975      	cmp	r1, #117	; 0x75
 8004d90:	d017      	beq.n	8004dc2 <_printf_i+0xb2>
 8004d92:	2978      	cmp	r1, #120	; 0x78
 8004d94:	d1d4      	bne.n	8004d40 <_printf_i+0x30>
 8004d96:	2378      	movs	r3, #120	; 0x78
 8004d98:	4865      	ldr	r0, [pc, #404]	; (8004f30 <_printf_i+0x220>)
 8004d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9e:	e055      	b.n	8004e4c <_printf_i+0x13c>
 8004da0:	6813      	ldr	r3, [r2, #0]
 8004da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da6:	1d19      	adds	r1, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6011      	str	r1, [r2, #0]
 8004dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db0:	2301      	movs	r3, #1
 8004db2:	e08c      	b.n	8004ece <_printf_i+0x1be>
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	bf18      	it	ne
 8004dbe:	b21b      	sxthne	r3, r3
 8004dc0:	e7cf      	b.n	8004d62 <_printf_i+0x52>
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	6825      	ldr	r5, [r4, #0]
 8004dc6:	1d18      	adds	r0, r3, #4
 8004dc8:	6010      	str	r0, [r2, #0]
 8004dca:	0628      	lsls	r0, r5, #24
 8004dcc:	d501      	bpl.n	8004dd2 <_printf_i+0xc2>
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	e002      	b.n	8004dd8 <_printf_i+0xc8>
 8004dd2:	0668      	lsls	r0, r5, #25
 8004dd4:	d5fb      	bpl.n	8004dce <_printf_i+0xbe>
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	296f      	cmp	r1, #111	; 0x6f
 8004dda:	bf14      	ite	ne
 8004ddc:	220a      	movne	r2, #10
 8004dde:	2208      	moveq	r2, #8
 8004de0:	4852      	ldr	r0, [pc, #328]	; (8004f2c <_printf_i+0x21c>)
 8004de2:	2100      	movs	r1, #0
 8004de4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de8:	6865      	ldr	r5, [r4, #4]
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	60a5      	str	r5, [r4, #8]
 8004dee:	f2c0 8095 	blt.w	8004f1c <_printf_i+0x20c>
 8004df2:	6821      	ldr	r1, [r4, #0]
 8004df4:	f021 0104 	bic.w	r1, r1, #4
 8004df8:	6021      	str	r1, [r4, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d13d      	bne.n	8004e7a <_printf_i+0x16a>
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	f040 808e 	bne.w	8004f20 <_printf_i+0x210>
 8004e04:	4665      	mov	r5, ip
 8004e06:	2a08      	cmp	r2, #8
 8004e08:	d10b      	bne.n	8004e22 <_printf_i+0x112>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	07db      	lsls	r3, r3, #31
 8004e0e:	d508      	bpl.n	8004e22 <_printf_i+0x112>
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	6862      	ldr	r2, [r4, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	bfde      	ittt	le
 8004e18:	2330      	movle	r3, #48	; 0x30
 8004e1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e22:	ebac 0305 	sub.w	r3, ip, r5
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	f8cd 8000 	str.w	r8, [sp]
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	aa03      	add	r2, sp, #12
 8004e30:	4621      	mov	r1, r4
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff fef6 	bl	8004c24 <_printf_common>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d14d      	bne.n	8004ed8 <_printf_i+0x1c8>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e40:	b005      	add	sp, #20
 8004e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e46:	4839      	ldr	r0, [pc, #228]	; (8004f2c <_printf_i+0x21c>)
 8004e48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	6821      	ldr	r1, [r4, #0]
 8004e50:	1d1d      	adds	r5, r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6015      	str	r5, [r2, #0]
 8004e56:	060a      	lsls	r2, r1, #24
 8004e58:	d50b      	bpl.n	8004e72 <_printf_i+0x162>
 8004e5a:	07ca      	lsls	r2, r1, #31
 8004e5c:	bf44      	itt	mi
 8004e5e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e62:	6021      	strmi	r1, [r4, #0]
 8004e64:	b91b      	cbnz	r3, 8004e6e <_printf_i+0x15e>
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	f022 0220 	bic.w	r2, r2, #32
 8004e6c:	6022      	str	r2, [r4, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	e7b7      	b.n	8004de2 <_printf_i+0xd2>
 8004e72:	064d      	lsls	r5, r1, #25
 8004e74:	bf48      	it	mi
 8004e76:	b29b      	uxthmi	r3, r3
 8004e78:	e7ef      	b.n	8004e5a <_printf_i+0x14a>
 8004e7a:	4665      	mov	r5, ip
 8004e7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e80:	fb02 3311 	mls	r3, r2, r1, r3
 8004e84:	5cc3      	ldrb	r3, [r0, r3]
 8004e86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d1f5      	bne.n	8004e7c <_printf_i+0x16c>
 8004e90:	e7b9      	b.n	8004e06 <_printf_i+0xf6>
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	1d18      	adds	r0, r3, #4
 8004e98:	6961      	ldr	r1, [r4, #20]
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	0628      	lsls	r0, r5, #24
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	d501      	bpl.n	8004ea6 <_printf_i+0x196>
 8004ea2:	6019      	str	r1, [r3, #0]
 8004ea4:	e002      	b.n	8004eac <_printf_i+0x19c>
 8004ea6:	066a      	lsls	r2, r5, #25
 8004ea8:	d5fb      	bpl.n	8004ea2 <_printf_i+0x192>
 8004eaa:	8019      	strh	r1, [r3, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	4665      	mov	r5, ip
 8004eb0:	6123      	str	r3, [r4, #16]
 8004eb2:	e7b9      	b.n	8004e28 <_printf_i+0x118>
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	1d19      	adds	r1, r3, #4
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	681d      	ldr	r5, [r3, #0]
 8004ebc:	6862      	ldr	r2, [r4, #4]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f7ff fb07 	bl	80044d4 <memchr>
 8004ec6:	b108      	cbz	r0, 8004ecc <_printf_i+0x1bc>
 8004ec8:	1b40      	subs	r0, r0, r5
 8004eca:	6060      	str	r0, [r4, #4]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed6:	e7a7      	b.n	8004e28 <_printf_i+0x118>
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	462a      	mov	r2, r5
 8004edc:	4639      	mov	r1, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d0aa      	beq.n	8004e3c <_printf_i+0x12c>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	079b      	lsls	r3, r3, #30
 8004eea:	d413      	bmi.n	8004f14 <_printf_i+0x204>
 8004eec:	68e0      	ldr	r0, [r4, #12]
 8004eee:	9b03      	ldr	r3, [sp, #12]
 8004ef0:	4298      	cmp	r0, r3
 8004ef2:	bfb8      	it	lt
 8004ef4:	4618      	movlt	r0, r3
 8004ef6:	e7a3      	b.n	8004e40 <_printf_i+0x130>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	464a      	mov	r2, r9
 8004efc:	4639      	mov	r1, r7
 8004efe:	4630      	mov	r0, r6
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d09a      	beq.n	8004e3c <_printf_i+0x12c>
 8004f06:	3501      	adds	r5, #1
 8004f08:	68e3      	ldr	r3, [r4, #12]
 8004f0a:	9a03      	ldr	r2, [sp, #12]
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	42ab      	cmp	r3, r5
 8004f10:	dcf2      	bgt.n	8004ef8 <_printf_i+0x1e8>
 8004f12:	e7eb      	b.n	8004eec <_printf_i+0x1dc>
 8004f14:	2500      	movs	r5, #0
 8004f16:	f104 0919 	add.w	r9, r4, #25
 8004f1a:	e7f5      	b.n	8004f08 <_printf_i+0x1f8>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ac      	bne.n	8004e7a <_printf_i+0x16a>
 8004f20:	7803      	ldrb	r3, [r0, #0]
 8004f22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2a:	e76c      	b.n	8004e06 <_printf_i+0xf6>
 8004f2c:	08006782 	.word	0x08006782
 8004f30:	08006793 	.word	0x08006793

08004f34 <_sbrk_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	2300      	movs	r3, #0
 8004f38:	4c05      	ldr	r4, [pc, #20]	; (8004f50 <_sbrk_r+0x1c>)
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	f7fc fe04 	bl	8001b4c <_sbrk>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_sbrk_r+0x1a>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_sbrk_r+0x1a>
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	200002f4 	.word	0x200002f4

08004f54 <_raise_r>:
 8004f54:	291f      	cmp	r1, #31
 8004f56:	b538      	push	{r3, r4, r5, lr}
 8004f58:	4604      	mov	r4, r0
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	d904      	bls.n	8004f68 <_raise_r+0x14>
 8004f5e:	2316      	movs	r3, #22
 8004f60:	6003      	str	r3, [r0, #0]
 8004f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f6a:	b112      	cbz	r2, 8004f72 <_raise_r+0x1e>
 8004f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f70:	b94b      	cbnz	r3, 8004f86 <_raise_r+0x32>
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 f830 	bl	8004fd8 <_getpid_r>
 8004f78:	462a      	mov	r2, r5
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f82:	f000 b817 	b.w	8004fb4 <_kill_r>
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d00a      	beq.n	8004fa0 <_raise_r+0x4c>
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	d103      	bne.n	8004f96 <_raise_r+0x42>
 8004f8e:	2316      	movs	r3, #22
 8004f90:	6003      	str	r3, [r0, #0]
 8004f92:	2001      	movs	r0, #1
 8004f94:	e7e7      	b.n	8004f66 <_raise_r+0x12>
 8004f96:	2400      	movs	r4, #0
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f9e:	4798      	blx	r3
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e7e0      	b.n	8004f66 <_raise_r+0x12>

08004fa4 <raise>:
 8004fa4:	4b02      	ldr	r3, [pc, #8]	; (8004fb0 <raise+0xc>)
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	f7ff bfd3 	b.w	8004f54 <_raise_r>
 8004fae:	bf00      	nop
 8004fb0:	20000010 	.word	0x20000010

08004fb4 <_kill_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4c06      	ldr	r4, [pc, #24]	; (8004fd4 <_kill_r+0x20>)
 8004fba:	4605      	mov	r5, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	f7fc fda8 	bl	8001b16 <_kill>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d102      	bne.n	8004fd0 <_kill_r+0x1c>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	b103      	cbz	r3, 8004fd0 <_kill_r+0x1c>
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	bd38      	pop	{r3, r4, r5, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200002f4 	.word	0x200002f4

08004fd8 <_getpid_r>:
 8004fd8:	f7fc bd96 	b.w	8001b08 <_getpid>

08004fdc <_strtol_l.isra.0>:
 8004fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	4689      	mov	r9, r1
 8004fe4:	4692      	mov	sl, r2
 8004fe6:	461e      	mov	r6, r3
 8004fe8:	460f      	mov	r7, r1
 8004fea:	463d      	mov	r5, r7
 8004fec:	9808      	ldr	r0, [sp, #32]
 8004fee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ff2:	f000 fee9 	bl	8005dc8 <__locale_ctype_ptr_l>
 8004ff6:	4420      	add	r0, r4
 8004ff8:	7843      	ldrb	r3, [r0, #1]
 8004ffa:	f013 0308 	ands.w	r3, r3, #8
 8004ffe:	d132      	bne.n	8005066 <_strtol_l.isra.0+0x8a>
 8005000:	2c2d      	cmp	r4, #45	; 0x2d
 8005002:	d132      	bne.n	800506a <_strtol_l.isra.0+0x8e>
 8005004:	2201      	movs	r2, #1
 8005006:	787c      	ldrb	r4, [r7, #1]
 8005008:	1cbd      	adds	r5, r7, #2
 800500a:	2e00      	cmp	r6, #0
 800500c:	d05d      	beq.n	80050ca <_strtol_l.isra.0+0xee>
 800500e:	2e10      	cmp	r6, #16
 8005010:	d109      	bne.n	8005026 <_strtol_l.isra.0+0x4a>
 8005012:	2c30      	cmp	r4, #48	; 0x30
 8005014:	d107      	bne.n	8005026 <_strtol_l.isra.0+0x4a>
 8005016:	782b      	ldrb	r3, [r5, #0]
 8005018:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800501c:	2b58      	cmp	r3, #88	; 0x58
 800501e:	d14f      	bne.n	80050c0 <_strtol_l.isra.0+0xe4>
 8005020:	2610      	movs	r6, #16
 8005022:	786c      	ldrb	r4, [r5, #1]
 8005024:	3502      	adds	r5, #2
 8005026:	2a00      	cmp	r2, #0
 8005028:	bf14      	ite	ne
 800502a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800502e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005032:	2700      	movs	r7, #0
 8005034:	fbb1 fcf6 	udiv	ip, r1, r6
 8005038:	4638      	mov	r0, r7
 800503a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800503e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005042:	2b09      	cmp	r3, #9
 8005044:	d817      	bhi.n	8005076 <_strtol_l.isra.0+0x9a>
 8005046:	461c      	mov	r4, r3
 8005048:	42a6      	cmp	r6, r4
 800504a:	dd23      	ble.n	8005094 <_strtol_l.isra.0+0xb8>
 800504c:	1c7b      	adds	r3, r7, #1
 800504e:	d007      	beq.n	8005060 <_strtol_l.isra.0+0x84>
 8005050:	4584      	cmp	ip, r0
 8005052:	d31c      	bcc.n	800508e <_strtol_l.isra.0+0xb2>
 8005054:	d101      	bne.n	800505a <_strtol_l.isra.0+0x7e>
 8005056:	45a6      	cmp	lr, r4
 8005058:	db19      	blt.n	800508e <_strtol_l.isra.0+0xb2>
 800505a:	2701      	movs	r7, #1
 800505c:	fb00 4006 	mla	r0, r0, r6, r4
 8005060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005064:	e7eb      	b.n	800503e <_strtol_l.isra.0+0x62>
 8005066:	462f      	mov	r7, r5
 8005068:	e7bf      	b.n	8004fea <_strtol_l.isra.0+0xe>
 800506a:	2c2b      	cmp	r4, #43	; 0x2b
 800506c:	bf04      	itt	eq
 800506e:	1cbd      	addeq	r5, r7, #2
 8005070:	787c      	ldrbeq	r4, [r7, #1]
 8005072:	461a      	mov	r2, r3
 8005074:	e7c9      	b.n	800500a <_strtol_l.isra.0+0x2e>
 8005076:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800507a:	2b19      	cmp	r3, #25
 800507c:	d801      	bhi.n	8005082 <_strtol_l.isra.0+0xa6>
 800507e:	3c37      	subs	r4, #55	; 0x37
 8005080:	e7e2      	b.n	8005048 <_strtol_l.isra.0+0x6c>
 8005082:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005086:	2b19      	cmp	r3, #25
 8005088:	d804      	bhi.n	8005094 <_strtol_l.isra.0+0xb8>
 800508a:	3c57      	subs	r4, #87	; 0x57
 800508c:	e7dc      	b.n	8005048 <_strtol_l.isra.0+0x6c>
 800508e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005092:	e7e5      	b.n	8005060 <_strtol_l.isra.0+0x84>
 8005094:	1c7b      	adds	r3, r7, #1
 8005096:	d108      	bne.n	80050aa <_strtol_l.isra.0+0xce>
 8005098:	2322      	movs	r3, #34	; 0x22
 800509a:	4608      	mov	r0, r1
 800509c:	f8c8 3000 	str.w	r3, [r8]
 80050a0:	f1ba 0f00 	cmp.w	sl, #0
 80050a4:	d107      	bne.n	80050b6 <_strtol_l.isra.0+0xda>
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	b102      	cbz	r2, 80050ae <_strtol_l.isra.0+0xd2>
 80050ac:	4240      	negs	r0, r0
 80050ae:	f1ba 0f00 	cmp.w	sl, #0
 80050b2:	d0f8      	beq.n	80050a6 <_strtol_l.isra.0+0xca>
 80050b4:	b10f      	cbz	r7, 80050ba <_strtol_l.isra.0+0xde>
 80050b6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80050ba:	f8ca 9000 	str.w	r9, [sl]
 80050be:	e7f2      	b.n	80050a6 <_strtol_l.isra.0+0xca>
 80050c0:	2430      	movs	r4, #48	; 0x30
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	d1af      	bne.n	8005026 <_strtol_l.isra.0+0x4a>
 80050c6:	2608      	movs	r6, #8
 80050c8:	e7ad      	b.n	8005026 <_strtol_l.isra.0+0x4a>
 80050ca:	2c30      	cmp	r4, #48	; 0x30
 80050cc:	d0a3      	beq.n	8005016 <_strtol_l.isra.0+0x3a>
 80050ce:	260a      	movs	r6, #10
 80050d0:	e7a9      	b.n	8005026 <_strtol_l.isra.0+0x4a>
	...

080050d4 <strtol>:
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <strtol+0x24>)
 80050d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050d8:	681c      	ldr	r4, [r3, #0]
 80050da:	4d08      	ldr	r5, [pc, #32]	; (80050fc <strtol+0x28>)
 80050dc:	6a23      	ldr	r3, [r4, #32]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf08      	it	eq
 80050e2:	462b      	moveq	r3, r5
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	460a      	mov	r2, r1
 80050ea:	4601      	mov	r1, r0
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7ff ff75 	bl	8004fdc <_strtol_l.isra.0>
 80050f2:	b003      	add	sp, #12
 80050f4:	bd30      	pop	{r4, r5, pc}
 80050f6:	bf00      	nop
 80050f8:	20000010 	.word	0x20000010
 80050fc:	20000074 	.word	0x20000074

08005100 <_vsiprintf_r>:
 8005100:	b500      	push	{lr}
 8005102:	b09b      	sub	sp, #108	; 0x6c
 8005104:	9100      	str	r1, [sp, #0]
 8005106:	9104      	str	r1, [sp, #16]
 8005108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800510c:	9105      	str	r1, [sp, #20]
 800510e:	9102      	str	r1, [sp, #8]
 8005110:	4905      	ldr	r1, [pc, #20]	; (8005128 <_vsiprintf_r+0x28>)
 8005112:	9103      	str	r1, [sp, #12]
 8005114:	4669      	mov	r1, sp
 8005116:	f001 f9c1 	bl	800649c <_svfiprintf_r>
 800511a:	2200      	movs	r2, #0
 800511c:	9b00      	ldr	r3, [sp, #0]
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	b01b      	add	sp, #108	; 0x6c
 8005122:	f85d fb04 	ldr.w	pc, [sp], #4
 8005126:	bf00      	nop
 8005128:	ffff0208 	.word	0xffff0208

0800512c <vsiprintf>:
 800512c:	4613      	mov	r3, r2
 800512e:	460a      	mov	r2, r1
 8005130:	4601      	mov	r1, r0
 8005132:	4802      	ldr	r0, [pc, #8]	; (800513c <vsiprintf+0x10>)
 8005134:	6800      	ldr	r0, [r0, #0]
 8005136:	f7ff bfe3 	b.w	8005100 <_vsiprintf_r>
 800513a:	bf00      	nop
 800513c:	20000010 	.word	0x20000010

08005140 <quorem>:
 8005140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	6903      	ldr	r3, [r0, #16]
 8005146:	690c      	ldr	r4, [r1, #16]
 8005148:	4680      	mov	r8, r0
 800514a:	42a3      	cmp	r3, r4
 800514c:	f2c0 8084 	blt.w	8005258 <quorem+0x118>
 8005150:	3c01      	subs	r4, #1
 8005152:	f101 0714 	add.w	r7, r1, #20
 8005156:	f100 0614 	add.w	r6, r0, #20
 800515a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800515e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005162:	3501      	adds	r5, #1
 8005164:	fbb0 f5f5 	udiv	r5, r0, r5
 8005168:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800516c:	eb06 030c 	add.w	r3, r6, ip
 8005170:	eb07 090c 	add.w	r9, r7, ip
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	b39d      	cbz	r5, 80051e0 <quorem+0xa0>
 8005178:	f04f 0a00 	mov.w	sl, #0
 800517c:	4638      	mov	r0, r7
 800517e:	46b6      	mov	lr, r6
 8005180:	46d3      	mov	fp, sl
 8005182:	f850 2b04 	ldr.w	r2, [r0], #4
 8005186:	b293      	uxth	r3, r2
 8005188:	fb05 a303 	mla	r3, r5, r3, sl
 800518c:	0c12      	lsrs	r2, r2, #16
 800518e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005192:	fb05 a202 	mla	r2, r5, r2, sl
 8005196:	b29b      	uxth	r3, r3
 8005198:	ebab 0303 	sub.w	r3, fp, r3
 800519c:	f8de b000 	ldr.w	fp, [lr]
 80051a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80051a4:	fa1f fb8b 	uxth.w	fp, fp
 80051a8:	445b      	add	r3, fp
 80051aa:	fa1f fb82 	uxth.w	fp, r2
 80051ae:	f8de 2000 	ldr.w	r2, [lr]
 80051b2:	4581      	cmp	r9, r0
 80051b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80051b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051c2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80051c6:	f84e 3b04 	str.w	r3, [lr], #4
 80051ca:	d2da      	bcs.n	8005182 <quorem+0x42>
 80051cc:	f856 300c 	ldr.w	r3, [r6, ip]
 80051d0:	b933      	cbnz	r3, 80051e0 <quorem+0xa0>
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	3b04      	subs	r3, #4
 80051d6:	429e      	cmp	r6, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	d331      	bcc.n	8005240 <quorem+0x100>
 80051dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80051e0:	4640      	mov	r0, r8
 80051e2:	f001 f82b 	bl	800623c <__mcmp>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	db26      	blt.n	8005238 <quorem+0xf8>
 80051ea:	4630      	mov	r0, r6
 80051ec:	f04f 0c00 	mov.w	ip, #0
 80051f0:	3501      	adds	r5, #1
 80051f2:	f857 1b04 	ldr.w	r1, [r7], #4
 80051f6:	f8d0 e000 	ldr.w	lr, [r0]
 80051fa:	b28b      	uxth	r3, r1
 80051fc:	ebac 0303 	sub.w	r3, ip, r3
 8005200:	fa1f f28e 	uxth.w	r2, lr
 8005204:	4413      	add	r3, r2
 8005206:	0c0a      	lsrs	r2, r1, #16
 8005208:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800520c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005216:	45b9      	cmp	r9, r7
 8005218:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800521c:	f840 3b04 	str.w	r3, [r0], #4
 8005220:	d2e7      	bcs.n	80051f2 <quorem+0xb2>
 8005222:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005226:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800522a:	b92a      	cbnz	r2, 8005238 <quorem+0xf8>
 800522c:	3b04      	subs	r3, #4
 800522e:	429e      	cmp	r6, r3
 8005230:	461a      	mov	r2, r3
 8005232:	d30b      	bcc.n	800524c <quorem+0x10c>
 8005234:	f8c8 4010 	str.w	r4, [r8, #16]
 8005238:	4628      	mov	r0, r5
 800523a:	b003      	add	sp, #12
 800523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	3b04      	subs	r3, #4
 8005244:	2a00      	cmp	r2, #0
 8005246:	d1c9      	bne.n	80051dc <quorem+0x9c>
 8005248:	3c01      	subs	r4, #1
 800524a:	e7c4      	b.n	80051d6 <quorem+0x96>
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	3b04      	subs	r3, #4
 8005250:	2a00      	cmp	r2, #0
 8005252:	d1ef      	bne.n	8005234 <quorem+0xf4>
 8005254:	3c01      	subs	r4, #1
 8005256:	e7ea      	b.n	800522e <quorem+0xee>
 8005258:	2000      	movs	r0, #0
 800525a:	e7ee      	b.n	800523a <quorem+0xfa>
 800525c:	0000      	movs	r0, r0
	...

08005260 <_dtoa_r>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	4616      	mov	r6, r2
 8005266:	461f      	mov	r7, r3
 8005268:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800526a:	b095      	sub	sp, #84	; 0x54
 800526c:	4604      	mov	r4, r0
 800526e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005272:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005276:	b93d      	cbnz	r5, 8005288 <_dtoa_r+0x28>
 8005278:	2010      	movs	r0, #16
 800527a:	f7ff f923 	bl	80044c4 <malloc>
 800527e:	6260      	str	r0, [r4, #36]	; 0x24
 8005280:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005284:	6005      	str	r5, [r0, #0]
 8005286:	60c5      	str	r5, [r0, #12]
 8005288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800528a:	6819      	ldr	r1, [r3, #0]
 800528c:	b151      	cbz	r1, 80052a4 <_dtoa_r+0x44>
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	2301      	movs	r3, #1
 8005292:	4093      	lsls	r3, r2
 8005294:	604a      	str	r2, [r1, #4]
 8005296:	608b      	str	r3, [r1, #8]
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fdef 	bl	8005e7c <_Bfree>
 800529e:	2200      	movs	r2, #0
 80052a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	1e3b      	subs	r3, r7, #0
 80052a6:	bfaf      	iteee	ge
 80052a8:	2300      	movge	r3, #0
 80052aa:	2201      	movlt	r2, #1
 80052ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052b0:	9303      	strlt	r3, [sp, #12]
 80052b2:	bfac      	ite	ge
 80052b4:	f8c8 3000 	strge.w	r3, [r8]
 80052b8:	f8c8 2000 	strlt.w	r2, [r8]
 80052bc:	4bae      	ldr	r3, [pc, #696]	; (8005578 <_dtoa_r+0x318>)
 80052be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80052c2:	ea33 0308 	bics.w	r3, r3, r8
 80052c6:	d11b      	bne.n	8005300 <_dtoa_r+0xa0>
 80052c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80052cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	9b02      	ldr	r3, [sp, #8]
 80052d2:	b923      	cbnz	r3, 80052de <_dtoa_r+0x7e>
 80052d4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052d8:	2800      	cmp	r0, #0
 80052da:	f000 8545 	beq.w	8005d68 <_dtoa_r+0xb08>
 80052de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052e0:	b953      	cbnz	r3, 80052f8 <_dtoa_r+0x98>
 80052e2:	4ba6      	ldr	r3, [pc, #664]	; (800557c <_dtoa_r+0x31c>)
 80052e4:	e021      	b.n	800532a <_dtoa_r+0xca>
 80052e6:	4ba6      	ldr	r3, [pc, #664]	; (8005580 <_dtoa_r+0x320>)
 80052e8:	9306      	str	r3, [sp, #24]
 80052ea:	3308      	adds	r3, #8
 80052ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	9806      	ldr	r0, [sp, #24]
 80052f2:	b015      	add	sp, #84	; 0x54
 80052f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f8:	4ba0      	ldr	r3, [pc, #640]	; (800557c <_dtoa_r+0x31c>)
 80052fa:	9306      	str	r3, [sp, #24]
 80052fc:	3303      	adds	r3, #3
 80052fe:	e7f5      	b.n	80052ec <_dtoa_r+0x8c>
 8005300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005304:	2200      	movs	r2, #0
 8005306:	2300      	movs	r3, #0
 8005308:	4630      	mov	r0, r6
 800530a:	4639      	mov	r1, r7
 800530c:	f7fb fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005310:	4682      	mov	sl, r0
 8005312:	b160      	cbz	r0, 800532e <_dtoa_r+0xce>
 8005314:	2301      	movs	r3, #1
 8005316:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8520 	beq.w	8005d62 <_dtoa_r+0xb02>
 8005322:	4b98      	ldr	r3, [pc, #608]	; (8005584 <_dtoa_r+0x324>)
 8005324:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	3b01      	subs	r3, #1
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	e7e0      	b.n	80052f0 <_dtoa_r+0x90>
 800532e:	ab12      	add	r3, sp, #72	; 0x48
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	ab13      	add	r3, sp, #76	; 0x4c
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4632      	mov	r2, r6
 8005338:	463b      	mov	r3, r7
 800533a:	4620      	mov	r0, r4
 800533c:	f000 fff6 	bl	800632c <__d2b>
 8005340:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005344:	4683      	mov	fp, r0
 8005346:	2d00      	cmp	r5, #0
 8005348:	d07d      	beq.n	8005446 <_dtoa_r+0x1e6>
 800534a:	46b0      	mov	r8, r6
 800534c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005350:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005354:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005358:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800535c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005360:	2200      	movs	r2, #0
 8005362:	4b89      	ldr	r3, [pc, #548]	; (8005588 <_dtoa_r+0x328>)
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	f7fa fefe 	bl	8000168 <__aeabi_dsub>
 800536c:	a37c      	add	r3, pc, #496	; (adr r3, 8005560 <_dtoa_r+0x300>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f7fb f8b1 	bl	80004d8 <__aeabi_dmul>
 8005376:	a37c      	add	r3, pc, #496	; (adr r3, 8005568 <_dtoa_r+0x308>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fa fef6 	bl	800016c <__adddf3>
 8005380:	4606      	mov	r6, r0
 8005382:	4628      	mov	r0, r5
 8005384:	460f      	mov	r7, r1
 8005386:	f7fb f83d 	bl	8000404 <__aeabi_i2d>
 800538a:	a379      	add	r3, pc, #484	; (adr r3, 8005570 <_dtoa_r+0x310>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f7fb f8a2 	bl	80004d8 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fa fee6 	bl	800016c <__adddf3>
 80053a0:	4606      	mov	r6, r0
 80053a2:	460f      	mov	r7, r1
 80053a4:	f7fb fb48 	bl	8000a38 <__aeabi_d2iz>
 80053a8:	2200      	movs	r2, #0
 80053aa:	4682      	mov	sl, r0
 80053ac:	2300      	movs	r3, #0
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fb fb03 	bl	80009bc <__aeabi_dcmplt>
 80053b6:	b148      	cbz	r0, 80053cc <_dtoa_r+0x16c>
 80053b8:	4650      	mov	r0, sl
 80053ba:	f7fb f823 	bl	8000404 <__aeabi_i2d>
 80053be:	4632      	mov	r2, r6
 80053c0:	463b      	mov	r3, r7
 80053c2:	f7fb faf1 	bl	80009a8 <__aeabi_dcmpeq>
 80053c6:	b908      	cbnz	r0, 80053cc <_dtoa_r+0x16c>
 80053c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053cc:	f1ba 0f16 	cmp.w	sl, #22
 80053d0:	d85a      	bhi.n	8005488 <_dtoa_r+0x228>
 80053d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053d6:	496d      	ldr	r1, [pc, #436]	; (800558c <_dtoa_r+0x32c>)
 80053d8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80053dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053e0:	f7fb fb0a 	bl	80009f8 <__aeabi_dcmpgt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d051      	beq.n	800548c <_dtoa_r+0x22c>
 80053e8:	2300      	movs	r3, #0
 80053ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053ee:	930d      	str	r3, [sp, #52]	; 0x34
 80053f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053f2:	1b5d      	subs	r5, r3, r5
 80053f4:	1e6b      	subs	r3, r5, #1
 80053f6:	9307      	str	r3, [sp, #28]
 80053f8:	bf43      	ittte	mi
 80053fa:	2300      	movmi	r3, #0
 80053fc:	f1c5 0901 	rsbmi	r9, r5, #1
 8005400:	9307      	strmi	r3, [sp, #28]
 8005402:	f04f 0900 	movpl.w	r9, #0
 8005406:	f1ba 0f00 	cmp.w	sl, #0
 800540a:	db41      	blt.n	8005490 <_dtoa_r+0x230>
 800540c:	9b07      	ldr	r3, [sp, #28]
 800540e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005412:	4453      	add	r3, sl
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	2300      	movs	r3, #0
 8005418:	9308      	str	r3, [sp, #32]
 800541a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800541c:	2b09      	cmp	r3, #9
 800541e:	f200 808f 	bhi.w	8005540 <_dtoa_r+0x2e0>
 8005422:	2b05      	cmp	r3, #5
 8005424:	bfc4      	itt	gt
 8005426:	3b04      	subgt	r3, #4
 8005428:	931e      	strgt	r3, [sp, #120]	; 0x78
 800542a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800542c:	bfc8      	it	gt
 800542e:	2500      	movgt	r5, #0
 8005430:	f1a3 0302 	sub.w	r3, r3, #2
 8005434:	bfd8      	it	le
 8005436:	2501      	movle	r5, #1
 8005438:	2b03      	cmp	r3, #3
 800543a:	f200 808d 	bhi.w	8005558 <_dtoa_r+0x2f8>
 800543e:	e8df f003 	tbb	[pc, r3]
 8005442:	7d7b      	.short	0x7d7b
 8005444:	6f2f      	.short	0x6f2f
 8005446:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800544a:	441d      	add	r5, r3
 800544c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005450:	2820      	cmp	r0, #32
 8005452:	dd13      	ble.n	800547c <_dtoa_r+0x21c>
 8005454:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	fa08 f800 	lsl.w	r8, r8, r0
 800545e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005462:	fa23 f000 	lsr.w	r0, r3, r0
 8005466:	ea48 0000 	orr.w	r0, r8, r0
 800546a:	f7fa ffbb 	bl	80003e4 <__aeabi_ui2d>
 800546e:	2301      	movs	r3, #1
 8005470:	4680      	mov	r8, r0
 8005472:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005476:	3d01      	subs	r5, #1
 8005478:	9310      	str	r3, [sp, #64]	; 0x40
 800547a:	e771      	b.n	8005360 <_dtoa_r+0x100>
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	f1c0 0020 	rsb	r0, r0, #32
 8005482:	fa03 f000 	lsl.w	r0, r3, r0
 8005486:	e7f0      	b.n	800546a <_dtoa_r+0x20a>
 8005488:	2301      	movs	r3, #1
 800548a:	e7b0      	b.n	80053ee <_dtoa_r+0x18e>
 800548c:	900d      	str	r0, [sp, #52]	; 0x34
 800548e:	e7af      	b.n	80053f0 <_dtoa_r+0x190>
 8005490:	f1ca 0300 	rsb	r3, sl, #0
 8005494:	9308      	str	r3, [sp, #32]
 8005496:	2300      	movs	r3, #0
 8005498:	eba9 090a 	sub.w	r9, r9, sl
 800549c:	930c      	str	r3, [sp, #48]	; 0x30
 800549e:	e7bc      	b.n	800541a <_dtoa_r+0x1ba>
 80054a0:	2301      	movs	r3, #1
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	dd74      	ble.n	8005594 <_dtoa_r+0x334>
 80054aa:	4698      	mov	r8, r3
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	2200      	movs	r2, #0
 80054b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054b2:	6072      	str	r2, [r6, #4]
 80054b4:	2204      	movs	r2, #4
 80054b6:	f102 0014 	add.w	r0, r2, #20
 80054ba:	4298      	cmp	r0, r3
 80054bc:	6871      	ldr	r1, [r6, #4]
 80054be:	d96e      	bls.n	800559e <_dtoa_r+0x33e>
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 fca7 	bl	8005e14 <_Balloc>
 80054c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c8:	6030      	str	r0, [r6, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b8 0f0e 	cmp.w	r8, #14
 80054d0:	9306      	str	r3, [sp, #24]
 80054d2:	f200 80ed 	bhi.w	80056b0 <_dtoa_r+0x450>
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	f000 80ea 	beq.w	80056b0 <_dtoa_r+0x450>
 80054dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054e0:	f1ba 0f00 	cmp.w	sl, #0
 80054e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80054e8:	dd77      	ble.n	80055da <_dtoa_r+0x37a>
 80054ea:	4a28      	ldr	r2, [pc, #160]	; (800558c <_dtoa_r+0x32c>)
 80054ec:	f00a 030f 	and.w	r3, sl, #15
 80054f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80054f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054f8:	06f0      	lsls	r0, r6, #27
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005502:	d568      	bpl.n	80055d6 <_dtoa_r+0x376>
 8005504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005508:	4b21      	ldr	r3, [pc, #132]	; (8005590 <_dtoa_r+0x330>)
 800550a:	2503      	movs	r5, #3
 800550c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005510:	f7fb f90c 	bl	800072c <__aeabi_ddiv>
 8005514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005518:	f006 060f 	and.w	r6, r6, #15
 800551c:	4f1c      	ldr	r7, [pc, #112]	; (8005590 <_dtoa_r+0x330>)
 800551e:	e04f      	b.n	80055c0 <_dtoa_r+0x360>
 8005520:	2301      	movs	r3, #1
 8005522:	9309      	str	r3, [sp, #36]	; 0x24
 8005524:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005526:	4453      	add	r3, sl
 8005528:	f103 0801 	add.w	r8, r3, #1
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	4643      	mov	r3, r8
 8005530:	2b01      	cmp	r3, #1
 8005532:	bfb8      	it	lt
 8005534:	2301      	movlt	r3, #1
 8005536:	e7ba      	b.n	80054ae <_dtoa_r+0x24e>
 8005538:	2300      	movs	r3, #0
 800553a:	e7b2      	b.n	80054a2 <_dtoa_r+0x242>
 800553c:	2300      	movs	r3, #0
 800553e:	e7f0      	b.n	8005522 <_dtoa_r+0x2c2>
 8005540:	2501      	movs	r5, #1
 8005542:	2300      	movs	r3, #0
 8005544:	9509      	str	r5, [sp, #36]	; 0x24
 8005546:	931e      	str	r3, [sp, #120]	; 0x78
 8005548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800554c:	2200      	movs	r2, #0
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	4698      	mov	r8, r3
 8005552:	2312      	movs	r3, #18
 8005554:	921f      	str	r2, [sp, #124]	; 0x7c
 8005556:	e7aa      	b.n	80054ae <_dtoa_r+0x24e>
 8005558:	2301      	movs	r3, #1
 800555a:	9309      	str	r3, [sp, #36]	; 0x24
 800555c:	e7f4      	b.n	8005548 <_dtoa_r+0x2e8>
 800555e:	bf00      	nop
 8005560:	636f4361 	.word	0x636f4361
 8005564:	3fd287a7 	.word	0x3fd287a7
 8005568:	8b60c8b3 	.word	0x8b60c8b3
 800556c:	3fc68a28 	.word	0x3fc68a28
 8005570:	509f79fb 	.word	0x509f79fb
 8005574:	3fd34413 	.word	0x3fd34413
 8005578:	7ff00000 	.word	0x7ff00000
 800557c:	080067ad 	.word	0x080067ad
 8005580:	080067a4 	.word	0x080067a4
 8005584:	08006781 	.word	0x08006781
 8005588:	3ff80000 	.word	0x3ff80000
 800558c:	080067e8 	.word	0x080067e8
 8005590:	080067c0 	.word	0x080067c0
 8005594:	2301      	movs	r3, #1
 8005596:	9304      	str	r3, [sp, #16]
 8005598:	4698      	mov	r8, r3
 800559a:	461a      	mov	r2, r3
 800559c:	e7da      	b.n	8005554 <_dtoa_r+0x2f4>
 800559e:	3101      	adds	r1, #1
 80055a0:	6071      	str	r1, [r6, #4]
 80055a2:	0052      	lsls	r2, r2, #1
 80055a4:	e787      	b.n	80054b6 <_dtoa_r+0x256>
 80055a6:	07f1      	lsls	r1, r6, #31
 80055a8:	d508      	bpl.n	80055bc <_dtoa_r+0x35c>
 80055aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b2:	f7fa ff91 	bl	80004d8 <__aeabi_dmul>
 80055b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055ba:	3501      	adds	r5, #1
 80055bc:	1076      	asrs	r6, r6, #1
 80055be:	3708      	adds	r7, #8
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	d1f0      	bne.n	80055a6 <_dtoa_r+0x346>
 80055c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055cc:	f7fb f8ae 	bl	800072c <__aeabi_ddiv>
 80055d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055d4:	e01b      	b.n	800560e <_dtoa_r+0x3ae>
 80055d6:	2502      	movs	r5, #2
 80055d8:	e7a0      	b.n	800551c <_dtoa_r+0x2bc>
 80055da:	f000 80a4 	beq.w	8005726 <_dtoa_r+0x4c6>
 80055de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80055e2:	f1ca 0600 	rsb	r6, sl, #0
 80055e6:	4ba0      	ldr	r3, [pc, #640]	; (8005868 <_dtoa_r+0x608>)
 80055e8:	f006 020f 	and.w	r2, r6, #15
 80055ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa ff70 	bl	80004d8 <__aeabi_dmul>
 80055f8:	2502      	movs	r5, #2
 80055fa:	2300      	movs	r3, #0
 80055fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005600:	4f9a      	ldr	r7, [pc, #616]	; (800586c <_dtoa_r+0x60c>)
 8005602:	1136      	asrs	r6, r6, #4
 8005604:	2e00      	cmp	r6, #0
 8005606:	f040 8083 	bne.w	8005710 <_dtoa_r+0x4b0>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e0      	bne.n	80055d0 <_dtoa_r+0x370>
 800560e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 808a 	beq.w	800572a <_dtoa_r+0x4ca>
 8005616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800561e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005622:	2200      	movs	r2, #0
 8005624:	4b92      	ldr	r3, [pc, #584]	; (8005870 <_dtoa_r+0x610>)
 8005626:	f7fb f9c9 	bl	80009bc <__aeabi_dcmplt>
 800562a:	2800      	cmp	r0, #0
 800562c:	d07d      	beq.n	800572a <_dtoa_r+0x4ca>
 800562e:	f1b8 0f00 	cmp.w	r8, #0
 8005632:	d07a      	beq.n	800572a <_dtoa_r+0x4ca>
 8005634:	9b04      	ldr	r3, [sp, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	dd36      	ble.n	80056a8 <_dtoa_r+0x448>
 800563a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800563e:	2200      	movs	r2, #0
 8005640:	4b8c      	ldr	r3, [pc, #560]	; (8005874 <_dtoa_r+0x614>)
 8005642:	f7fa ff49 	bl	80004d8 <__aeabi_dmul>
 8005646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800564a:	9e04      	ldr	r6, [sp, #16]
 800564c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005650:	3501      	adds	r5, #1
 8005652:	4628      	mov	r0, r5
 8005654:	f7fa fed6 	bl	8000404 <__aeabi_i2d>
 8005658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800565c:	f7fa ff3c 	bl	80004d8 <__aeabi_dmul>
 8005660:	2200      	movs	r2, #0
 8005662:	4b85      	ldr	r3, [pc, #532]	; (8005878 <_dtoa_r+0x618>)
 8005664:	f7fa fd82 	bl	800016c <__adddf3>
 8005668:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800566c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005670:	950b      	str	r5, [sp, #44]	; 0x2c
 8005672:	2e00      	cmp	r6, #0
 8005674:	d15c      	bne.n	8005730 <_dtoa_r+0x4d0>
 8005676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	4b7f      	ldr	r3, [pc, #508]	; (800587c <_dtoa_r+0x61c>)
 800567e:	f7fa fd73 	bl	8000168 <__aeabi_dsub>
 8005682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005684:	462b      	mov	r3, r5
 8005686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800568a:	f7fb f9b5 	bl	80009f8 <__aeabi_dcmpgt>
 800568e:	2800      	cmp	r0, #0
 8005690:	f040 8281 	bne.w	8005b96 <_dtoa_r+0x936>
 8005694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800569e:	f7fb f98d 	bl	80009bc <__aeabi_dcmplt>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f040 8275 	bne.w	8005b92 <_dtoa_r+0x932>
 80056a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80056ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f2c0 814b 	blt.w	800594e <_dtoa_r+0x6ee>
 80056b8:	f1ba 0f0e 	cmp.w	sl, #14
 80056bc:	f300 8147 	bgt.w	800594e <_dtoa_r+0x6ee>
 80056c0:	4b69      	ldr	r3, [pc, #420]	; (8005868 <_dtoa_r+0x608>)
 80056c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f280 80d7 	bge.w	8005884 <_dtoa_r+0x624>
 80056d6:	f1b8 0f00 	cmp.w	r8, #0
 80056da:	f300 80d3 	bgt.w	8005884 <_dtoa_r+0x624>
 80056de:	f040 8257 	bne.w	8005b90 <_dtoa_r+0x930>
 80056e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056e6:	2200      	movs	r2, #0
 80056e8:	4b64      	ldr	r3, [pc, #400]	; (800587c <_dtoa_r+0x61c>)
 80056ea:	f7fa fef5 	bl	80004d8 <__aeabi_dmul>
 80056ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056f2:	f7fb f977 	bl	80009e4 <__aeabi_dcmpge>
 80056f6:	4646      	mov	r6, r8
 80056f8:	4647      	mov	r7, r8
 80056fa:	2800      	cmp	r0, #0
 80056fc:	f040 822d 	bne.w	8005b5a <_dtoa_r+0x8fa>
 8005700:	9b06      	ldr	r3, [sp, #24]
 8005702:	9a06      	ldr	r2, [sp, #24]
 8005704:	1c5d      	adds	r5, r3, #1
 8005706:	2331      	movs	r3, #49	; 0x31
 8005708:	f10a 0a01 	add.w	sl, sl, #1
 800570c:	7013      	strb	r3, [r2, #0]
 800570e:	e228      	b.n	8005b62 <_dtoa_r+0x902>
 8005710:	07f2      	lsls	r2, r6, #31
 8005712:	d505      	bpl.n	8005720 <_dtoa_r+0x4c0>
 8005714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005718:	f7fa fede 	bl	80004d8 <__aeabi_dmul>
 800571c:	2301      	movs	r3, #1
 800571e:	3501      	adds	r5, #1
 8005720:	1076      	asrs	r6, r6, #1
 8005722:	3708      	adds	r7, #8
 8005724:	e76e      	b.n	8005604 <_dtoa_r+0x3a4>
 8005726:	2502      	movs	r5, #2
 8005728:	e771      	b.n	800560e <_dtoa_r+0x3ae>
 800572a:	4657      	mov	r7, sl
 800572c:	4646      	mov	r6, r8
 800572e:	e790      	b.n	8005652 <_dtoa_r+0x3f2>
 8005730:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <_dtoa_r+0x608>)
 8005732:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005736:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d048      	beq.n	80057d2 <_dtoa_r+0x572>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	2000      	movs	r0, #0
 8005746:	494e      	ldr	r1, [pc, #312]	; (8005880 <_dtoa_r+0x620>)
 8005748:	f7fa fff0 	bl	800072c <__aeabi_ddiv>
 800574c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005750:	f7fa fd0a 	bl	8000168 <__aeabi_dsub>
 8005754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005758:	9d06      	ldr	r5, [sp, #24]
 800575a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800575e:	f7fb f96b 	bl	8000a38 <__aeabi_d2iz>
 8005762:	9011      	str	r0, [sp, #68]	; 0x44
 8005764:	f7fa fe4e 	bl	8000404 <__aeabi_i2d>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005770:	f7fa fcfa 	bl	8000168 <__aeabi_dsub>
 8005774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577a:	3330      	adds	r3, #48	; 0x30
 800577c:	f805 3b01 	strb.w	r3, [r5], #1
 8005780:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005784:	f7fb f91a 	bl	80009bc <__aeabi_dcmplt>
 8005788:	2800      	cmp	r0, #0
 800578a:	d163      	bne.n	8005854 <_dtoa_r+0x5f4>
 800578c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005790:	2000      	movs	r0, #0
 8005792:	4937      	ldr	r1, [pc, #220]	; (8005870 <_dtoa_r+0x610>)
 8005794:	f7fa fce8 	bl	8000168 <__aeabi_dsub>
 8005798:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800579c:	f7fb f90e 	bl	80009bc <__aeabi_dcmplt>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f040 80b5 	bne.w	8005910 <_dtoa_r+0x6b0>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	1aeb      	subs	r3, r5, r3
 80057aa:	429e      	cmp	r6, r3
 80057ac:	f77f af7c 	ble.w	80056a8 <_dtoa_r+0x448>
 80057b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057b4:	2200      	movs	r2, #0
 80057b6:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <_dtoa_r+0x614>)
 80057b8:	f7fa fe8e 	bl	80004d8 <__aeabi_dmul>
 80057bc:	2200      	movs	r2, #0
 80057be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <_dtoa_r+0x614>)
 80057c8:	f7fa fe86 	bl	80004d8 <__aeabi_dmul>
 80057cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057d0:	e7c3      	b.n	800575a <_dtoa_r+0x4fa>
 80057d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057d6:	f7fa fe7f 	bl	80004d8 <__aeabi_dmul>
 80057da:	9b06      	ldr	r3, [sp, #24]
 80057dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057e0:	199d      	adds	r5, r3, r6
 80057e2:	461e      	mov	r6, r3
 80057e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e8:	f7fb f926 	bl	8000a38 <__aeabi_d2iz>
 80057ec:	9011      	str	r0, [sp, #68]	; 0x44
 80057ee:	f7fa fe09 	bl	8000404 <__aeabi_i2d>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057fa:	f7fa fcb5 	bl	8000168 <__aeabi_dsub>
 80057fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005804:	3330      	adds	r3, #48	; 0x30
 8005806:	f806 3b01 	strb.w	r3, [r6], #1
 800580a:	42ae      	cmp	r6, r5
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	d124      	bne.n	800585c <_dtoa_r+0x5fc>
 8005812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005816:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <_dtoa_r+0x620>)
 8005818:	f7fa fca8 	bl	800016c <__adddf3>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005824:	f7fb f8e8 	bl	80009f8 <__aeabi_dcmpgt>
 8005828:	2800      	cmp	r0, #0
 800582a:	d171      	bne.n	8005910 <_dtoa_r+0x6b0>
 800582c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005830:	2000      	movs	r0, #0
 8005832:	4913      	ldr	r1, [pc, #76]	; (8005880 <_dtoa_r+0x620>)
 8005834:	f7fa fc98 	bl	8000168 <__aeabi_dsub>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005840:	f7fb f8bc 	bl	80009bc <__aeabi_dcmplt>
 8005844:	2800      	cmp	r0, #0
 8005846:	f43f af2f 	beq.w	80056a8 <_dtoa_r+0x448>
 800584a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800584e:	1e6a      	subs	r2, r5, #1
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d001      	beq.n	8005858 <_dtoa_r+0x5f8>
 8005854:	46ba      	mov	sl, r7
 8005856:	e04a      	b.n	80058ee <_dtoa_r+0x68e>
 8005858:	4615      	mov	r5, r2
 800585a:	e7f6      	b.n	800584a <_dtoa_r+0x5ea>
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <_dtoa_r+0x614>)
 800585e:	f7fa fe3b 	bl	80004d8 <__aeabi_dmul>
 8005862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005866:	e7bd      	b.n	80057e4 <_dtoa_r+0x584>
 8005868:	080067e8 	.word	0x080067e8
 800586c:	080067c0 	.word	0x080067c0
 8005870:	3ff00000 	.word	0x3ff00000
 8005874:	40240000 	.word	0x40240000
 8005878:	401c0000 	.word	0x401c0000
 800587c:	40140000 	.word	0x40140000
 8005880:	3fe00000 	.word	0x3fe00000
 8005884:	9d06      	ldr	r5, [sp, #24]
 8005886:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800588a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa ff4b 	bl	800072c <__aeabi_ddiv>
 8005896:	f7fb f8cf 	bl	8000a38 <__aeabi_d2iz>
 800589a:	4681      	mov	r9, r0
 800589c:	f7fa fdb2 	bl	8000404 <__aeabi_i2d>
 80058a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a4:	f7fa fe18 	bl	80004d8 <__aeabi_dmul>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4630      	mov	r0, r6
 80058ae:	4639      	mov	r1, r7
 80058b0:	f7fa fc5a 	bl	8000168 <__aeabi_dsub>
 80058b4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80058b8:	f805 6b01 	strb.w	r6, [r5], #1
 80058bc:	9e06      	ldr	r6, [sp, #24]
 80058be:	4602      	mov	r2, r0
 80058c0:	1bae      	subs	r6, r5, r6
 80058c2:	45b0      	cmp	r8, r6
 80058c4:	460b      	mov	r3, r1
 80058c6:	d135      	bne.n	8005934 <_dtoa_r+0x6d4>
 80058c8:	f7fa fc50 	bl	800016c <__adddf3>
 80058cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d0:	4606      	mov	r6, r0
 80058d2:	460f      	mov	r7, r1
 80058d4:	f7fb f890 	bl	80009f8 <__aeabi_dcmpgt>
 80058d8:	b9c8      	cbnz	r0, 800590e <_dtoa_r+0x6ae>
 80058da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058de:	4630      	mov	r0, r6
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fb f861 	bl	80009a8 <__aeabi_dcmpeq>
 80058e6:	b110      	cbz	r0, 80058ee <_dtoa_r+0x68e>
 80058e8:	f019 0f01 	tst.w	r9, #1
 80058ec:	d10f      	bne.n	800590e <_dtoa_r+0x6ae>
 80058ee:	4659      	mov	r1, fp
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fac3 	bl	8005e7c <_Bfree>
 80058f6:	2300      	movs	r3, #0
 80058f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058fa:	702b      	strb	r3, [r5, #0]
 80058fc:	f10a 0301 	add.w	r3, sl, #1
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005904:	2b00      	cmp	r3, #0
 8005906:	f43f acf3 	beq.w	80052f0 <_dtoa_r+0x90>
 800590a:	601d      	str	r5, [r3, #0]
 800590c:	e4f0      	b.n	80052f0 <_dtoa_r+0x90>
 800590e:	4657      	mov	r7, sl
 8005910:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005914:	1e6b      	subs	r3, r5, #1
 8005916:	2a39      	cmp	r2, #57	; 0x39
 8005918:	d106      	bne.n	8005928 <_dtoa_r+0x6c8>
 800591a:	9a06      	ldr	r2, [sp, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	d107      	bne.n	8005930 <_dtoa_r+0x6d0>
 8005920:	2330      	movs	r3, #48	; 0x30
 8005922:	7013      	strb	r3, [r2, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	3701      	adds	r7, #1
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	3201      	adds	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e791      	b.n	8005854 <_dtoa_r+0x5f4>
 8005930:	461d      	mov	r5, r3
 8005932:	e7ed      	b.n	8005910 <_dtoa_r+0x6b0>
 8005934:	2200      	movs	r2, #0
 8005936:	4b99      	ldr	r3, [pc, #612]	; (8005b9c <_dtoa_r+0x93c>)
 8005938:	f7fa fdce 	bl	80004d8 <__aeabi_dmul>
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4606      	mov	r6, r0
 8005942:	460f      	mov	r7, r1
 8005944:	f7fb f830 	bl	80009a8 <__aeabi_dcmpeq>
 8005948:	2800      	cmp	r0, #0
 800594a:	d09e      	beq.n	800588a <_dtoa_r+0x62a>
 800594c:	e7cf      	b.n	80058ee <_dtoa_r+0x68e>
 800594e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005950:	2a00      	cmp	r2, #0
 8005952:	f000 8088 	beq.w	8005a66 <_dtoa_r+0x806>
 8005956:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005958:	2a01      	cmp	r2, #1
 800595a:	dc6d      	bgt.n	8005a38 <_dtoa_r+0x7d8>
 800595c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800595e:	2a00      	cmp	r2, #0
 8005960:	d066      	beq.n	8005a30 <_dtoa_r+0x7d0>
 8005962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005966:	464d      	mov	r5, r9
 8005968:	9e08      	ldr	r6, [sp, #32]
 800596a:	9a07      	ldr	r2, [sp, #28]
 800596c:	2101      	movs	r1, #1
 800596e:	441a      	add	r2, r3
 8005970:	4620      	mov	r0, r4
 8005972:	4499      	add	r9, r3
 8005974:	9207      	str	r2, [sp, #28]
 8005976:	f000 fb21 	bl	8005fbc <__i2b>
 800597a:	4607      	mov	r7, r0
 800597c:	2d00      	cmp	r5, #0
 800597e:	dd0b      	ble.n	8005998 <_dtoa_r+0x738>
 8005980:	9b07      	ldr	r3, [sp, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dd08      	ble.n	8005998 <_dtoa_r+0x738>
 8005986:	42ab      	cmp	r3, r5
 8005988:	bfa8      	it	ge
 800598a:	462b      	movge	r3, r5
 800598c:	9a07      	ldr	r2, [sp, #28]
 800598e:	eba9 0903 	sub.w	r9, r9, r3
 8005992:	1aed      	subs	r5, r5, r3
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	9b08      	ldr	r3, [sp, #32]
 800599a:	b1eb      	cbz	r3, 80059d8 <_dtoa_r+0x778>
 800599c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d065      	beq.n	8005a6e <_dtoa_r+0x80e>
 80059a2:	b18e      	cbz	r6, 80059c8 <_dtoa_r+0x768>
 80059a4:	4639      	mov	r1, r7
 80059a6:	4632      	mov	r2, r6
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fba5 	bl	80060f8 <__pow5mult>
 80059ae:	465a      	mov	r2, fp
 80059b0:	4601      	mov	r1, r0
 80059b2:	4607      	mov	r7, r0
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 fb0a 	bl	8005fce <__multiply>
 80059ba:	4659      	mov	r1, fp
 80059bc:	900a      	str	r0, [sp, #40]	; 0x28
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 fa5c 	bl	8005e7c <_Bfree>
 80059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c6:	469b      	mov	fp, r3
 80059c8:	9b08      	ldr	r3, [sp, #32]
 80059ca:	1b9a      	subs	r2, r3, r6
 80059cc:	d004      	beq.n	80059d8 <_dtoa_r+0x778>
 80059ce:	4659      	mov	r1, fp
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fb91 	bl	80060f8 <__pow5mult>
 80059d6:	4683      	mov	fp, r0
 80059d8:	2101      	movs	r1, #1
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 faee 	bl	8005fbc <__i2b>
 80059e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059e2:	4606      	mov	r6, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 81c6 	beq.w	8005d76 <_dtoa_r+0xb16>
 80059ea:	461a      	mov	r2, r3
 80059ec:	4601      	mov	r1, r0
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fb82 	bl	80060f8 <__pow5mult>
 80059f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059f6:	4606      	mov	r6, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	dc3e      	bgt.n	8005a7a <_dtoa_r+0x81a>
 80059fc:	9b02      	ldr	r3, [sp, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d137      	bne.n	8005a72 <_dtoa_r+0x812>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d134      	bne.n	8005a76 <_dtoa_r+0x816>
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	0d1b      	lsrs	r3, r3, #20
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	b12b      	cbz	r3, 8005a24 <_dtoa_r+0x7c4>
 8005a18:	9b07      	ldr	r3, [sp, #28]
 8005a1a:	f109 0901 	add.w	r9, r9, #1
 8005a1e:	3301      	adds	r3, #1
 8005a20:	9307      	str	r3, [sp, #28]
 8005a22:	2301      	movs	r3, #1
 8005a24:	9308      	str	r3, [sp, #32]
 8005a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d128      	bne.n	8005a7e <_dtoa_r+0x81e>
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	e02e      	b.n	8005a8e <_dtoa_r+0x82e>
 8005a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a36:	e796      	b.n	8005966 <_dtoa_r+0x706>
 8005a38:	9b08      	ldr	r3, [sp, #32]
 8005a3a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005a3e:	42b3      	cmp	r3, r6
 8005a40:	bfb7      	itett	lt
 8005a42:	9b08      	ldrlt	r3, [sp, #32]
 8005a44:	1b9e      	subge	r6, r3, r6
 8005a46:	1af2      	sublt	r2, r6, r3
 8005a48:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005a4a:	bfbf      	itttt	lt
 8005a4c:	9608      	strlt	r6, [sp, #32]
 8005a4e:	189b      	addlt	r3, r3, r2
 8005a50:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005a52:	2600      	movlt	r6, #0
 8005a54:	f1b8 0f00 	cmp.w	r8, #0
 8005a58:	bfb9      	ittee	lt
 8005a5a:	eba9 0508 	sublt.w	r5, r9, r8
 8005a5e:	2300      	movlt	r3, #0
 8005a60:	464d      	movge	r5, r9
 8005a62:	4643      	movge	r3, r8
 8005a64:	e781      	b.n	800596a <_dtoa_r+0x70a>
 8005a66:	9e08      	ldr	r6, [sp, #32]
 8005a68:	464d      	mov	r5, r9
 8005a6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a6c:	e786      	b.n	800597c <_dtoa_r+0x71c>
 8005a6e:	9a08      	ldr	r2, [sp, #32]
 8005a70:	e7ad      	b.n	80059ce <_dtoa_r+0x76e>
 8005a72:	2300      	movs	r3, #0
 8005a74:	e7d6      	b.n	8005a24 <_dtoa_r+0x7c4>
 8005a76:	9b02      	ldr	r3, [sp, #8]
 8005a78:	e7d4      	b.n	8005a24 <_dtoa_r+0x7c4>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9308      	str	r3, [sp, #32]
 8005a7e:	6933      	ldr	r3, [r6, #16]
 8005a80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a84:	6918      	ldr	r0, [r3, #16]
 8005a86:	f000 fa4b 	bl	8005f20 <__hi0bits>
 8005a8a:	f1c0 0020 	rsb	r0, r0, #32
 8005a8e:	9b07      	ldr	r3, [sp, #28]
 8005a90:	4418      	add	r0, r3
 8005a92:	f010 001f 	ands.w	r0, r0, #31
 8005a96:	d047      	beq.n	8005b28 <_dtoa_r+0x8c8>
 8005a98:	f1c0 0320 	rsb	r3, r0, #32
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	dd3b      	ble.n	8005b18 <_dtoa_r+0x8b8>
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	f1c0 001c 	rsb	r0, r0, #28
 8005aa6:	4481      	add	r9, r0
 8005aa8:	4405      	add	r5, r0
 8005aaa:	4403      	add	r3, r0
 8005aac:	9307      	str	r3, [sp, #28]
 8005aae:	f1b9 0f00 	cmp.w	r9, #0
 8005ab2:	dd05      	ble.n	8005ac0 <_dtoa_r+0x860>
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	464a      	mov	r2, r9
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fb6b 	bl	8006194 <__lshift>
 8005abe:	4683      	mov	fp, r0
 8005ac0:	9b07      	ldr	r3, [sp, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	dd05      	ble.n	8005ad2 <_dtoa_r+0x872>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fb62 	bl	8006194 <__lshift>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad4:	b353      	cbz	r3, 8005b2c <_dtoa_r+0x8cc>
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4658      	mov	r0, fp
 8005ada:	f000 fbaf 	bl	800623c <__mcmp>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	da24      	bge.n	8005b2c <_dtoa_r+0x8cc>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	220a      	movs	r2, #10
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f9de 	bl	8005eaa <__multadd>
 8005aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005af4:	4683      	mov	fp, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8144 	beq.w	8005d84 <_dtoa_r+0xb24>
 8005afc:	2300      	movs	r3, #0
 8005afe:	4639      	mov	r1, r7
 8005b00:	220a      	movs	r2, #10
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f9d1 	bl	8005eaa <__multadd>
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc4d      	bgt.n	8005bac <_dtoa_r+0x94c>
 8005b10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	dd4a      	ble.n	8005bac <_dtoa_r+0x94c>
 8005b16:	e011      	b.n	8005b3c <_dtoa_r+0x8dc>
 8005b18:	d0c9      	beq.n	8005aae <_dtoa_r+0x84e>
 8005b1a:	9a07      	ldr	r2, [sp, #28]
 8005b1c:	331c      	adds	r3, #28
 8005b1e:	441a      	add	r2, r3
 8005b20:	4499      	add	r9, r3
 8005b22:	441d      	add	r5, r3
 8005b24:	4613      	mov	r3, r2
 8005b26:	e7c1      	b.n	8005aac <_dtoa_r+0x84c>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	e7f6      	b.n	8005b1a <_dtoa_r+0x8ba>
 8005b2c:	f1b8 0f00 	cmp.w	r8, #0
 8005b30:	dc36      	bgt.n	8005ba0 <_dtoa_r+0x940>
 8005b32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	dd33      	ble.n	8005ba0 <_dtoa_r+0x940>
 8005b38:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	b963      	cbnz	r3, 8005b5a <_dtoa_r+0x8fa>
 8005b40:	4631      	mov	r1, r6
 8005b42:	2205      	movs	r2, #5
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 f9b0 	bl	8005eaa <__multadd>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	4658      	mov	r0, fp
 8005b50:	f000 fb74 	bl	800623c <__mcmp>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f73f add3 	bgt.w	8005700 <_dtoa_r+0x4a0>
 8005b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b5c:	9d06      	ldr	r5, [sp, #24]
 8005b5e:	ea6f 0a03 	mvn.w	sl, r3
 8005b62:	f04f 0900 	mov.w	r9, #0
 8005b66:	4631      	mov	r1, r6
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 f987 	bl	8005e7c <_Bfree>
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	f43f aebd 	beq.w	80058ee <_dtoa_r+0x68e>
 8005b74:	f1b9 0f00 	cmp.w	r9, #0
 8005b78:	d005      	beq.n	8005b86 <_dtoa_r+0x926>
 8005b7a:	45b9      	cmp	r9, r7
 8005b7c:	d003      	beq.n	8005b86 <_dtoa_r+0x926>
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 f97b 	bl	8005e7c <_Bfree>
 8005b86:	4639      	mov	r1, r7
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f977 	bl	8005e7c <_Bfree>
 8005b8e:	e6ae      	b.n	80058ee <_dtoa_r+0x68e>
 8005b90:	2600      	movs	r6, #0
 8005b92:	4637      	mov	r7, r6
 8005b94:	e7e1      	b.n	8005b5a <_dtoa_r+0x8fa>
 8005b96:	46ba      	mov	sl, r7
 8005b98:	4637      	mov	r7, r6
 8005b9a:	e5b1      	b.n	8005700 <_dtoa_r+0x4a0>
 8005b9c:	40240000 	.word	0x40240000
 8005ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba2:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80f3 	beq.w	8005d92 <_dtoa_r+0xb32>
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	dd05      	ble.n	8005bbc <_dtoa_r+0x95c>
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 faed 	bl	8006194 <__lshift>
 8005bba:	4607      	mov	r7, r0
 8005bbc:	9b08      	ldr	r3, [sp, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d04c      	beq.n	8005c5c <_dtoa_r+0x9fc>
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 f925 	bl	8005e14 <_Balloc>
 8005bca:	4605      	mov	r5, r0
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	f107 010c 	add.w	r1, r7, #12
 8005bd2:	3202      	adds	r2, #2
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	300c      	adds	r0, #12
 8005bd8:	f7fe fc8a 	bl	80044f0 <memcpy>
 8005bdc:	2201      	movs	r2, #1
 8005bde:	4629      	mov	r1, r5
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fad7 	bl	8006194 <__lshift>
 8005be6:	46b9      	mov	r9, r7
 8005be8:	4607      	mov	r7, r0
 8005bea:	9b06      	ldr	r3, [sp, #24]
 8005bec:	9307      	str	r3, [sp, #28]
 8005bee:	9b02      	ldr	r3, [sp, #8]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	9308      	str	r3, [sp, #32]
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4658      	mov	r0, fp
 8005bfa:	f7ff faa1 	bl	8005140 <quorem>
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4605      	mov	r5, r0
 8005c02:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c06:	4658      	mov	r0, fp
 8005c08:	f000 fb18 	bl	800623c <__mcmp>
 8005c0c:	463a      	mov	r2, r7
 8005c0e:	9002      	str	r0, [sp, #8]
 8005c10:	4631      	mov	r1, r6
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 fb2c 	bl	8006270 <__mdiff>
 8005c18:	68c3      	ldr	r3, [r0, #12]
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	bb03      	cbnz	r3, 8005c60 <_dtoa_r+0xa00>
 8005c1e:	4601      	mov	r1, r0
 8005c20:	9009      	str	r0, [sp, #36]	; 0x24
 8005c22:	4658      	mov	r0, fp
 8005c24:	f000 fb0a 	bl	800623c <__mcmp>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4620      	mov	r0, r4
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	f000 f923 	bl	8005e7c <_Bfree>
 8005c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c38:	b9a3      	cbnz	r3, 8005c64 <_dtoa_r+0xa04>
 8005c3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c3c:	b992      	cbnz	r2, 8005c64 <_dtoa_r+0xa04>
 8005c3e:	9a08      	ldr	r2, [sp, #32]
 8005c40:	b982      	cbnz	r2, 8005c64 <_dtoa_r+0xa04>
 8005c42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c46:	d029      	beq.n	8005c9c <_dtoa_r+0xa3c>
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	dd01      	ble.n	8005c52 <_dtoa_r+0x9f2>
 8005c4e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c52:	9b07      	ldr	r3, [sp, #28]
 8005c54:	1c5d      	adds	r5, r3, #1
 8005c56:	f883 8000 	strb.w	r8, [r3]
 8005c5a:	e784      	b.n	8005b66 <_dtoa_r+0x906>
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	e7c2      	b.n	8005be6 <_dtoa_r+0x986>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e7e3      	b.n	8005c2c <_dtoa_r+0x9cc>
 8005c64:	9a02      	ldr	r2, [sp, #8]
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	db04      	blt.n	8005c74 <_dtoa_r+0xa14>
 8005c6a:	d123      	bne.n	8005cb4 <_dtoa_r+0xa54>
 8005c6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c6e:	bb0a      	cbnz	r2, 8005cb4 <_dtoa_r+0xa54>
 8005c70:	9a08      	ldr	r2, [sp, #32]
 8005c72:	b9fa      	cbnz	r2, 8005cb4 <_dtoa_r+0xa54>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	ddec      	ble.n	8005c52 <_dtoa_r+0x9f2>
 8005c78:	4659      	mov	r1, fp
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 fa89 	bl	8006194 <__lshift>
 8005c82:	4631      	mov	r1, r6
 8005c84:	4683      	mov	fp, r0
 8005c86:	f000 fad9 	bl	800623c <__mcmp>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	dc03      	bgt.n	8005c96 <_dtoa_r+0xa36>
 8005c8e:	d1e0      	bne.n	8005c52 <_dtoa_r+0x9f2>
 8005c90:	f018 0f01 	tst.w	r8, #1
 8005c94:	d0dd      	beq.n	8005c52 <_dtoa_r+0x9f2>
 8005c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c9a:	d1d8      	bne.n	8005c4e <_dtoa_r+0x9ee>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	9a07      	ldr	r2, [sp, #28]
 8005ca0:	1c5d      	adds	r5, r3, #1
 8005ca2:	2339      	movs	r3, #57	; 0x39
 8005ca4:	7013      	strb	r3, [r2, #0]
 8005ca6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005caa:	1e6a      	subs	r2, r5, #1
 8005cac:	2b39      	cmp	r3, #57	; 0x39
 8005cae:	d04d      	beq.n	8005d4c <_dtoa_r+0xaec>
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	e052      	b.n	8005d5a <_dtoa_r+0xafa>
 8005cb4:	9a07      	ldr	r2, [sp, #28]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f102 0501 	add.w	r5, r2, #1
 8005cbc:	dd06      	ble.n	8005ccc <_dtoa_r+0xa6c>
 8005cbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005cc2:	d0eb      	beq.n	8005c9c <_dtoa_r+0xa3c>
 8005cc4:	f108 0801 	add.w	r8, r8, #1
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	e7c4      	b.n	8005c56 <_dtoa_r+0x9f6>
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	9a04      	ldr	r2, [sp, #16]
 8005cd0:	1aeb      	subs	r3, r5, r3
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005cd8:	d021      	beq.n	8005d1e <_dtoa_r+0xabe>
 8005cda:	4659      	mov	r1, fp
 8005cdc:	2300      	movs	r3, #0
 8005cde:	220a      	movs	r2, #10
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 f8e2 	bl	8005eaa <__multadd>
 8005ce6:	45b9      	cmp	r9, r7
 8005ce8:	4683      	mov	fp, r0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	f04f 020a 	mov.w	r2, #10
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	d105      	bne.n	8005d04 <_dtoa_r+0xaa4>
 8005cf8:	f000 f8d7 	bl	8005eaa <__multadd>
 8005cfc:	4681      	mov	r9, r0
 8005cfe:	4607      	mov	r7, r0
 8005d00:	9507      	str	r5, [sp, #28]
 8005d02:	e778      	b.n	8005bf6 <_dtoa_r+0x996>
 8005d04:	f000 f8d1 	bl	8005eaa <__multadd>
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4681      	mov	r9, r0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	220a      	movs	r2, #10
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 f8ca 	bl	8005eaa <__multadd>
 8005d16:	4607      	mov	r7, r0
 8005d18:	e7f2      	b.n	8005d00 <_dtoa_r+0xaa0>
 8005d1a:	f04f 0900 	mov.w	r9, #0
 8005d1e:	4659      	mov	r1, fp
 8005d20:	2201      	movs	r2, #1
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 fa36 	bl	8006194 <__lshift>
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4683      	mov	fp, r0
 8005d2c:	f000 fa86 	bl	800623c <__mcmp>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	dcb8      	bgt.n	8005ca6 <_dtoa_r+0xa46>
 8005d34:	d102      	bne.n	8005d3c <_dtoa_r+0xadc>
 8005d36:	f018 0f01 	tst.w	r8, #1
 8005d3a:	d1b4      	bne.n	8005ca6 <_dtoa_r+0xa46>
 8005d3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d40:	1e6a      	subs	r2, r5, #1
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	f47f af0f 	bne.w	8005b66 <_dtoa_r+0x906>
 8005d48:	4615      	mov	r5, r2
 8005d4a:	e7f7      	b.n	8005d3c <_dtoa_r+0xadc>
 8005d4c:	9b06      	ldr	r3, [sp, #24]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d105      	bne.n	8005d5e <_dtoa_r+0xafe>
 8005d52:	2331      	movs	r3, #49	; 0x31
 8005d54:	9a06      	ldr	r2, [sp, #24]
 8005d56:	f10a 0a01 	add.w	sl, sl, #1
 8005d5a:	7013      	strb	r3, [r2, #0]
 8005d5c:	e703      	b.n	8005b66 <_dtoa_r+0x906>
 8005d5e:	4615      	mov	r5, r2
 8005d60:	e7a1      	b.n	8005ca6 <_dtoa_r+0xa46>
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <_dtoa_r+0xb60>)
 8005d64:	f7ff bae1 	b.w	800532a <_dtoa_r+0xca>
 8005d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f47f aabb 	bne.w	80052e6 <_dtoa_r+0x86>
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <_dtoa_r+0xb64>)
 8005d72:	f7ff bada 	b.w	800532a <_dtoa_r+0xca>
 8005d76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	f77f ae3f 	ble.w	80059fc <_dtoa_r+0x79c>
 8005d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d80:	9308      	str	r3, [sp, #32]
 8005d82:	e653      	b.n	8005a2c <_dtoa_r+0x7cc>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dc03      	bgt.n	8005d92 <_dtoa_r+0xb32>
 8005d8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f73f aed5 	bgt.w	8005b3c <_dtoa_r+0x8dc>
 8005d92:	9d06      	ldr	r5, [sp, #24]
 8005d94:	4631      	mov	r1, r6
 8005d96:	4658      	mov	r0, fp
 8005d98:	f7ff f9d2 	bl	8005140 <quorem>
 8005d9c:	9b06      	ldr	r3, [sp, #24]
 8005d9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005da2:	f805 8b01 	strb.w	r8, [r5], #1
 8005da6:	9a04      	ldr	r2, [sp, #16]
 8005da8:	1aeb      	subs	r3, r5, r3
 8005daa:	429a      	cmp	r2, r3
 8005dac:	ddb5      	ble.n	8005d1a <_dtoa_r+0xaba>
 8005dae:	4659      	mov	r1, fp
 8005db0:	2300      	movs	r3, #0
 8005db2:	220a      	movs	r2, #10
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 f878 	bl	8005eaa <__multadd>
 8005dba:	4683      	mov	fp, r0
 8005dbc:	e7ea      	b.n	8005d94 <_dtoa_r+0xb34>
 8005dbe:	bf00      	nop
 8005dc0:	08006780 	.word	0x08006780
 8005dc4:	080067a4 	.word	0x080067a4

08005dc8 <__locale_ctype_ptr_l>:
 8005dc8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005dcc:	4770      	bx	lr
	...

08005dd0 <_localeconv_r>:
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <_localeconv_r+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a18      	ldr	r0, [r3, #32]
 8005dd6:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <_localeconv_r+0x18>)
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	bf08      	it	eq
 8005ddc:	4618      	moveq	r0, r3
 8005dde:	30f0      	adds	r0, #240	; 0xf0
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000010 	.word	0x20000010
 8005de8:	20000074 	.word	0x20000074

08005dec <__ascii_mbtowc>:
 8005dec:	b082      	sub	sp, #8
 8005dee:	b901      	cbnz	r1, 8005df2 <__ascii_mbtowc+0x6>
 8005df0:	a901      	add	r1, sp, #4
 8005df2:	b142      	cbz	r2, 8005e06 <__ascii_mbtowc+0x1a>
 8005df4:	b14b      	cbz	r3, 8005e0a <__ascii_mbtowc+0x1e>
 8005df6:	7813      	ldrb	r3, [r2, #0]
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	1c10      	adds	r0, r2, #0
 8005dfe:	bf18      	it	ne
 8005e00:	2001      	movne	r0, #1
 8005e02:	b002      	add	sp, #8
 8005e04:	4770      	bx	lr
 8005e06:	4610      	mov	r0, r2
 8005e08:	e7fb      	b.n	8005e02 <__ascii_mbtowc+0x16>
 8005e0a:	f06f 0001 	mvn.w	r0, #1
 8005e0e:	e7f8      	b.n	8005e02 <__ascii_mbtowc+0x16>

08005e10 <__malloc_lock>:
 8005e10:	4770      	bx	lr

08005e12 <__malloc_unlock>:
 8005e12:	4770      	bx	lr

08005e14 <_Balloc>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e18:	4604      	mov	r4, r0
 8005e1a:	460e      	mov	r6, r1
 8005e1c:	b93d      	cbnz	r5, 8005e2e <_Balloc+0x1a>
 8005e1e:	2010      	movs	r0, #16
 8005e20:	f7fe fb50 	bl	80044c4 <malloc>
 8005e24:	6260      	str	r0, [r4, #36]	; 0x24
 8005e26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e2a:	6005      	str	r5, [r0, #0]
 8005e2c:	60c5      	str	r5, [r0, #12]
 8005e2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e30:	68eb      	ldr	r3, [r5, #12]
 8005e32:	b183      	cbz	r3, 8005e56 <_Balloc+0x42>
 8005e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e3c:	b9b8      	cbnz	r0, 8005e6e <_Balloc+0x5a>
 8005e3e:	2101      	movs	r1, #1
 8005e40:	fa01 f506 	lsl.w	r5, r1, r6
 8005e44:	1d6a      	adds	r2, r5, #5
 8005e46:	0092      	lsls	r2, r2, #2
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 fabe 	bl	80063ca <_calloc_r>
 8005e4e:	b160      	cbz	r0, 8005e6a <_Balloc+0x56>
 8005e50:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e54:	e00e      	b.n	8005e74 <_Balloc+0x60>
 8005e56:	2221      	movs	r2, #33	; 0x21
 8005e58:	2104      	movs	r1, #4
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fab5 	bl	80063ca <_calloc_r>
 8005e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e62:	60e8      	str	r0, [r5, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e4      	bne.n	8005e34 <_Balloc+0x20>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	6802      	ldr	r2, [r0, #0]
 8005e70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e74:	2300      	movs	r3, #0
 8005e76:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e7a:	e7f7      	b.n	8005e6c <_Balloc+0x58>

08005e7c <_Bfree>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e80:	4606      	mov	r6, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	b93c      	cbnz	r4, 8005e96 <_Bfree+0x1a>
 8005e86:	2010      	movs	r0, #16
 8005e88:	f7fe fb1c 	bl	80044c4 <malloc>
 8005e8c:	6270      	str	r0, [r6, #36]	; 0x24
 8005e8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e92:	6004      	str	r4, [r0, #0]
 8005e94:	60c4      	str	r4, [r0, #12]
 8005e96:	b13d      	cbz	r5, 8005ea8 <_Bfree+0x2c>
 8005e98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e9a:	686a      	ldr	r2, [r5, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea2:	6029      	str	r1, [r5, #0]
 8005ea4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005ea8:	bd70      	pop	{r4, r5, r6, pc}

08005eaa <__multadd>:
 8005eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eae:	461f      	mov	r7, r3
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	690d      	ldr	r5, [r1, #16]
 8005eb8:	f101 0c14 	add.w	ip, r1, #20
 8005ebc:	f8dc 0000 	ldr.w	r0, [ip]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b281      	uxth	r1, r0
 8005ec4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ec8:	0c00      	lsrs	r0, r0, #16
 8005eca:	0c0f      	lsrs	r7, r1, #16
 8005ecc:	fb02 7000 	mla	r0, r2, r0, r7
 8005ed0:	b289      	uxth	r1, r1
 8005ed2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005edc:	f84c 1b04 	str.w	r1, [ip], #4
 8005ee0:	dcec      	bgt.n	8005ebc <__multadd+0x12>
 8005ee2:	b1d7      	cbz	r7, 8005f1a <__multadd+0x70>
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	42ab      	cmp	r3, r5
 8005ee8:	dc12      	bgt.n	8005f10 <__multadd+0x66>
 8005eea:	6861      	ldr	r1, [r4, #4]
 8005eec:	4630      	mov	r0, r6
 8005eee:	3101      	adds	r1, #1
 8005ef0:	f7ff ff90 	bl	8005e14 <_Balloc>
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	6922      	ldr	r2, [r4, #16]
 8005ef8:	f104 010c 	add.w	r1, r4, #12
 8005efc:	3202      	adds	r2, #2
 8005efe:	0092      	lsls	r2, r2, #2
 8005f00:	300c      	adds	r0, #12
 8005f02:	f7fe faf5 	bl	80044f0 <memcpy>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f7ff ffb7 	bl	8005e7c <_Bfree>
 8005f0e:	4644      	mov	r4, r8
 8005f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f14:	3501      	adds	r5, #1
 8005f16:	615f      	str	r7, [r3, #20]
 8005f18:	6125      	str	r5, [r4, #16]
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f20 <__hi0bits>:
 8005f20:	0c02      	lsrs	r2, r0, #16
 8005f22:	0412      	lsls	r2, r2, #16
 8005f24:	4603      	mov	r3, r0
 8005f26:	b9b2      	cbnz	r2, 8005f56 <__hi0bits+0x36>
 8005f28:	0403      	lsls	r3, r0, #16
 8005f2a:	2010      	movs	r0, #16
 8005f2c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f30:	bf04      	itt	eq
 8005f32:	021b      	lsleq	r3, r3, #8
 8005f34:	3008      	addeq	r0, #8
 8005f36:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f3a:	bf04      	itt	eq
 8005f3c:	011b      	lsleq	r3, r3, #4
 8005f3e:	3004      	addeq	r0, #4
 8005f40:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f44:	bf04      	itt	eq
 8005f46:	009b      	lsleq	r3, r3, #2
 8005f48:	3002      	addeq	r0, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	db06      	blt.n	8005f5c <__hi0bits+0x3c>
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	d503      	bpl.n	8005f5a <__hi0bits+0x3a>
 8005f52:	3001      	adds	r0, #1
 8005f54:	4770      	bx	lr
 8005f56:	2000      	movs	r0, #0
 8005f58:	e7e8      	b.n	8005f2c <__hi0bits+0xc>
 8005f5a:	2020      	movs	r0, #32
 8005f5c:	4770      	bx	lr

08005f5e <__lo0bits>:
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	4601      	mov	r1, r0
 8005f62:	f013 0207 	ands.w	r2, r3, #7
 8005f66:	d00b      	beq.n	8005f80 <__lo0bits+0x22>
 8005f68:	07da      	lsls	r2, r3, #31
 8005f6a:	d423      	bmi.n	8005fb4 <__lo0bits+0x56>
 8005f6c:	0798      	lsls	r0, r3, #30
 8005f6e:	bf49      	itett	mi
 8005f70:	085b      	lsrmi	r3, r3, #1
 8005f72:	089b      	lsrpl	r3, r3, #2
 8005f74:	2001      	movmi	r0, #1
 8005f76:	600b      	strmi	r3, [r1, #0]
 8005f78:	bf5c      	itt	pl
 8005f7a:	600b      	strpl	r3, [r1, #0]
 8005f7c:	2002      	movpl	r0, #2
 8005f7e:	4770      	bx	lr
 8005f80:	b298      	uxth	r0, r3
 8005f82:	b9a8      	cbnz	r0, 8005fb0 <__lo0bits+0x52>
 8005f84:	2010      	movs	r0, #16
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f8c:	bf04      	itt	eq
 8005f8e:	0a1b      	lsreq	r3, r3, #8
 8005f90:	3008      	addeq	r0, #8
 8005f92:	071a      	lsls	r2, r3, #28
 8005f94:	bf04      	itt	eq
 8005f96:	091b      	lsreq	r3, r3, #4
 8005f98:	3004      	addeq	r0, #4
 8005f9a:	079a      	lsls	r2, r3, #30
 8005f9c:	bf04      	itt	eq
 8005f9e:	089b      	lsreq	r3, r3, #2
 8005fa0:	3002      	addeq	r0, #2
 8005fa2:	07da      	lsls	r2, r3, #31
 8005fa4:	d402      	bmi.n	8005fac <__lo0bits+0x4e>
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	d006      	beq.n	8005fb8 <__lo0bits+0x5a>
 8005faa:	3001      	adds	r0, #1
 8005fac:	600b      	str	r3, [r1, #0]
 8005fae:	4770      	bx	lr
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	e7e9      	b.n	8005f88 <__lo0bits+0x2a>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4770      	bx	lr
 8005fb8:	2020      	movs	r0, #32
 8005fba:	4770      	bx	lr

08005fbc <__i2b>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	f7ff ff27 	bl	8005e14 <_Balloc>
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	6144      	str	r4, [r0, #20]
 8005fca:	6102      	str	r2, [r0, #16]
 8005fcc:	bd10      	pop	{r4, pc}

08005fce <__multiply>:
 8005fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	690a      	ldr	r2, [r1, #16]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	4688      	mov	r8, r1
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	bfbe      	ittt	lt
 8005fde:	460b      	movlt	r3, r1
 8005fe0:	46a0      	movlt	r8, r4
 8005fe2:	461c      	movlt	r4, r3
 8005fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fe8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005fec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ff0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ff4:	eb07 0609 	add.w	r6, r7, r9
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	bfb8      	it	lt
 8005ffc:	3101      	addlt	r1, #1
 8005ffe:	f7ff ff09 	bl	8005e14 <_Balloc>
 8006002:	f100 0514 	add.w	r5, r0, #20
 8006006:	462b      	mov	r3, r5
 8006008:	2200      	movs	r2, #0
 800600a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800600e:	4573      	cmp	r3, lr
 8006010:	d316      	bcc.n	8006040 <__multiply+0x72>
 8006012:	f104 0214 	add.w	r2, r4, #20
 8006016:	f108 0114 	add.w	r1, r8, #20
 800601a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800601e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	9b00      	ldr	r3, [sp, #0]
 8006026:	9201      	str	r2, [sp, #4]
 8006028:	4293      	cmp	r3, r2
 800602a:	d80c      	bhi.n	8006046 <__multiply+0x78>
 800602c:	2e00      	cmp	r6, #0
 800602e:	dd03      	ble.n	8006038 <__multiply+0x6a>
 8006030:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05d      	beq.n	80060f4 <__multiply+0x126>
 8006038:	6106      	str	r6, [r0, #16]
 800603a:	b003      	add	sp, #12
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	f843 2b04 	str.w	r2, [r3], #4
 8006044:	e7e3      	b.n	800600e <__multiply+0x40>
 8006046:	f8b2 b000 	ldrh.w	fp, [r2]
 800604a:	f1bb 0f00 	cmp.w	fp, #0
 800604e:	d023      	beq.n	8006098 <__multiply+0xca>
 8006050:	4689      	mov	r9, r1
 8006052:	46ac      	mov	ip, r5
 8006054:	f04f 0800 	mov.w	r8, #0
 8006058:	f859 4b04 	ldr.w	r4, [r9], #4
 800605c:	f8dc a000 	ldr.w	sl, [ip]
 8006060:	b2a3      	uxth	r3, r4
 8006062:	fa1f fa8a 	uxth.w	sl, sl
 8006066:	fb0b a303 	mla	r3, fp, r3, sl
 800606a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800606e:	f8dc 4000 	ldr.w	r4, [ip]
 8006072:	4443      	add	r3, r8
 8006074:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006078:	fb0b 840a 	mla	r4, fp, sl, r8
 800607c:	46e2      	mov	sl, ip
 800607e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006082:	b29b      	uxth	r3, r3
 8006084:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006088:	454f      	cmp	r7, r9
 800608a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800608e:	f84a 3b04 	str.w	r3, [sl], #4
 8006092:	d82b      	bhi.n	80060ec <__multiply+0x11e>
 8006094:	f8cc 8004 	str.w	r8, [ip, #4]
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	3204      	adds	r2, #4
 800609c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80060a0:	f1ba 0f00 	cmp.w	sl, #0
 80060a4:	d020      	beq.n	80060e8 <__multiply+0x11a>
 80060a6:	4689      	mov	r9, r1
 80060a8:	46a8      	mov	r8, r5
 80060aa:	f04f 0b00 	mov.w	fp, #0
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	f8b9 c000 	ldrh.w	ip, [r9]
 80060b4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	fb0a 440c 	mla	r4, sl, ip, r4
 80060be:	46c4      	mov	ip, r8
 80060c0:	445c      	add	r4, fp
 80060c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060c6:	f84c 3b04 	str.w	r3, [ip], #4
 80060ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80060ce:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80060d2:	0c1b      	lsrs	r3, r3, #16
 80060d4:	fb0a b303 	mla	r3, sl, r3, fp
 80060d8:	454f      	cmp	r7, r9
 80060da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80060de:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80060e2:	d805      	bhi.n	80060f0 <__multiply+0x122>
 80060e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80060e8:	3504      	adds	r5, #4
 80060ea:	e79b      	b.n	8006024 <__multiply+0x56>
 80060ec:	46d4      	mov	ip, sl
 80060ee:	e7b3      	b.n	8006058 <__multiply+0x8a>
 80060f0:	46e0      	mov	r8, ip
 80060f2:	e7dd      	b.n	80060b0 <__multiply+0xe2>
 80060f4:	3e01      	subs	r6, #1
 80060f6:	e799      	b.n	800602c <__multiply+0x5e>

080060f8 <__pow5mult>:
 80060f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060fc:	4615      	mov	r5, r2
 80060fe:	f012 0203 	ands.w	r2, r2, #3
 8006102:	4606      	mov	r6, r0
 8006104:	460f      	mov	r7, r1
 8006106:	d007      	beq.n	8006118 <__pow5mult+0x20>
 8006108:	4c21      	ldr	r4, [pc, #132]	; (8006190 <__pow5mult+0x98>)
 800610a:	3a01      	subs	r2, #1
 800610c:	2300      	movs	r3, #0
 800610e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006112:	f7ff feca 	bl	8005eaa <__multadd>
 8006116:	4607      	mov	r7, r0
 8006118:	10ad      	asrs	r5, r5, #2
 800611a:	d035      	beq.n	8006188 <__pow5mult+0x90>
 800611c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800611e:	b93c      	cbnz	r4, 8006130 <__pow5mult+0x38>
 8006120:	2010      	movs	r0, #16
 8006122:	f7fe f9cf 	bl	80044c4 <malloc>
 8006126:	6270      	str	r0, [r6, #36]	; 0x24
 8006128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800612c:	6004      	str	r4, [r0, #0]
 800612e:	60c4      	str	r4, [r0, #12]
 8006130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006138:	b94c      	cbnz	r4, 800614e <__pow5mult+0x56>
 800613a:	f240 2171 	movw	r1, #625	; 0x271
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff ff3c 	bl	8005fbc <__i2b>
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	f8c8 0008 	str.w	r0, [r8, #8]
 800614c:	6003      	str	r3, [r0, #0]
 800614e:	f04f 0800 	mov.w	r8, #0
 8006152:	07eb      	lsls	r3, r5, #31
 8006154:	d50a      	bpl.n	800616c <__pow5mult+0x74>
 8006156:	4639      	mov	r1, r7
 8006158:	4622      	mov	r2, r4
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ff37 	bl	8005fce <__multiply>
 8006160:	4681      	mov	r9, r0
 8006162:	4639      	mov	r1, r7
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff fe89 	bl	8005e7c <_Bfree>
 800616a:	464f      	mov	r7, r9
 800616c:	106d      	asrs	r5, r5, #1
 800616e:	d00b      	beq.n	8006188 <__pow5mult+0x90>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	b938      	cbnz	r0, 8006184 <__pow5mult+0x8c>
 8006174:	4622      	mov	r2, r4
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ff28 	bl	8005fce <__multiply>
 800617e:	6020      	str	r0, [r4, #0]
 8006180:	f8c0 8000 	str.w	r8, [r0]
 8006184:	4604      	mov	r4, r0
 8006186:	e7e4      	b.n	8006152 <__pow5mult+0x5a>
 8006188:	4638      	mov	r0, r7
 800618a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618e:	bf00      	nop
 8006190:	080068b0 	.word	0x080068b0

08006194 <__lshift>:
 8006194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	460c      	mov	r4, r1
 800619a:	4607      	mov	r7, r0
 800619c:	4616      	mov	r6, r2
 800619e:	6923      	ldr	r3, [r4, #16]
 80061a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061a4:	eb0a 0903 	add.w	r9, sl, r3
 80061a8:	6849      	ldr	r1, [r1, #4]
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	f109 0501 	add.w	r5, r9, #1
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	db32      	blt.n	800621a <__lshift+0x86>
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff fe2d 	bl	8005e14 <_Balloc>
 80061ba:	2300      	movs	r3, #0
 80061bc:	4680      	mov	r8, r0
 80061be:	461a      	mov	r2, r3
 80061c0:	f100 0114 	add.w	r1, r0, #20
 80061c4:	4553      	cmp	r3, sl
 80061c6:	db2b      	blt.n	8006220 <__lshift+0x8c>
 80061c8:	6920      	ldr	r0, [r4, #16]
 80061ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061ce:	f104 0314 	add.w	r3, r4, #20
 80061d2:	f016 021f 	ands.w	r2, r6, #31
 80061d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061de:	d025      	beq.n	800622c <__lshift+0x98>
 80061e0:	2000      	movs	r0, #0
 80061e2:	f1c2 0e20 	rsb	lr, r2, #32
 80061e6:	468a      	mov	sl, r1
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	4096      	lsls	r6, r2
 80061ec:	4330      	orrs	r0, r6
 80061ee:	f84a 0b04 	str.w	r0, [sl], #4
 80061f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80061f6:	459c      	cmp	ip, r3
 80061f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80061fc:	d814      	bhi.n	8006228 <__lshift+0x94>
 80061fe:	6048      	str	r0, [r1, #4]
 8006200:	b108      	cbz	r0, 8006206 <__lshift+0x72>
 8006202:	f109 0502 	add.w	r5, r9, #2
 8006206:	3d01      	subs	r5, #1
 8006208:	4638      	mov	r0, r7
 800620a:	f8c8 5010 	str.w	r5, [r8, #16]
 800620e:	4621      	mov	r1, r4
 8006210:	f7ff fe34 	bl	8005e7c <_Bfree>
 8006214:	4640      	mov	r0, r8
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	3101      	adds	r1, #1
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	e7c7      	b.n	80061b0 <__lshift+0x1c>
 8006220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006224:	3301      	adds	r3, #1
 8006226:	e7cd      	b.n	80061c4 <__lshift+0x30>
 8006228:	4651      	mov	r1, sl
 800622a:	e7dc      	b.n	80061e6 <__lshift+0x52>
 800622c:	3904      	subs	r1, #4
 800622e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006232:	459c      	cmp	ip, r3
 8006234:	f841 2f04 	str.w	r2, [r1, #4]!
 8006238:	d8f9      	bhi.n	800622e <__lshift+0x9a>
 800623a:	e7e4      	b.n	8006206 <__lshift+0x72>

0800623c <__mcmp>:
 800623c:	6903      	ldr	r3, [r0, #16]
 800623e:	690a      	ldr	r2, [r1, #16]
 8006240:	b530      	push	{r4, r5, lr}
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	d10c      	bne.n	8006260 <__mcmp+0x24>
 8006246:	0092      	lsls	r2, r2, #2
 8006248:	3014      	adds	r0, #20
 800624a:	3114      	adds	r1, #20
 800624c:	1884      	adds	r4, r0, r2
 800624e:	4411      	add	r1, r2
 8006250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006258:	4295      	cmp	r5, r2
 800625a:	d003      	beq.n	8006264 <__mcmp+0x28>
 800625c:	d305      	bcc.n	800626a <__mcmp+0x2e>
 800625e:	2301      	movs	r3, #1
 8006260:	4618      	mov	r0, r3
 8006262:	bd30      	pop	{r4, r5, pc}
 8006264:	42a0      	cmp	r0, r4
 8006266:	d3f3      	bcc.n	8006250 <__mcmp+0x14>
 8006268:	e7fa      	b.n	8006260 <__mcmp+0x24>
 800626a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800626e:	e7f7      	b.n	8006260 <__mcmp+0x24>

08006270 <__mdiff>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	460d      	mov	r5, r1
 8006276:	4607      	mov	r7, r0
 8006278:	4611      	mov	r1, r2
 800627a:	4628      	mov	r0, r5
 800627c:	4614      	mov	r4, r2
 800627e:	f7ff ffdd 	bl	800623c <__mcmp>
 8006282:	1e06      	subs	r6, r0, #0
 8006284:	d108      	bne.n	8006298 <__mdiff+0x28>
 8006286:	4631      	mov	r1, r6
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff fdc3 	bl	8005e14 <_Balloc>
 800628e:	2301      	movs	r3, #1
 8006290:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006298:	bfa4      	itt	ge
 800629a:	4623      	movge	r3, r4
 800629c:	462c      	movge	r4, r5
 800629e:	4638      	mov	r0, r7
 80062a0:	6861      	ldr	r1, [r4, #4]
 80062a2:	bfa6      	itte	ge
 80062a4:	461d      	movge	r5, r3
 80062a6:	2600      	movge	r6, #0
 80062a8:	2601      	movlt	r6, #1
 80062aa:	f7ff fdb3 	bl	8005e14 <_Balloc>
 80062ae:	f04f 0e00 	mov.w	lr, #0
 80062b2:	60c6      	str	r6, [r0, #12]
 80062b4:	692b      	ldr	r3, [r5, #16]
 80062b6:	6926      	ldr	r6, [r4, #16]
 80062b8:	f104 0214 	add.w	r2, r4, #20
 80062bc:	f105 0914 	add.w	r9, r5, #20
 80062c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80062c8:	f100 0114 	add.w	r1, r0, #20
 80062cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80062d0:	f859 5b04 	ldr.w	r5, [r9], #4
 80062d4:	fa1f f38a 	uxth.w	r3, sl
 80062d8:	4473      	add	r3, lr
 80062da:	b2ac      	uxth	r4, r5
 80062dc:	1b1b      	subs	r3, r3, r4
 80062de:	0c2c      	lsrs	r4, r5, #16
 80062e0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80062e4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80062ee:	45c8      	cmp	r8, r9
 80062f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80062f4:	4694      	mov	ip, r2
 80062f6:	f841 4b04 	str.w	r4, [r1], #4
 80062fa:	d8e7      	bhi.n	80062cc <__mdiff+0x5c>
 80062fc:	45bc      	cmp	ip, r7
 80062fe:	d304      	bcc.n	800630a <__mdiff+0x9a>
 8006300:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006304:	b183      	cbz	r3, 8006328 <__mdiff+0xb8>
 8006306:	6106      	str	r6, [r0, #16]
 8006308:	e7c4      	b.n	8006294 <__mdiff+0x24>
 800630a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800630e:	b2a2      	uxth	r2, r4
 8006310:	4472      	add	r2, lr
 8006312:	1413      	asrs	r3, r2, #16
 8006314:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006318:	b292      	uxth	r2, r2
 800631a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800631e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006322:	f841 2b04 	str.w	r2, [r1], #4
 8006326:	e7e9      	b.n	80062fc <__mdiff+0x8c>
 8006328:	3e01      	subs	r6, #1
 800632a:	e7e9      	b.n	8006300 <__mdiff+0x90>

0800632c <__d2b>:
 800632c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006330:	461c      	mov	r4, r3
 8006332:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006336:	2101      	movs	r1, #1
 8006338:	4690      	mov	r8, r2
 800633a:	f7ff fd6b 	bl	8005e14 <_Balloc>
 800633e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006342:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006346:	4607      	mov	r7, r0
 8006348:	bb34      	cbnz	r4, 8006398 <__d2b+0x6c>
 800634a:	9201      	str	r2, [sp, #4]
 800634c:	f1b8 0200 	subs.w	r2, r8, #0
 8006350:	d027      	beq.n	80063a2 <__d2b+0x76>
 8006352:	a802      	add	r0, sp, #8
 8006354:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006358:	f7ff fe01 	bl	8005f5e <__lo0bits>
 800635c:	9900      	ldr	r1, [sp, #0]
 800635e:	b1f0      	cbz	r0, 800639e <__d2b+0x72>
 8006360:	9a01      	ldr	r2, [sp, #4]
 8006362:	f1c0 0320 	rsb	r3, r0, #32
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	430b      	orrs	r3, r1
 800636c:	40c2      	lsrs	r2, r0
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	9201      	str	r2, [sp, #4]
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf14      	ite	ne
 8006378:	2102      	movne	r1, #2
 800637a:	2101      	moveq	r1, #1
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	6139      	str	r1, [r7, #16]
 8006380:	b1c4      	cbz	r4, 80063b4 <__d2b+0x88>
 8006382:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006386:	4404      	add	r4, r0
 8006388:	6034      	str	r4, [r6, #0]
 800638a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800638e:	6028      	str	r0, [r5, #0]
 8006390:	4638      	mov	r0, r7
 8006392:	b002      	add	sp, #8
 8006394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006398:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800639c:	e7d5      	b.n	800634a <__d2b+0x1e>
 800639e:	6179      	str	r1, [r7, #20]
 80063a0:	e7e7      	b.n	8006372 <__d2b+0x46>
 80063a2:	a801      	add	r0, sp, #4
 80063a4:	f7ff fddb 	bl	8005f5e <__lo0bits>
 80063a8:	2101      	movs	r1, #1
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	6139      	str	r1, [r7, #16]
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	3020      	adds	r0, #32
 80063b2:	e7e5      	b.n	8006380 <__d2b+0x54>
 80063b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063b8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80063bc:	6030      	str	r0, [r6, #0]
 80063be:	6918      	ldr	r0, [r3, #16]
 80063c0:	f7ff fdae 	bl	8005f20 <__hi0bits>
 80063c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063c8:	e7e1      	b.n	800638e <__d2b+0x62>

080063ca <_calloc_r>:
 80063ca:	b538      	push	{r3, r4, r5, lr}
 80063cc:	fb02 f401 	mul.w	r4, r2, r1
 80063d0:	4621      	mov	r1, r4
 80063d2:	f7fe f905 	bl	80045e0 <_malloc_r>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b118      	cbz	r0, 80063e2 <_calloc_r+0x18>
 80063da:	4622      	mov	r2, r4
 80063dc:	2100      	movs	r1, #0
 80063de:	f7fe f8ab 	bl	8004538 <memset>
 80063e2:	4628      	mov	r0, r5
 80063e4:	bd38      	pop	{r3, r4, r5, pc}

080063e6 <__ssputs_r>:
 80063e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ea:	688e      	ldr	r6, [r1, #8]
 80063ec:	4682      	mov	sl, r0
 80063ee:	429e      	cmp	r6, r3
 80063f0:	460c      	mov	r4, r1
 80063f2:	4690      	mov	r8, r2
 80063f4:	4699      	mov	r9, r3
 80063f6:	d837      	bhi.n	8006468 <__ssputs_r+0x82>
 80063f8:	898a      	ldrh	r2, [r1, #12]
 80063fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fe:	d031      	beq.n	8006464 <__ssputs_r+0x7e>
 8006400:	2302      	movs	r3, #2
 8006402:	6825      	ldr	r5, [r4, #0]
 8006404:	6909      	ldr	r1, [r1, #16]
 8006406:	1a6f      	subs	r7, r5, r1
 8006408:	6965      	ldr	r5, [r4, #20]
 800640a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800640e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006412:	f109 0301 	add.w	r3, r9, #1
 8006416:	443b      	add	r3, r7
 8006418:	429d      	cmp	r5, r3
 800641a:	bf38      	it	cc
 800641c:	461d      	movcc	r5, r3
 800641e:	0553      	lsls	r3, r2, #21
 8006420:	d530      	bpl.n	8006484 <__ssputs_r+0x9e>
 8006422:	4629      	mov	r1, r5
 8006424:	f7fe f8dc 	bl	80045e0 <_malloc_r>
 8006428:	4606      	mov	r6, r0
 800642a:	b950      	cbnz	r0, 8006442 <__ssputs_r+0x5c>
 800642c:	230c      	movs	r3, #12
 800642e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006432:	f8ca 3000 	str.w	r3, [sl]
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	463a      	mov	r2, r7
 8006444:	6921      	ldr	r1, [r4, #16]
 8006446:	f7fe f853 	bl	80044f0 <memcpy>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	6126      	str	r6, [r4, #16]
 8006458:	443e      	add	r6, r7
 800645a:	6026      	str	r6, [r4, #0]
 800645c:	464e      	mov	r6, r9
 800645e:	6165      	str	r5, [r4, #20]
 8006460:	1bed      	subs	r5, r5, r7
 8006462:	60a5      	str	r5, [r4, #8]
 8006464:	454e      	cmp	r6, r9
 8006466:	d900      	bls.n	800646a <__ssputs_r+0x84>
 8006468:	464e      	mov	r6, r9
 800646a:	4632      	mov	r2, r6
 800646c:	4641      	mov	r1, r8
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	f7fe f849 	bl	8004506 <memmove>
 8006474:	68a3      	ldr	r3, [r4, #8]
 8006476:	2000      	movs	r0, #0
 8006478:	1b9b      	subs	r3, r3, r6
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	441e      	add	r6, r3
 8006480:	6026      	str	r6, [r4, #0]
 8006482:	e7dc      	b.n	800643e <__ssputs_r+0x58>
 8006484:	462a      	mov	r2, r5
 8006486:	f000 f90e 	bl	80066a6 <_realloc_r>
 800648a:	4606      	mov	r6, r0
 800648c:	2800      	cmp	r0, #0
 800648e:	d1e2      	bne.n	8006456 <__ssputs_r+0x70>
 8006490:	6921      	ldr	r1, [r4, #16]
 8006492:	4650      	mov	r0, sl
 8006494:	f7fe f858 	bl	8004548 <_free_r>
 8006498:	e7c8      	b.n	800642c <__ssputs_r+0x46>
	...

0800649c <_svfiprintf_r>:
 800649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	461d      	mov	r5, r3
 80064a2:	898b      	ldrh	r3, [r1, #12]
 80064a4:	b09d      	sub	sp, #116	; 0x74
 80064a6:	061f      	lsls	r7, r3, #24
 80064a8:	4680      	mov	r8, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	4616      	mov	r6, r2
 80064ae:	d50f      	bpl.n	80064d0 <_svfiprintf_r+0x34>
 80064b0:	690b      	ldr	r3, [r1, #16]
 80064b2:	b96b      	cbnz	r3, 80064d0 <_svfiprintf_r+0x34>
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	f7fe f893 	bl	80045e0 <_malloc_r>
 80064ba:	6020      	str	r0, [r4, #0]
 80064bc:	6120      	str	r0, [r4, #16]
 80064be:	b928      	cbnz	r0, 80064cc <_svfiprintf_r+0x30>
 80064c0:	230c      	movs	r3, #12
 80064c2:	f8c8 3000 	str.w	r3, [r8]
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ca:	e0c8      	b.n	800665e <_svfiprintf_r+0x1c2>
 80064cc:	2340      	movs	r3, #64	; 0x40
 80064ce:	6163      	str	r3, [r4, #20]
 80064d0:	2300      	movs	r3, #0
 80064d2:	9309      	str	r3, [sp, #36]	; 0x24
 80064d4:	2320      	movs	r3, #32
 80064d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064da:	2330      	movs	r3, #48	; 0x30
 80064dc:	f04f 0b01 	mov.w	fp, #1
 80064e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e4:	9503      	str	r5, [sp, #12]
 80064e6:	4637      	mov	r7, r6
 80064e8:	463d      	mov	r5, r7
 80064ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064ee:	b10b      	cbz	r3, 80064f4 <_svfiprintf_r+0x58>
 80064f0:	2b25      	cmp	r3, #37	; 0x25
 80064f2:	d13e      	bne.n	8006572 <_svfiprintf_r+0xd6>
 80064f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80064f8:	d00b      	beq.n	8006512 <_svfiprintf_r+0x76>
 80064fa:	4653      	mov	r3, sl
 80064fc:	4632      	mov	r2, r6
 80064fe:	4621      	mov	r1, r4
 8006500:	4640      	mov	r0, r8
 8006502:	f7ff ff70 	bl	80063e6 <__ssputs_r>
 8006506:	3001      	adds	r0, #1
 8006508:	f000 80a4 	beq.w	8006654 <_svfiprintf_r+0x1b8>
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	4453      	add	r3, sl
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	783b      	ldrb	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 809d 	beq.w	8006654 <_svfiprintf_r+0x1b8>
 800651a:	2300      	movs	r3, #0
 800651c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	9307      	str	r3, [sp, #28]
 8006528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800652c:	931a      	str	r3, [sp, #104]	; 0x68
 800652e:	462f      	mov	r7, r5
 8006530:	2205      	movs	r2, #5
 8006532:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006536:	4850      	ldr	r0, [pc, #320]	; (8006678 <_svfiprintf_r+0x1dc>)
 8006538:	f7fd ffcc 	bl	80044d4 <memchr>
 800653c:	9b04      	ldr	r3, [sp, #16]
 800653e:	b9d0      	cbnz	r0, 8006576 <_svfiprintf_r+0xda>
 8006540:	06d9      	lsls	r1, r3, #27
 8006542:	bf44      	itt	mi
 8006544:	2220      	movmi	r2, #32
 8006546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800654a:	071a      	lsls	r2, r3, #28
 800654c:	bf44      	itt	mi
 800654e:	222b      	movmi	r2, #43	; 0x2b
 8006550:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006554:	782a      	ldrb	r2, [r5, #0]
 8006556:	2a2a      	cmp	r2, #42	; 0x2a
 8006558:	d015      	beq.n	8006586 <_svfiprintf_r+0xea>
 800655a:	462f      	mov	r7, r5
 800655c:	2000      	movs	r0, #0
 800655e:	250a      	movs	r5, #10
 8006560:	9a07      	ldr	r2, [sp, #28]
 8006562:	4639      	mov	r1, r7
 8006564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006568:	3b30      	subs	r3, #48	; 0x30
 800656a:	2b09      	cmp	r3, #9
 800656c:	d94d      	bls.n	800660a <_svfiprintf_r+0x16e>
 800656e:	b1b8      	cbz	r0, 80065a0 <_svfiprintf_r+0x104>
 8006570:	e00f      	b.n	8006592 <_svfiprintf_r+0xf6>
 8006572:	462f      	mov	r7, r5
 8006574:	e7b8      	b.n	80064e8 <_svfiprintf_r+0x4c>
 8006576:	4a40      	ldr	r2, [pc, #256]	; (8006678 <_svfiprintf_r+0x1dc>)
 8006578:	463d      	mov	r5, r7
 800657a:	1a80      	subs	r0, r0, r2
 800657c:	fa0b f000 	lsl.w	r0, fp, r0
 8006580:	4318      	orrs	r0, r3
 8006582:	9004      	str	r0, [sp, #16]
 8006584:	e7d3      	b.n	800652e <_svfiprintf_r+0x92>
 8006586:	9a03      	ldr	r2, [sp, #12]
 8006588:	1d11      	adds	r1, r2, #4
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	9103      	str	r1, [sp, #12]
 800658e:	2a00      	cmp	r2, #0
 8006590:	db01      	blt.n	8006596 <_svfiprintf_r+0xfa>
 8006592:	9207      	str	r2, [sp, #28]
 8006594:	e004      	b.n	80065a0 <_svfiprintf_r+0x104>
 8006596:	4252      	negs	r2, r2
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	9207      	str	r2, [sp, #28]
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	783b      	ldrb	r3, [r7, #0]
 80065a2:	2b2e      	cmp	r3, #46	; 0x2e
 80065a4:	d10c      	bne.n	80065c0 <_svfiprintf_r+0x124>
 80065a6:	787b      	ldrb	r3, [r7, #1]
 80065a8:	2b2a      	cmp	r3, #42	; 0x2a
 80065aa:	d133      	bne.n	8006614 <_svfiprintf_r+0x178>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	3702      	adds	r7, #2
 80065b0:	1d1a      	adds	r2, r3, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	9203      	str	r2, [sp, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfb8      	it	lt
 80065ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	4d2e      	ldr	r5, [pc, #184]	; (800667c <_svfiprintf_r+0x1e0>)
 80065c2:	2203      	movs	r2, #3
 80065c4:	7839      	ldrb	r1, [r7, #0]
 80065c6:	4628      	mov	r0, r5
 80065c8:	f7fd ff84 	bl	80044d4 <memchr>
 80065cc:	b138      	cbz	r0, 80065de <_svfiprintf_r+0x142>
 80065ce:	2340      	movs	r3, #64	; 0x40
 80065d0:	1b40      	subs	r0, r0, r5
 80065d2:	fa03 f000 	lsl.w	r0, r3, r0
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	3701      	adds	r7, #1
 80065da:	4303      	orrs	r3, r0
 80065dc:	9304      	str	r3, [sp, #16]
 80065de:	7839      	ldrb	r1, [r7, #0]
 80065e0:	2206      	movs	r2, #6
 80065e2:	4827      	ldr	r0, [pc, #156]	; (8006680 <_svfiprintf_r+0x1e4>)
 80065e4:	1c7e      	adds	r6, r7, #1
 80065e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ea:	f7fd ff73 	bl	80044d4 <memchr>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d038      	beq.n	8006664 <_svfiprintf_r+0x1c8>
 80065f2:	4b24      	ldr	r3, [pc, #144]	; (8006684 <_svfiprintf_r+0x1e8>)
 80065f4:	bb13      	cbnz	r3, 800663c <_svfiprintf_r+0x1a0>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	3307      	adds	r3, #7
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	3308      	adds	r3, #8
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006604:	444b      	add	r3, r9
 8006606:	9309      	str	r3, [sp, #36]	; 0x24
 8006608:	e76d      	b.n	80064e6 <_svfiprintf_r+0x4a>
 800660a:	fb05 3202 	mla	r2, r5, r2, r3
 800660e:	2001      	movs	r0, #1
 8006610:	460f      	mov	r7, r1
 8006612:	e7a6      	b.n	8006562 <_svfiprintf_r+0xc6>
 8006614:	2300      	movs	r3, #0
 8006616:	250a      	movs	r5, #10
 8006618:	4619      	mov	r1, r3
 800661a:	3701      	adds	r7, #1
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	4638      	mov	r0, r7
 8006620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006624:	3a30      	subs	r2, #48	; 0x30
 8006626:	2a09      	cmp	r2, #9
 8006628:	d903      	bls.n	8006632 <_svfiprintf_r+0x196>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c8      	beq.n	80065c0 <_svfiprintf_r+0x124>
 800662e:	9105      	str	r1, [sp, #20]
 8006630:	e7c6      	b.n	80065c0 <_svfiprintf_r+0x124>
 8006632:	fb05 2101 	mla	r1, r5, r1, r2
 8006636:	2301      	movs	r3, #1
 8006638:	4607      	mov	r7, r0
 800663a:	e7f0      	b.n	800661e <_svfiprintf_r+0x182>
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4622      	mov	r2, r4
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <_svfiprintf_r+0x1ec>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	4640      	mov	r0, r8
 8006648:	f7fe f8b6 	bl	80047b8 <_printf_float>
 800664c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006650:	4681      	mov	r9, r0
 8006652:	d1d6      	bne.n	8006602 <_svfiprintf_r+0x166>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	065b      	lsls	r3, r3, #25
 8006658:	f53f af35 	bmi.w	80064c6 <_svfiprintf_r+0x2a>
 800665c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665e:	b01d      	add	sp, #116	; 0x74
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	ab03      	add	r3, sp, #12
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	4622      	mov	r2, r4
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <_svfiprintf_r+0x1ec>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	4640      	mov	r0, r8
 8006670:	f7fe fb4e 	bl	8004d10 <_printf_i>
 8006674:	e7ea      	b.n	800664c <_svfiprintf_r+0x1b0>
 8006676:	bf00      	nop
 8006678:	080068bc 	.word	0x080068bc
 800667c:	080068c2 	.word	0x080068c2
 8006680:	080068c6 	.word	0x080068c6
 8006684:	080047b9 	.word	0x080047b9
 8006688:	080063e7 	.word	0x080063e7

0800668c <__ascii_wctomb>:
 800668c:	b149      	cbz	r1, 80066a2 <__ascii_wctomb+0x16>
 800668e:	2aff      	cmp	r2, #255	; 0xff
 8006690:	bf8b      	itete	hi
 8006692:	238a      	movhi	r3, #138	; 0x8a
 8006694:	700a      	strbls	r2, [r1, #0]
 8006696:	6003      	strhi	r3, [r0, #0]
 8006698:	2001      	movls	r0, #1
 800669a:	bf88      	it	hi
 800669c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80066a0:	4770      	bx	lr
 80066a2:	4608      	mov	r0, r1
 80066a4:	4770      	bx	lr

080066a6 <_realloc_r>:
 80066a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a8:	4607      	mov	r7, r0
 80066aa:	4614      	mov	r4, r2
 80066ac:	460e      	mov	r6, r1
 80066ae:	b921      	cbnz	r1, 80066ba <_realloc_r+0x14>
 80066b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066b4:	4611      	mov	r1, r2
 80066b6:	f7fd bf93 	b.w	80045e0 <_malloc_r>
 80066ba:	b922      	cbnz	r2, 80066c6 <_realloc_r+0x20>
 80066bc:	f7fd ff44 	bl	8004548 <_free_r>
 80066c0:	4625      	mov	r5, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c6:	f000 f814 	bl	80066f2 <_malloc_usable_size_r>
 80066ca:	42a0      	cmp	r0, r4
 80066cc:	d20f      	bcs.n	80066ee <_realloc_r+0x48>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7fd ff85 	bl	80045e0 <_malloc_r>
 80066d6:	4605      	mov	r5, r0
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0f2      	beq.n	80066c2 <_realloc_r+0x1c>
 80066dc:	4631      	mov	r1, r6
 80066de:	4622      	mov	r2, r4
 80066e0:	f7fd ff06 	bl	80044f0 <memcpy>
 80066e4:	4631      	mov	r1, r6
 80066e6:	4638      	mov	r0, r7
 80066e8:	f7fd ff2e 	bl	8004548 <_free_r>
 80066ec:	e7e9      	b.n	80066c2 <_realloc_r+0x1c>
 80066ee:	4635      	mov	r5, r6
 80066f0:	e7e7      	b.n	80066c2 <_realloc_r+0x1c>

080066f2 <_malloc_usable_size_r>:
 80066f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f6:	1f18      	subs	r0, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfbc      	itt	lt
 80066fc:	580b      	ldrlt	r3, [r1, r0]
 80066fe:	18c0      	addlt	r0, r0, r3
 8006700:	4770      	bx	lr
	...

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr


stm32f1xx_RPM_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000656c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006680  08006680  00016680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006930  08006930  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006930  08006930  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006930  08006930  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001e0  08006b1c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006b1c  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199df  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d5b  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  0003d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d04b  00000000  00000000  0003e190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be0f  00000000  00000000  0005b1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000986b9  00000000  00000000  00066fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff6a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e8  00000000  00000000  000ff720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006664 	.word	0x08006664

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006664 	.word	0x08006664

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <_ZN5PrintC1Ev+0x1c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
{

}
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	080066a8 	.word	0x080066a8

08001044 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8001044:	b40e      	push	{r1, r2, r3}
 8001046:	b580      	push	{r7, lr}
 8001048:	b0b7      	sub	sp, #220	; 0xdc
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
     un número variable de argumentos. */
    va_list argp;

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );
 800104e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001052:	60fb      	str	r3, [r7, #12]

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800105e:	4618      	mov	r0, r3
 8001060:	f004 f814 	bl	800508c <vsiprintf>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfcc      	ite	gt
 800106a:	2301      	movgt	r3, #1
 800106c:	2300      	movle	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <_ZN5Print5printEPKcz+0x40>
    {
        write( (uint8_t*) string );  // funcion virtual
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f107 0210 	add.w	r2, r7, #16
 800107e:	4611      	mov	r1, r2
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	4798      	blx	r3
    }

    va_end( argp );

}
 8001084:	bf00      	nop
 8001086:	37dc      	adds	r7, #220	; 0xdc
 8001088:	46bd      	mov	sp, r7
 800108a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800108e:	b003      	add	sp, #12
 8001090:	4770      	bx	lr

08001092 <_ZN5Print5printEPh>:
/**
 *
 * @param text_in dato de tipo uint8_t a transmitir
 */
void Print::print( uint8_t * bytes_in )
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]

    write( bytes_in );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3

}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_ZN6SerialC1EP20__UART_HandleTypeDef>:
 *      Author: Macbook
 */

#include "Serial.h"

Serial::Serial( UART_HandleTypeDef * uartx )
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ffb1 	bl	8001024 <_ZN5PrintC1Ev>
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_ZN6SerialC1EP20__UART_HandleTypeDef+0x28>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated constructor stub
    uart = uartx;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	609a      	str	r2, [r3, #8]
}
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	080066b4 	.word	0x080066b4

080010dc <_ZN6Serial7receiveEPht14Mode_timeout_t>:

void Serial::receive( uint8_t * data, uint16_t timeout,
        Mode_timeout_t modeTimeout )
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	460b      	mov	r3, r1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
    uint8_t *bufer = data;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	617b      	str	r3, [r7, #20]
    uint32_t lastTime = HAL_GetTick();
 80010f6:	f000 fd93 	bl	8001c20 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

    *bufer = (uint8_t) uart->Instance->DR;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	701a      	strb	r2, [r3, #0]
    bufer++;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]

    if ( modeTimeout == TIMEOUT )
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d124      	bne.n	8001160 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x84>
    {
        while ( ( HAL_GetTick() - lastTime ) < timeout )
 8001116:	f000 fd83 	bl	8001c20 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	429a      	cmp	r2, r3
 8001124:	bf34      	ite	cc
 8001126:	2301      	movcc	r3, #1
 8001128:	2300      	movcs	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d048      	beq.n	80011c2 <_ZN6Serial7receiveEPht14Mode_timeout_t+0xe6>
        {
            if ( __HAL_UART_GET_FLAG( uart, UART_FLAG_RXNE ) )
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	2b20      	cmp	r3, #32
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0e5      	beq.n	8001116 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x3a>
            {
                *bufer = (uint8_t) ( uart->Instance->DR & (uint8_t) 0x00FF );
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	701a      	strb	r2, [r3, #0]
                bufer++;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
        while ( ( HAL_GetTick() - lastTime ) < timeout )
 800115e:	e7da      	b.n	8001116 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x3a>
            }
        }
    }
    else
        if ( modeTimeout == INTER_BYTE_TIMEOUT )
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d12d      	bne.n	80011c2 <_ZN6Serial7receiveEPht14Mode_timeout_t+0xe6>
        {
            if ( timeout == 1 ) timeout++;
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d102      	bne.n	8001172 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x96>
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	3301      	adds	r3, #1
 8001170:	80fb      	strh	r3, [r7, #6]

            while ( ( HAL_GetTick() - lastTime ) < timeout )
 8001172:	f000 fd55 	bl	8001c20 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	429a      	cmp	r2, r3
 8001180:	bf34      	ite	cc
 8001182:	2301      	movcc	r3, #1
 8001184:	2300      	movcs	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01a      	beq.n	80011c2 <_ZN6Serial7receiveEPht14Mode_timeout_t+0xe6>
            {
                if ( __HAL_UART_GET_FLAG( uart, UART_FLAG_RXNE ) )
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b20      	cmp	r3, #32
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0e5      	beq.n	8001172 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x96>
                {
                    *bufer = (uint8_t) uart->Instance->DR;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	701a      	strb	r2, [r3, #0]
                    bufer++;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
                    lastTime = HAL_GetTick();
 80011ba:	f000 fd31 	bl	8001c20 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]
            while ( ( HAL_GetTick() - lastTime ) < timeout )
 80011c0:	e7d7      	b.n	8001172 <_ZN6Serial7receiveEPht14Mode_timeout_t+0x96>
                }
            }
        }
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_ZN6Serial5writeEPh>:

void Serial::write( uint8_t * text )
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]

    HAL_UART_Transmit( uart, text, strlen( (char*) text ), 1000 );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689c      	ldr	r4, [r3, #8]
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7fe ffb9 	bl	8000150 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	4620      	mov	r0, r4
 80011ea:	f002 ff66 	bl	80040ba <HAL_UART_Transmit>

}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
	...

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b598      	push	{r3, r4, r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fcb8 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f874 	bl	80012ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 fa26 	bl	8001654 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8001208:	f000 f8c0 	bl	800138c <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 800120c:	f000 f9f4 	bl	80015f8 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8001210:	f000 f964 	bl	80014dc <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
    /* inicia el timer en modo captura generando una interrupcion en cada flanco
     * de subida de la señal de entrada.
     */
    if ( HAL_TIM_IC_Start_IT( &htim2, TIM_CHANNEL_1 ) != HAL_OK )  //pin A0
 8001214:	2100      	movs	r1, #0
 8001216:	482c      	ldr	r0, [pc, #176]	; (80012c8 <main+0xd0>)
 8001218:	f001 fd98 	bl	8002d4c <HAL_TIM_IC_Start_IT>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <main+0x38>
    {
        /* Starting Error */
        Error_Handler();
 800122c:	f000 fab0 	bl	8001790 <Error_Handler>
    }
    /* inicia la señal pwm a 25 khz por el canal 1 */
    if ( HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_1 ) != HAL_OK )  //pin A0
 8001230:	2100      	movs	r1, #0
 8001232:	4826      	ldr	r0, [pc, #152]	; (80012cc <main+0xd4>)
 8001234:	f001 fc90 	bl	8002b58 <HAL_TIM_PWM_Start>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <main+0x54>
    {
        /* Starting Error */
        Error_Handler();
 8001248:	f000 faa2 	bl	8001790 <Error_Handler>
    }
    /* en mi caso el valor desde donde empieza a variar la velocidad del ventilador
     *  es de 44 hasta 79  ( 1700 a 3500 aprox ) depende del ventilador
     *  utilizado
     */
    __HAL_TIM_SET_COMPARE( &htim3, TIM_CHANNEL_1, 60 ); // señal pwm 25 khz
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <main+0xd4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	223c      	movs	r2, #60	; 0x3c
 8001252:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UART_ENABLE_IT( &huart1, UART_IT_RXNE );
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <main+0xd8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <main+0xd8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	60da      	str	r2, [r3, #12]
        /*
         *  multiplico el valor de la captura por 0.00001 para determinar el periodo
         * de la señal en segundos. el valor de 0.00001 es la resolucion del
         * contador , es decir que cada cuenta o paso del contador son 10 us.
         */
        periodo = valorCaptura * 0.00001; // calculamos el periodo en segundos
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <main+0xdc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_f2d>
 800126e:	a314      	add	r3, pc, #80	; (adr r3, 80012c0 <main+0xc8>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_dmul>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fc02 	bl	8000a88 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <main+0xe0>)
 8001288:	601a      	str	r2, [r3, #0]
        rpm = 60 / periodo; // frecuencia = 1 / periodo --- rpm = 60 / periodo
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <main+0xe0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <main+0xe4>)
 8001292:	f7ff fe0b 	bl	8000eac <__aeabi_fdiv>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fea3 	bl	8000fe4 <__aeabi_f2uiz>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <main+0xe8>)
 80012a4:	801a      	strh	r2, [r3, #0]
        serial.print( "rpm: %d \r\n", rpm );
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <main+0xe8>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	490d      	ldr	r1, [pc, #52]	; (80012e4 <main+0xec>)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <main+0xf0>)
 80012b0:	f7ff fec8 	bl	8001044 <_ZN5Print5printEPKcz>
        HAL_Delay( 500 );
 80012b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b8:	f000 fcbc 	bl	8001c34 <HAL_Delay>
        periodo = valorCaptura * 0.00001; // calculamos el periodo en segundos
 80012bc:	e7d2      	b.n	8001264 <main+0x6c>
 80012be:	bf00      	nop
 80012c0:	88e368f1 	.word	0x88e368f1
 80012c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80012c8:	200001fc 	.word	0x200001fc
 80012cc:	20000244 	.word	0x20000244
 80012d0:	2000028c 	.word	0x2000028c
 80012d4:	200002d0 	.word	0x200002d0
 80012d8:	200002cc 	.word	0x200002cc
 80012dc:	42700000 	.word	0x42700000
 80012e0:	200002d4 	.word	0x200002d4
 80012e4:	08006680 	.word	0x08006680
 80012e8:	200002d8 	.word	0x200002d8

080012ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	; 0x40
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2228      	movs	r2, #40	; 0x28
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 f8cc 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800132a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	4618      	mov	r0, r3
 8001336:	f000 ff4b 	bl	80021d0 <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800134a:	f000 fa21 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800135a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001360:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f001 f9b0 	bl	80026d0 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8001380:	f000 fa06 	bl	8001790 <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3740      	adds	r7, #64	; 0x40
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013d0:	22b3      	movs	r2, #179	; 0xb3
 80013d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ee:	483a      	ldr	r0, [pc, #232]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80013f0:	f001 fb0a 	bl	8002a08 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <_ZL12MX_TIM2_Initv+0x7c>
  {
    Error_Handler();
 8001404:	f000 f9c4 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001412:	4619      	mov	r1, r3
 8001414:	4830      	ldr	r0, [pc, #192]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 8001416:	f001 fff9 	bl	800340c <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <_ZL12MX_TIM2_Initv+0xa2>
  {
    Error_Handler();
 800142a:	f000 f9b1 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 8001430:	f001 fc34 	bl	8002c9c <HAL_TIM_IC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf14      	ite	ne
 800143a:	2301      	movne	r3, #1
 800143c:	2300      	moveq	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001444:	f000 f9a4 	bl	8001790 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001448:	2304      	movs	r3, #4
 800144a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800144c:	2350      	movs	r3, #80	; 0x50
 800144e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	481e      	ldr	r0, [pc, #120]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 8001460:	f002 f88b 	bl	800357a <HAL_TIM_SlaveConfigSynchro>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL12MX_TIM2_Initv+0xec>
  {
    Error_Handler();
 8001474:	f000 f98c 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 8001488:	f002 fd5a 	bl	8003f40 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_ZL12MX_TIM2_Initv+0x114>
  {
    Error_Handler();
 800149c:	f000 f978 	bl	8001790 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80014ac:	230f      	movs	r3, #15
 80014ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <_ZL12MX_TIM2_Initv+0x14c>)
 80014b8:	f001 fe56 	bl	8003168 <HAL_TIM_IC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_ZL12MX_TIM2_Initv+0x144>
  {
    Error_Handler();
 80014cc:	f000 f960 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3740      	adds	r7, #64	; 0x40
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200001fc 	.word	0x200001fc

080014dc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800150c:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 800150e:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <_ZL12MX_TIM3_Initv+0x118>)
 8001510:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 8001514:	2208      	movs	r2, #8
 8001516:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 8001520:	224f      	movs	r2, #79	; 0x4f
 8001522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001530:	482f      	ldr	r0, [pc, #188]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 8001532:	f001 fa69 	bl	8002a08 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf14      	ite	ne
 800153c:	2301      	movne	r3, #1
 800153e:	2300      	moveq	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001546:	f000 f923 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001554:	4619      	mov	r1, r3
 8001556:	4826      	ldr	r0, [pc, #152]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 8001558:	f001 ff58 	bl	800340c <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800156c:	f000 f910 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001570:	481f      	ldr	r0, [pc, #124]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 8001572:	f001 fa98 	bl	8002aa6 <HAL_TIM_PWM_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001586:	f000 f903 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	4619      	mov	r1, r3
 8001598:	4815      	ldr	r0, [pc, #84]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 800159a:	f002 fcd1 	bl	8003f40 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80015ae:	f000 f8ef 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 80015b6:	2314      	movs	r3, #20
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 80015ca:	f001 fe61 	bl	8003290 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80015de:	f000 f8d7 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <_ZL12MX_TIM3_Initv+0x114>)
 80015e4:	f000 f986 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3738      	adds	r7, #56	; 0x38
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000244 	.word	0x20000244
 80015f4:	40000400 	.word	0x40000400

080015f8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001630:	f002 fcf6 	bl	8004020 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001644:	f000 f8a4 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000028c 	.word	0x2000028c
 8001650:	40013800 	.word	0x40013800

08001654 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <_ZL12MX_GPIO_Initv+0x90>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <_ZL12MX_GPIO_Initv+0x94>)
 80016b8:	f000 fd72 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <_ZL12MX_GPIO_Initv+0x94>)
 80016d6:	f000 fc09 	bl	8001eec <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40011000 	.word	0x40011000

080016ec <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef * htim )
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    /* verifica que la captura sea del canal 1 */
    if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f1b      	ldrb	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10a      	bne.n	8001712 <HAL_TIM_IC_CaptureCallback+0x26>
    {
        valorCaptura = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 );
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f001 ff7e 	bl	8003600 <HAL_TIM_ReadCapturedValue>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fac4 	bl	8000c94 <__aeabi_ui2f>
 800170c:	4602      	mov	r2, r0
 800170e:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_TIM_IC_CaptureCallback+0x30>)
 8001710:	601a      	str	r2, [r3, #0]
    }
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002d0 	.word	0x200002d0

08001720 <USART1_IRQHandler>:


void USART1_IRQHandler( void )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
    uint8_t pData[10];
    uint16_t val_ccr1;
    /* limpia el array */
    memset( pData, 0, sizeof( pData ) );
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	220a      	movs	r2, #10
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f002 feb3 	bl	8004498 <memset>
    /* verifica que la fuente de interrupcion fue por la
     * recepcion de datos.
     */
    if ( __HAL_UART_GET_IT_SOURCE( &huart1, UART_IT_RXNE ) )
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <USART1_IRQHandler+0x64>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d010      	beq.n	800176c <USART1_IRQHandler+0x4c>
    {
        serial.receive( pData, 1, INTER_BYTE_TIMEOUT );
 800174a:	1d39      	adds	r1, r7, #4
 800174c:	2301      	movs	r3, #1
 800174e:	2201      	movs	r2, #1
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <USART1_IRQHandler+0x68>)
 8001752:	f7ff fcc3 	bl	80010dc <_ZN6Serial7receiveEPht14Mode_timeout_t>
        val_ccr1 = atoi( (char*) pData ); //convierte a entero el valor recibido
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fe35 	bl	80043c8 <atoi>
 800175e:	4603      	mov	r3, r0
 8001760:	b29b      	uxth	r3, r3
 8001762:	807b      	strh	r3, [r7, #2]
       /* almaceno el valor en el registro TIM3->CCR1 */
        __HAL_TIM_SET_COMPARE( &htim3, TIM_CHANNEL_1, val_ccr1 );
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <USART1_IRQHandler+0x6c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	635a      	str	r2, [r3, #52]	; 0x34

    }

    serial.print( pData ); // imprimo el valor reibido
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <USART1_IRQHandler+0x68>)
 8001772:	f7ff fc8e 	bl	8001092 <_ZN5Print5printEPh>
    /* limpia las interuupciones pendientes por el usart1 */
    HAL_NVIC_ClearPendingIRQ (USART1_IRQn); //
 8001776:	2025      	movs	r0, #37	; 0x25
 8001778:	f000 fba9 	bl	8001ece <HAL_NVIC_ClearPendingIRQ>

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000028c 	.word	0x2000028c
 8001788:	200002d8 	.word	0x200002d8
 800178c:	20000244 	.word	0x20000244

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_Z41__static_initialization_and_destruction_0ii>:
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <_Z41__static_initialization_and_destruction_0ii+0x22>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d103      	bne.n	80017be <_Z41__static_initialization_and_destruction_0ii+0x22>
Serial serial( &huart1 );
 80017b6:	4904      	ldr	r1, [pc, #16]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80017ba:	f7ff fc79 	bl	80010b0 <_ZN6SerialC1EP20__UART_HandleTypeDef>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000028c 	.word	0x2000028c
 80017cc:	200002d8 	.word	0x200002d8

080017d0 <_GLOBAL__sub_I_htim2>:
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017d8:	2001      	movs	r0, #1
 80017da:	f7ff ffdf 	bl	800179c <_Z41__static_initialization_and_destruction_0ii>
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_MspInit+0x5c>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_MspInit+0x5c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x5c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x5c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_MspInit+0x60>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_MspInit+0x60>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001862:	d12c      	bne.n	80018be <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	61d3      	str	r3, [r2, #28]
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4619      	mov	r1, r3
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <HAL_TIM_Base_MspInit+0xa8>)
 80018a8:	f000 fb20 	bl	8001eec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2101      	movs	r1, #1
 80018b0:	201c      	movs	r0, #28
 80018b2:	f000 fad6 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b6:	201c      	movs	r0, #28
 80018b8:	f000 faef 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018bc:	e010      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM3)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_TIM_Base_MspInit+0xac>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d10b      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	61d3      	str	r3, [r2, #28]
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_TIM_Base_MspInit+0xa4>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40000400 	.word	0x40000400

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_TIM_MspPostInit+0x58>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d117      	bne.n	8001944 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_TIM_MspPostInit+0x5c>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_TIM_MspPostInit+0x5c>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_TIM_MspPostInit+0x5c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2302      	movs	r3, #2
 8001936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_TIM_MspPostInit+0x60>)
 8001940:	f000 fad4 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40000400 	.word	0x40000400
 8001950:	40021000 	.word	0x40021000
 8001954:	40010800 	.word	0x40010800

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_UART_MspInit+0x9c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d139      	bne.n	80019ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_UART_MspInit+0xa0>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_UART_MspInit+0xa0>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_UART_MspInit+0xa0>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_UART_MspInit+0xa0>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_UART_MspInit+0xa0>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_UART_MspInit+0xa0>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	480f      	ldr	r0, [pc, #60]	; (80019fc <HAL_UART_MspInit+0xa4>)
 80019be:	f000 fa95 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_UART_MspInit+0xa4>)
 80019d8:	f000 fa88 	bl	8001eec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2102      	movs	r1, #2
 80019e0:	2025      	movs	r0, #37	; 0x25
 80019e2:	f000 fa3e 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019e6:	2025      	movs	r0, #37	; 0x25
 80019e8:	f000 fa57 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <HardFault_Handler+0x4>

08001a12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <MemManage_Handler+0x4>

08001a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <BusFault_Handler+0x4>

08001a1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <UsageFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 f8d6 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM2_IRQHandler+0x10>)
 8001a5a:	f001 fa7d 	bl	8002f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001fc 	.word	0x200001fc

08001a68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	return 1;
 8001a6c:	2301      	movs	r3, #1
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <_kill>:

int _kill(int pid, int sig)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a80:	f002 fca6 	bl	80043d0 <__errno>
 8001a84:	4602      	mov	r2, r0
 8001a86:	2316      	movs	r3, #22
 8001a88:	6013      	str	r3, [r2, #0]
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_exit>:

void _exit (int status)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffe7 	bl	8001a76 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aa8:	e7fe      	b.n	8001aa8 <_exit+0x12>
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f002 fc78 	bl	80043d0 <__errno>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20005000 	.word	0x20005000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	200002e4 	.word	0x200002e4
 8001b14:	200002f8 	.word	0x200002f8

08001b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b26:	e003      	b.n	8001b30 <LoopCopyDataInit>

08001b28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b2e:	3104      	adds	r1, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b38:	d3f6      	bcc.n	8001b28 <CopyDataInit>
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b3c:	e002      	b.n	8001b44 <LoopFillZerobss>

08001b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b40:	f842 3b04 	str.w	r3, [r2], #4

08001b44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b48:	d3f9      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b4a:	f7ff ffe5 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f002 fc45 	bl	80043dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b52:	f7ff fb51 	bl	80011f8 <main>
  bx lr
 8001b56:	4770      	bx	lr
  ldr r3, =_sidata
 8001b58:	0800693c 	.word	0x0800693c
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b60:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001b64:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001b68:	200002f8 	.word	0x200002f8

08001b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_2_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x28>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x28>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f963 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fe28 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f97b 	bl	8001eb6 <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd8:	f000 f943 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_IncTick+0x1c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x20>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_IncTick+0x20>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	200002f0 	.word	0x200002f0

08001c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <HAL_GetTick+0x10>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	200002f0 	.word	0x200002f0

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_Delay+0x40>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffe0 	bl	8001c20 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000008 	.word	0x20000008

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4906      	ldr	r1, [pc, #24]	; (8001d10 <__NVIC_EnableIRQ+0x34>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0c      	blt.n	8001d40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_ClearPendingIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	3360      	adds	r3, #96	; 0x60
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e2c:	f7ff ff90 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff0f 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff24 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff90 	bl	8001da4 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5f 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff17 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff19 	bl	8001d14 <__NVIC_ClearPendingIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efe:	e127      	b.n	8002150 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f00:	2201      	movs	r2, #1
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8116 	bne.w	800214a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d034      	beq.n	8001f90 <HAL_GPIO_Init+0xa4>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d80d      	bhi.n	8001f46 <HAL_GPIO_Init+0x5a>
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x9a>
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d804      	bhi.n	8001f3c <HAL_GPIO_Init+0x50>
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d031      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d01c      	beq.n	8001f74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3a:	e048      	b.n	8001fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d043      	beq.n	8001fc8 <HAL_GPIO_Init+0xdc>
 8001f40:	2b11      	cmp	r3, #17
 8001f42:	d01b      	beq.n	8001f7c <HAL_GPIO_Init+0x90>
          break;
 8001f44:	e043      	b.n	8001fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f46:	4a89      	ldr	r2, [pc, #548]	; (800216c <HAL_GPIO_Init+0x280>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d026      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f4c:	4a87      	ldr	r2, [pc, #540]	; (800216c <HAL_GPIO_Init+0x280>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d806      	bhi.n	8001f60 <HAL_GPIO_Init+0x74>
 8001f52:	4a87      	ldr	r2, [pc, #540]	; (8002170 <HAL_GPIO_Init+0x284>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d020      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f58:	4a86      	ldr	r2, [pc, #536]	; (8002174 <HAL_GPIO_Init+0x288>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01d      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
          break;
 8001f5e:	e036      	b.n	8001fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f60:	4a85      	ldr	r2, [pc, #532]	; (8002178 <HAL_GPIO_Init+0x28c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f66:	4a85      	ldr	r2, [pc, #532]	; (800217c <HAL_GPIO_Init+0x290>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d016      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
 8001f6c:	4a84      	ldr	r2, [pc, #528]	; (8002180 <HAL_GPIO_Init+0x294>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0xae>
          break;
 8001f72:	e02c      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e028      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	3304      	adds	r3, #4
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e023      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e01e      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	330c      	adds	r3, #12
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e019      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e012      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	611a      	str	r2, [r3, #16]
          break;
 8001fba:	e008      	b.n	8001fce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	615a      	str	r2, [r3, #20]
          break;
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2bff      	cmp	r3, #255	; 0xff
 8001fd2:	d801      	bhi.n	8001fd8 <HAL_GPIO_Init+0xec>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	e001      	b.n	8001fdc <HAL_GPIO_Init+0xf0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2bff      	cmp	r3, #255	; 0xff
 8001fe2:	d802      	bhi.n	8001fea <HAL_GPIO_Init+0xfe>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x104>
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	3b08      	subs	r3, #8
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	6a39      	ldr	r1, [r7, #32]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8096 	beq.w	800214a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800201e:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_GPIO_Init+0x298>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_GPIO_Init+0x298>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x298>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002036:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x29c>)
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_GPIO_Init+0x2a0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x19e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	; (8002190 <HAL_GPIO_Init+0x2a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x19a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x2a8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x196>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_GPIO_Init+0x2ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x192>
 800207a:	2303      	movs	r3, #3
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 800207e:	2304      	movs	r3, #4
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x1a0>
 800208a:	2300      	movs	r3, #0
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800209c:	493a      	ldr	r1, [pc, #232]	; (8002188 <HAL_GPIO_Init+0x29c>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4938      	ldr	r1, [pc, #224]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4933      	ldr	r1, [pc, #204]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	492e      	ldr	r1, [pc, #184]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
 80020ea:	e006      	b.n	80020fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4929      	ldr	r1, [pc, #164]	; (800219c <HAL_GPIO_Init+0x2b0>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002106:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	4924      	ldr	r1, [pc, #144]	; (800219c <HAL_GPIO_Init+0x2b0>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	43db      	mvns	r3, r3
 800211c:	491f      	ldr	r1, [pc, #124]	; (800219c <HAL_GPIO_Init+0x2b0>)
 800211e:	4013      	ands	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	491a      	ldr	r1, [pc, #104]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	60cb      	str	r3, [r1, #12]
 800213a:	e006      	b.n	800214a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_GPIO_Init+0x2b0>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	43db      	mvns	r3, r3
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <HAL_GPIO_Init+0x2b0>)
 8002146:	4013      	ands	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f47f aed0 	bne.w	8001f00 <HAL_GPIO_Init+0x14>
  }
}
 8002160:	bf00      	nop
 8002162:	372c      	adds	r7, #44	; 0x2c
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	10210000 	.word	0x10210000
 8002170:	10110000 	.word	0x10110000
 8002174:	10120000 	.word	0x10120000
 8002178:	10310000 	.word	0x10310000
 800217c:	10320000 	.word	0x10320000
 8002180:	10220000 	.word	0x10220000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e26c      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8087 	beq.w	80022fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f0:	4b92      	ldr	r3, [pc, #584]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d00c      	beq.n	8002216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021fc:	4b8f      	ldr	r3, [pc, #572]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d112      	bne.n	800222e <HAL_RCC_OscConfig+0x5e>
 8002208:	4b8c      	ldr	r3, [pc, #560]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	4b89      	ldr	r3, [pc, #548]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d06c      	beq.n	80022fc <HAL_RCC_OscConfig+0x12c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d168      	bne.n	80022fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e246      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x76>
 8002238:	4b80      	ldr	r3, [pc, #512]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a7f      	ldr	r2, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e02e      	b.n	80022a4 <HAL_RCC_OscConfig+0xd4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x98>
 800224e:	4b7b      	ldr	r3, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7a      	ldr	r2, [pc, #488]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b78      	ldr	r3, [pc, #480]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a77      	ldr	r2, [pc, #476]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e01d      	b.n	80022a4 <HAL_RCC_OscConfig+0xd4>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0xbc>
 8002272:	4b72      	ldr	r3, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a71      	ldr	r2, [pc, #452]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0xd4>
 800228c:	4b6b      	ldr	r3, [pc, #428]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6a      	ldr	r2, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b68      	ldr	r3, [pc, #416]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a67      	ldr	r2, [pc, #412]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fcb8 	bl	8001c20 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fcb4 	bl	8001c20 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1fa      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0xe4>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fca4 	bl	8001c20 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fca0 	bl	8001c20 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1e6      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x10c>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230a:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x18c>
 8002322:	4b46      	ldr	r3, [pc, #280]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x176>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1ba      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4939      	ldr	r1, [pc, #228]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e03a      	b.n	80023d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff fc59 	bl	8001c20 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7ff fc55 	bl	8001c20 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e19b      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4927      	ldr	r1, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x270>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fc38 	bl	8001c20 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff fc34 	bl	8001c20 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e17a      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d03a      	beq.n	8002454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fc18 	bl	8001c20 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc14 	bl	8001c20 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e15a      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_RCC_OscConfig+0x26c>)
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f000 fada 	bl	80029cc <RCC_Delay>
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_OscConfig+0x274>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fbfe 	bl	8001c20 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002426:	e00f      	b.n	8002448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fbfa 	bl	8001c20 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d908      	bls.n	8002448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e140      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	42420000 	.word	0x42420000
 8002444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	4b9e      	ldr	r3, [pc, #632]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e9      	bne.n	8002428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a6 	beq.w	80025ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b97      	ldr	r3, [pc, #604]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a93      	ldr	r2, [pc, #588]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <HAL_RCC_OscConfig+0x4f8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x4f8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a8a      	ldr	r2, [pc, #552]	; (80026c8 <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fbbb 	bl	8001c20 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7ff fbb7 	bl	8001c20 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0fd      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x4f8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x312>
 80024d4:	4b7b      	ldr	r3, [pc, #492]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a7a      	ldr	r2, [pc, #488]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	e02d      	b.n	800253e <HAL_RCC_OscConfig+0x36e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x334>
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a75      	ldr	r2, [pc, #468]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a72      	ldr	r2, [pc, #456]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	e01c      	b.n	800253e <HAL_RCC_OscConfig+0x36e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x356>
 800250c:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a6c      	ldr	r2, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a69      	ldr	r2, [pc, #420]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e00b      	b.n	800253e <HAL_RCC_OscConfig+0x36e>
 8002526:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a66      	ldr	r2, [pc, #408]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a63      	ldr	r2, [pc, #396]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d015      	beq.n	8002572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb6b 	bl	8001c20 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7ff fb67 	bl	8001c20 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0ab      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	4b57      	ldr	r3, [pc, #348]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ee      	beq.n	800254e <HAL_RCC_OscConfig+0x37e>
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff fb55 	bl	8001c20 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7ff fb51 	bl	8001c20 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e095      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	4b4c      	ldr	r3, [pc, #304]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a47      	ldr	r2, [pc, #284]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8081 	beq.w	80026ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b8:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d061      	beq.n	8002688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d146      	bne.n	800265a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_OscConfig+0x4fc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff fb25 	bl	8001c20 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff fb21 	bl	8001c20 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e067      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d108      	bne.n	8002614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	492d      	ldr	r1, [pc, #180]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a19      	ldr	r1, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	430b      	orrs	r3, r1
 8002626:	4927      	ldr	r1, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_OscConfig+0x4fc>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7ff faf5 	bl	8001c20 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7ff faf1 	bl	8001c20 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e037      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x46a>
 8002658:	e02f      	b.n	80026ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_RCC_OscConfig+0x4fc>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fade 	bl	8001c20 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff fada 	bl	8001c20 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e020      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x498>
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e013      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40007000 	.word	0x40007000
 80026cc:	42420060 	.word	0x42420060

080026d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d0      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4965      	ldr	r1, [pc, #404]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800274e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d040      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e073      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06b      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4936      	ldr	r1, [pc, #216]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7ff fa2e 	bl	8001c20 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7ff fa2a 	bl	8001c20 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e053      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d210      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	4922      	ldr	r1, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4601      	mov	r1, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	fa21 f303 	lsr.w	r3, r1, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1cc>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1d0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f98c 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
 8002898:	080066b8 	.word	0x080066b8
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	b490      	push	{r4, r7}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028ac:	1d3c      	adds	r4, r7, #4
 80028ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ce:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x40>
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x46>
 80028e2:	e02d      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e6:	623b      	str	r3, [r7, #32]
      break;
 80028e8:	e02d      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	0c9b      	lsrs	r3, r3, #18
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028f6:	4413      	add	r3, r2
 80028f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_RCC_GetSysClockFreq+0xb8>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0c5b      	lsrs	r3, r3, #17
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002916:	4413      	add	r3, r2
 8002918:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800291c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002922:	fb02 f203 	mul.w	r2, r2, r3
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	e004      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	623b      	str	r3, [r7, #32]
      break;
 800293e:	e002      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002942:	623b      	str	r3, [r7, #32]
      break;
 8002944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002946:	6a3b      	ldr	r3, [r7, #32]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bc90      	pop	{r4, r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	0800668c 	.word	0x0800668c
 8002958:	0800669c 	.word	0x0800669c
 800295c:	40021000 	.word	0x40021000
 8002960:	007a1200 	.word	0x007a1200
 8002964:	003d0900 	.word	0x003d0900

08002968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <HAL_RCC_GetHCLKFreq+0x10>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002980:	f7ff fff2 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002984:	4601      	mov	r1, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4a03      	ldr	r2, [pc, #12]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	080066c8 	.word	0x080066c8

080029a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a8:	f7ff ffde 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029ac:	4601      	mov	r1, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	0adb      	lsrs	r3, r3, #11
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4a03      	ldr	r2, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080066c8 	.word	0x080066c8

080029cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCC_Delay+0x34>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <RCC_Delay+0x38>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0a5b      	lsrs	r3, r3, #9
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e8:	bf00      	nop
  }
  while (Delay --);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	60fa      	str	r2, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <RCC_Delay+0x1c>
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000
 8002a04:	10624dd3 	.word	0x10624dd3

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe ff08 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fe42 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e041      	b.n	8002b3c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f839 	bl	8002b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f000 fdf3 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_TIM_PWM_Start+0x24>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e022      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d109      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x3e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e015      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x58>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e008      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e05e      	b.n	8002c88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_PWM_Start+0x82>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd8:	e013      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_PWM_Start+0x92>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be8:	e00b      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_PWM_Start+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf8:	e003      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 f973 	bl	8003ef6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_TIM_PWM_Start+0x138>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_TIM_PWM_Start+0x138>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xfa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d009      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xfa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_TIM_PWM_Start+0x13c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xfa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIM_PWM_Start+0x140>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d111      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d010      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800

08002c9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e041      	b.n	8002d32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f839 	bl	8002d3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 fcf8 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0x1a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	e013      	b.n	8002d8e <HAL_TIM_IC_Start_IT+0x42>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_IC_Start_IT+0x2a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e00b      	b.n	8002d8e <HAL_TIM_IC_Start_IT+0x42>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_IC_Start_IT+0x3a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e003      	b.n	8002d8e <HAL_TIM_IC_Start_IT+0x42>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_TIM_IC_Start_IT+0x54>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e013      	b.n	8002dc8 <HAL_TIM_IC_Start_IT+0x7c>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d104      	bne.n	8002db0 <HAL_TIM_IC_Start_IT+0x64>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e00b      	b.n	8002dc8 <HAL_TIM_IC_Start_IT+0x7c>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d104      	bne.n	8002dc0 <HAL_TIM_IC_Start_IT+0x74>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e003      	b.n	8002dc8 <HAL_TIM_IC_Start_IT+0x7c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0b3      	b.n	8002f42 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_IC_Start_IT+0x9e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de8:	e013      	b.n	8002e12 <HAL_TIM_IC_Start_IT+0xc6>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_IC_Start_IT+0xae>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df8:	e00b      	b.n	8002e12 <HAL_TIM_IC_Start_IT+0xc6>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_IC_Start_IT+0xbe>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e08:	e003      	b.n	8002e12 <HAL_TIM_IC_Start_IT+0xc6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_IC_Start_IT+0xd6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	e013      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0xfe>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_IC_Start_IT+0xe6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0xfe>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_IC_Start_IT+0xf6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	e003      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0xfe>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d841      	bhi.n	8002ed4 <HAL_TIM_IC_Start_IT+0x188>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <HAL_TIM_IC_Start_IT+0x10c>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002ed5 	.word	0x08002ed5
 8002e60:	08002ed5 	.word	0x08002ed5
 8002e64:	08002ed5 	.word	0x08002ed5
 8002e68:	08002e9f 	.word	0x08002e9f
 8002e6c:	08002ed5 	.word	0x08002ed5
 8002e70:	08002ed5 	.word	0x08002ed5
 8002e74:	08002ed5 	.word	0x08002ed5
 8002e78:	08002eb1 	.word	0x08002eb1
 8002e7c:	08002ed5 	.word	0x08002ed5
 8002e80:	08002ed5 	.word	0x08002ed5
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	08002ec3 	.word	0x08002ec3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0202 	orr.w	r2, r2, #2
 8002e9a:	60da      	str	r2, [r3, #12]
      break;
 8002e9c:	e01b      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0204 	orr.w	r2, r2, #4
 8002eac:	60da      	str	r2, [r3, #12]
      break;
 8002eae:	e012      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	60da      	str	r2, [r3, #12]
      break;
 8002ec0:	e009      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0210 	orr.w	r2, r2, #16
 8002ed0:	60da      	str	r2, [r3, #12]
      break;
 8002ed2:	e000      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002ed4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f809 	bl	8003ef6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_TIM_IC_Start_IT+0x200>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_TIM_IC_Start_IT+0x1c0>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIM_IC_Start_IT+0x1c0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIM_IC_Start_IT+0x204>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_IC_Start_IT+0x1c0>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_TIM_IC_Start_IT+0x208>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d111      	bne.n	8002f30 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d010      	beq.n	8002f40 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	e007      	b.n	8002f40 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800

08002f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe fba6 	bl	80016ec <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fb79 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fb7f 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0204 	mvn.w	r2, #4
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe fb7c 	bl	80016ec <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb4f 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fb55 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0208 	mvn.w	r2, #8
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe fb52 	bl	80016ec <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fb25 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fb2b 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b10      	cmp	r3, #16
 8003068:	d122      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d11b      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0210 	mvn.w	r2, #16
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fb28 	bl	80016ec <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fafb 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fb01 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0201 	mvn.w	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fad6 	bl	8003688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d107      	bne.n	8003108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 ff83 	bl	800400e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d10e      	bne.n	8003134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d107      	bne.n	8003134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fac5 	bl	80036be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b20      	cmp	r3, #32
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d107      	bne.n	8003160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0220 	mvn.w	r2, #32
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 ff4e 	bl	8003ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_TIM_IC_ConfigChannel+0x1a>
 800317e:	2302      	movs	r3, #2
 8003180:	e082      	b.n	8003288 <HAL_TIM_IC_ConfigChannel+0x120>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f000 fd06 	bl	8003bb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 020c 	bic.w	r2, r2, #12
 80031b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6999      	ldr	r1, [r3, #24]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	619a      	str	r2, [r3, #24]
 80031c6:	e05a      	b.n	800327e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d11c      	bne.n	8003208 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f000 fd6f 	bl	8003cc0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6999      	ldr	r1, [r3, #24]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	021a      	lsls	r2, r3, #8
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
 8003206:	e03a      	b.n	800327e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11b      	bne.n	8003246 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f000 fdba 	bl	8003d96 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 020c 	bic.w	r2, r2, #12
 8003230:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69d9      	ldr	r1, [r3, #28]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	61da      	str	r2, [r3, #28]
 8003244:	e01b      	b.n	800327e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f000 fdd9 	bl	8003e0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003268:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e0ac      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x174>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	f200 809f 	bhi.w	80033f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80032ba:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080033f9 	.word	0x080033f9
 80032c8:	080033f9 	.word	0x080033f9
 80032cc:	080033f9 	.word	0x080033f9
 80032d0:	08003335 	.word	0x08003335
 80032d4:	080033f9 	.word	0x080033f9
 80032d8:	080033f9 	.word	0x080033f9
 80032dc:	080033f9 	.word	0x080033f9
 80032e0:	08003377 	.word	0x08003377
 80032e4:	080033f9 	.word	0x080033f9
 80032e8:	080033f9 	.word	0x080033f9
 80032ec:	080033f9 	.word	0x080033f9
 80032f0:	080033b7 	.word	0x080033b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa4a 	bl	8003794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0208 	orr.w	r2, r2, #8
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
      break;
 8003332:	e062      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fa90 	bl	8003860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	021a      	lsls	r2, r3, #8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
      break;
 8003374:	e041      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fad9 	bl	8003934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0208 	orr.w	r2, r2, #8
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0204 	bic.w	r2, r2, #4
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
      break;
 80033b4:	e021      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fb23 	bl	8003a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	021a      	lsls	r2, r3, #8
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	61da      	str	r2, [r3, #28]
      break;
 80033f6:	e000      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80033f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIM_ConfigClockSource+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e0a6      	b.n	8003572 <HAL_TIM_ConfigClockSource+0x166>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d067      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x120>
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d80b      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x6c>
 8003460:	2b10      	cmp	r3, #16
 8003462:	d073      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x140>
 8003464:	2b10      	cmp	r3, #16
 8003466:	d802      	bhi.n	800346e <HAL_TIM_ConfigClockSource+0x62>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d06f      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800346c:	e078      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800346e:	2b20      	cmp	r3, #32
 8003470:	d06c      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x140>
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d06a      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003476:	e073      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003478:	2b70      	cmp	r3, #112	; 0x70
 800347a:	d00d      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0x8c>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d804      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x7e>
 8003480:	2b50      	cmp	r3, #80	; 0x50
 8003482:	d033      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0xe0>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d041      	beq.n	800350c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003488:	e06a      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d066      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x152>
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003494:	d017      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003496:	e063      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6899      	ldr	r1, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f000 fd06 	bl	8003eb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	609a      	str	r2, [r3, #8]
      break;
 80034c4:	e04c      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f000 fcef 	bl	8003eb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e8:	609a      	str	r2, [r3, #8]
      break;
 80034ea:	e039      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f000 fbb3 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2150      	movs	r1, #80	; 0x50
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fcbd 	bl	8003e84 <TIM_ITRx_SetConfig>
      break;
 800350a:	e029      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	f000 fc0d 	bl	8003d38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2160      	movs	r1, #96	; 0x60
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fcad 	bl	8003e84 <TIM_ITRx_SetConfig>
      break;
 800352a:	e019      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	f000 fb93 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fc9d 	bl	8003e84 <TIM_ITRx_SetConfig>
      break;
 800354a:	e009      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fc94 	bl	8003e84 <TIM_ITRx_SetConfig>
        break;
 800355c:	e000      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800355e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_TIM_SlaveConfigSynchro+0x18>
 800358e:	2302      	movs	r3, #2
 8003590:	e031      	b.n	80035f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa7d 	bl	8003aa4 <TIM_SlaveTimer_SetConfig>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e018      	b.n	80035f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035e2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d831      	bhi.n	8003678 <HAL_TIM_ReadCapturedValue+0x78>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	08003651 	.word	0x08003651
 8003620:	08003679 	.word	0x08003679
 8003624:	08003679 	.word	0x08003679
 8003628:	08003679 	.word	0x08003679
 800362c:	0800365b 	.word	0x0800365b
 8003630:	08003679 	.word	0x08003679
 8003634:	08003679 	.word	0x08003679
 8003638:	08003679 	.word	0x08003679
 800363c:	08003665 	.word	0x08003665
 8003640:	08003679 	.word	0x08003679
 8003644:	08003679 	.word	0x08003679
 8003648:	08003679 	.word	0x08003679
 800364c:	0800366f 	.word	0x0800366f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	60fb      	str	r3, [r7, #12]

      break;
 8003658:	e00f      	b.n	800367a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	60fb      	str	r3, [r7, #12]

      break;
 8003662:	e00a      	b.n	800367a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	60fb      	str	r3, [r7, #12]

      break;
 800366c:	e005      	b.n	800367a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	60fb      	str	r3, [r7, #12]

      break;
 8003676:	e000      	b.n	800367a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003678:	bf00      	nop
  }

  return tmpreg;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop

08003688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_Base_SetConfig+0xbc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a25      	ldr	r2, [pc, #148]	; (8003790 <TIM_Base_SetConfig+0xc0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d007      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <TIM_Base_SetConfig+0xbc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_Base_SetConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <TIM_Base_SetConfig+0xc0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d108      	bne.n	8003744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <TIM_Base_SetConfig+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d103      	bne.n	8003778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	615a      	str	r2, [r3, #20]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800

08003794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0308 	bic.w	r3, r3, #8
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <TIM_OC1_SetConfig+0xc8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00

08003860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0210 	bic.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0320 	bic.w	r3, r3, #32
 80038aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <TIM_OC2_SetConfig+0xd0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10d      	bne.n	80038dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d113      	bne.n	800390c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	40012c00 	.word	0x40012c00

08003934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0303 	bic.w	r3, r3, #3
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800397c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_OC3_SetConfig+0xd0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10d      	bne.n	80039ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d113      	bne.n	80039de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00

08003a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <TIM_OC4_SetConfig+0x98>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d109      	bne.n	8003a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b30      	cmp	r3, #48	; 0x30
 8003ae8:	d05c      	beq.n	8003ba4 <TIM_SlaveTimer_SetConfig+0x100>
 8003aea:	2b30      	cmp	r3, #48	; 0x30
 8003aec:	d806      	bhi.n	8003afc <TIM_SlaveTimer_SetConfig+0x58>
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d058      	beq.n	8003ba4 <TIM_SlaveTimer_SetConfig+0x100>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d056      	beq.n	8003ba4 <TIM_SlaveTimer_SetConfig+0x100>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d054      	beq.n	8003ba4 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003afa:	e054      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003afc:	2b50      	cmp	r3, #80	; 0x50
 8003afe:	d03d      	beq.n	8003b7c <TIM_SlaveTimer_SetConfig+0xd8>
 8003b00:	2b50      	cmp	r3, #80	; 0x50
 8003b02:	d802      	bhi.n	8003b0a <TIM_SlaveTimer_SetConfig+0x66>
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d010      	beq.n	8003b2a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8003b08:	e04d      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003b0a:	2b60      	cmp	r3, #96	; 0x60
 8003b0c:	d040      	beq.n	8003b90 <TIM_SlaveTimer_SetConfig+0xec>
 8003b0e:	2b70      	cmp	r3, #112	; 0x70
 8003b10:	d000      	beq.n	8003b14 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003b12:	e048      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68d9      	ldr	r1, [r3, #12]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f000 f9c8 	bl	8003eb8 <TIM_ETR_SetConfig>
      break;
 8003b28:	e03d      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d101      	bne.n	8003b36 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e038      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	621a      	str	r2, [r3, #32]
      break;
 8003b7a:	e014      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f000 f86b 	bl	8003c64 <TIM_TI1_ConfigInputStage>
      break;
 8003b8e:	e00a      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f000 f8cb 	bl	8003d38 <TIM_TI2_ConfigInputStage>
      break;
 8003ba2:	e000      	b.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8003ba4:	bf00      	nop
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <TIM_TI1_SetConfig+0xa8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_TI1_SetConfig+0x46>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d007      	beq.n	8003bf6 <TIM_TI1_SetConfig+0x46>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <TIM_TI1_SetConfig+0xac>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_TI1_SetConfig+0x46>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <TIM_TI1_SetConfig+0xb0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <TIM_TI1_SetConfig+0x4a>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <TIM_TI1_SetConfig+0x4c>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	e003      	b.n	8003c1a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f023 030a 	bic.w	r3, r3, #10
 8003c34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 030a 	and.w	r3, r3, #10
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800

08003c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 030a 	bic.w	r3, r3, #10
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0210 	bic.w	r2, r3, #16
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f023 0210 	bic.w	r2, r3, #16
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	031b      	lsls	r3, r3, #12
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	621a      	str	r2, [r3, #32]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	031b      	lsls	r3, r3, #12
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	031b      	lsls	r3, r3, #12
 8003e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f043 0307 	orr.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	609a      	str	r2, [r3, #8]
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b087      	sub	sp, #28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	401a      	ands	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	621a      	str	r2, [r3, #32]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
	...

08003f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e046      	b.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	d009      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a10      	ldr	r2, [pc, #64]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800

08003ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e03f      	b.n	80040b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fc86 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f905 	bl	8004274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b08a      	sub	sp, #40	; 0x28
 80040be:	af02      	add	r7, sp, #8
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d17c      	bne.n	80041d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Transmit+0x2c>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e075      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Transmit+0x3e>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e06e      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800410e:	f7fd fd87 	bl	8001c20 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x82>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800414c:	e02a      	b.n	80041a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f840 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e036      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3302      	adds	r3, #2
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e007      	b.n	8004196 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	3301      	adds	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1cf      	bne.n	800414e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2140      	movs	r1, #64	; 0x40
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f810 	bl	80041de <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e006      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ee:	e02c      	b.n	800424a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f6:	d028      	beq.n	800424a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x30>
 80041fe:	f7fd fd0f 	bl	8001c20 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	429a      	cmp	r2, r3
 800420c:	d21d      	bcs.n	800424a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800421c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00f      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	429a      	cmp	r2, r3
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	429a      	cmp	r2, r3
 8004266:	d0c3      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ae:	f023 030c 	bic.w	r3, r3, #12
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <UART_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042dc:	f7fe fb62 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	e002      	b.n	80042ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fe fb4a 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 80042e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <UART_SetConfig+0x118>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	0119      	lsls	r1, r3, #4
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009a      	lsls	r2, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <UART_SetConfig+0x118>)
 8004322:	fba3 0302 	umull	r0, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2064      	movs	r0, #100	; 0x64
 800432a:	fb00 f303 	mul.w	r3, r0, r3
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	; 0x32
 8004334:	4a15      	ldr	r2, [pc, #84]	; (800438c <UART_SetConfig+0x118>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004340:	4419      	add	r1, r3
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	fbb2 f2f3 	udiv	r2, r2, r3
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <UART_SetConfig+0x118>)
 800435a:	fba3 0302 	umull	r0, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2064      	movs	r0, #100	; 0x64
 8004362:	fb00 f303 	mul.w	r3, r0, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	3332      	adds	r3, #50	; 0x32
 800436c:	4a07      	ldr	r2, [pc, #28]	; (800438c <UART_SetConfig+0x118>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	440a      	add	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40013800 	.word	0x40013800
 800438c:	51eb851f 	.word	0x51eb851f

08004390 <__cxa_pure_virtual>:
 8004390:	b508      	push	{r3, lr}
 8004392:	f000 f80d 	bl	80043b0 <_ZSt9terminatev>

08004396 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004396:	b508      	push	{r3, lr}
 8004398:	4780      	blx	r0
 800439a:	f000 f80e 	bl	80043ba <abort>
	...

080043a0 <_ZSt13get_terminatev>:
 80043a0:	4b02      	ldr	r3, [pc, #8]	; (80043ac <_ZSt13get_terminatev+0xc>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	f3bf 8f5b 	dmb	ish
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <_ZSt9terminatev>:
 80043b0:	b508      	push	{r3, lr}
 80043b2:	f7ff fff5 	bl	80043a0 <_ZSt13get_terminatev>
 80043b6:	f7ff ffee 	bl	8004396 <_ZN10__cxxabiv111__terminateEPFvvE>

080043ba <abort>:
 80043ba:	b508      	push	{r3, lr}
 80043bc:	2006      	movs	r0, #6
 80043be:	f000 fda1 	bl	8004f04 <raise>
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7fd fb67 	bl	8001a96 <_exit>

080043c8 <atoi>:
 80043c8:	220a      	movs	r2, #10
 80043ca:	2100      	movs	r1, #0
 80043cc:	f000 be32 	b.w	8005034 <strtol>

080043d0 <__errno>:
 80043d0:	4b01      	ldr	r3, [pc, #4]	; (80043d8 <__errno+0x8>)
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000010 	.word	0x20000010

080043dc <__libc_init_array>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	2500      	movs	r5, #0
 80043e0:	4e0c      	ldr	r6, [pc, #48]	; (8004414 <__libc_init_array+0x38>)
 80043e2:	4c0d      	ldr	r4, [pc, #52]	; (8004418 <__libc_init_array+0x3c>)
 80043e4:	1ba4      	subs	r4, r4, r6
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	42a5      	cmp	r5, r4
 80043ea:	d109      	bne.n	8004400 <__libc_init_array+0x24>
 80043ec:	f002 f93a 	bl	8006664 <_init>
 80043f0:	2500      	movs	r5, #0
 80043f2:	4e0a      	ldr	r6, [pc, #40]	; (800441c <__libc_init_array+0x40>)
 80043f4:	4c0a      	ldr	r4, [pc, #40]	; (8004420 <__libc_init_array+0x44>)
 80043f6:	1ba4      	subs	r4, r4, r6
 80043f8:	10a4      	asrs	r4, r4, #2
 80043fa:	42a5      	cmp	r5, r4
 80043fc:	d105      	bne.n	800440a <__libc_init_array+0x2e>
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004404:	4798      	blx	r3
 8004406:	3501      	adds	r5, #1
 8004408:	e7ee      	b.n	80043e8 <__libc_init_array+0xc>
 800440a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800440e:	4798      	blx	r3
 8004410:	3501      	adds	r5, #1
 8004412:	e7f2      	b.n	80043fa <__libc_init_array+0x1e>
 8004414:	08006930 	.word	0x08006930
 8004418:	08006930 	.word	0x08006930
 800441c:	08006930 	.word	0x08006930
 8004420:	08006938 	.word	0x08006938

08004424 <malloc>:
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <malloc+0xc>)
 8004426:	4601      	mov	r1, r0
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	f000 b889 	b.w	8004540 <_malloc_r>
 800442e:	bf00      	nop
 8004430:	20000010 	.word	0x20000010

08004434 <memchr>:
 8004434:	b510      	push	{r4, lr}
 8004436:	b2c9      	uxtb	r1, r1
 8004438:	4402      	add	r2, r0
 800443a:	4290      	cmp	r0, r2
 800443c:	4603      	mov	r3, r0
 800443e:	d101      	bne.n	8004444 <memchr+0x10>
 8004440:	2300      	movs	r3, #0
 8004442:	e003      	b.n	800444c <memchr+0x18>
 8004444:	781c      	ldrb	r4, [r3, #0]
 8004446:	3001      	adds	r0, #1
 8004448:	428c      	cmp	r4, r1
 800444a:	d1f6      	bne.n	800443a <memchr+0x6>
 800444c:	4618      	mov	r0, r3
 800444e:	bd10      	pop	{r4, pc}

08004450 <memcpy>:
 8004450:	b510      	push	{r4, lr}
 8004452:	1e43      	subs	r3, r0, #1
 8004454:	440a      	add	r2, r1
 8004456:	4291      	cmp	r1, r2
 8004458:	d100      	bne.n	800445c <memcpy+0xc>
 800445a:	bd10      	pop	{r4, pc}
 800445c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004464:	e7f7      	b.n	8004456 <memcpy+0x6>

08004466 <memmove>:
 8004466:	4288      	cmp	r0, r1
 8004468:	b510      	push	{r4, lr}
 800446a:	eb01 0302 	add.w	r3, r1, r2
 800446e:	d807      	bhi.n	8004480 <memmove+0x1a>
 8004470:	1e42      	subs	r2, r0, #1
 8004472:	4299      	cmp	r1, r3
 8004474:	d00a      	beq.n	800448c <memmove+0x26>
 8004476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800447a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800447e:	e7f8      	b.n	8004472 <memmove+0xc>
 8004480:	4283      	cmp	r3, r0
 8004482:	d9f5      	bls.n	8004470 <memmove+0xa>
 8004484:	1881      	adds	r1, r0, r2
 8004486:	1ad2      	subs	r2, r2, r3
 8004488:	42d3      	cmn	r3, r2
 800448a:	d100      	bne.n	800448e <memmove+0x28>
 800448c:	bd10      	pop	{r4, pc}
 800448e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004492:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004496:	e7f7      	b.n	8004488 <memmove+0x22>

08004498 <memset>:
 8004498:	4603      	mov	r3, r0
 800449a:	4402      	add	r2, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <_free_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4605      	mov	r5, r0
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d043      	beq.n	8004538 <_free_r+0x90>
 80044b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b4:	1f0c      	subs	r4, r1, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bfb8      	it	lt
 80044ba:	18e4      	addlt	r4, r4, r3
 80044bc:	f001 fc58 	bl	8005d70 <__malloc_lock>
 80044c0:	4a1e      	ldr	r2, [pc, #120]	; (800453c <_free_r+0x94>)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	4610      	mov	r0, r2
 80044c6:	b933      	cbnz	r3, 80044d6 <_free_r+0x2e>
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	6014      	str	r4, [r2, #0]
 80044cc:	4628      	mov	r0, r5
 80044ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d2:	f001 bc4e 	b.w	8005d72 <__malloc_unlock>
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	d90b      	bls.n	80044f2 <_free_r+0x4a>
 80044da:	6821      	ldr	r1, [r4, #0]
 80044dc:	1862      	adds	r2, r4, r1
 80044de:	4293      	cmp	r3, r2
 80044e0:	bf01      	itttt	eq
 80044e2:	681a      	ldreq	r2, [r3, #0]
 80044e4:	685b      	ldreq	r3, [r3, #4]
 80044e6:	1852      	addeq	r2, r2, r1
 80044e8:	6022      	streq	r2, [r4, #0]
 80044ea:	6063      	str	r3, [r4, #4]
 80044ec:	6004      	str	r4, [r0, #0]
 80044ee:	e7ed      	b.n	80044cc <_free_r+0x24>
 80044f0:	4613      	mov	r3, r2
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	b10a      	cbz	r2, 80044fa <_free_r+0x52>
 80044f6:	42a2      	cmp	r2, r4
 80044f8:	d9fa      	bls.n	80044f0 <_free_r+0x48>
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	1858      	adds	r0, r3, r1
 80044fe:	42a0      	cmp	r0, r4
 8004500:	d10b      	bne.n	800451a <_free_r+0x72>
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	4401      	add	r1, r0
 8004506:	1858      	adds	r0, r3, r1
 8004508:	4282      	cmp	r2, r0
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	d1de      	bne.n	80044cc <_free_r+0x24>
 800450e:	6810      	ldr	r0, [r2, #0]
 8004510:	6852      	ldr	r2, [r2, #4]
 8004512:	4401      	add	r1, r0
 8004514:	6019      	str	r1, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e7d8      	b.n	80044cc <_free_r+0x24>
 800451a:	d902      	bls.n	8004522 <_free_r+0x7a>
 800451c:	230c      	movs	r3, #12
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	e7d4      	b.n	80044cc <_free_r+0x24>
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1821      	adds	r1, r4, r0
 8004526:	428a      	cmp	r2, r1
 8004528:	bf01      	itttt	eq
 800452a:	6811      	ldreq	r1, [r2, #0]
 800452c:	6852      	ldreq	r2, [r2, #4]
 800452e:	1809      	addeq	r1, r1, r0
 8004530:	6021      	streq	r1, [r4, #0]
 8004532:	6062      	str	r2, [r4, #4]
 8004534:	605c      	str	r4, [r3, #4]
 8004536:	e7c9      	b.n	80044cc <_free_r+0x24>
 8004538:	bd38      	pop	{r3, r4, r5, pc}
 800453a:	bf00      	nop
 800453c:	200002e8 	.word	0x200002e8

08004540 <_malloc_r>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	1ccd      	adds	r5, r1, #3
 8004544:	f025 0503 	bic.w	r5, r5, #3
 8004548:	3508      	adds	r5, #8
 800454a:	2d0c      	cmp	r5, #12
 800454c:	bf38      	it	cc
 800454e:	250c      	movcc	r5, #12
 8004550:	2d00      	cmp	r5, #0
 8004552:	4606      	mov	r6, r0
 8004554:	db01      	blt.n	800455a <_malloc_r+0x1a>
 8004556:	42a9      	cmp	r1, r5
 8004558:	d903      	bls.n	8004562 <_malloc_r+0x22>
 800455a:	230c      	movs	r3, #12
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	2000      	movs	r0, #0
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	f001 fc05 	bl	8005d70 <__malloc_lock>
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <_malloc_r+0xac>)
 8004568:	6814      	ldr	r4, [r2, #0]
 800456a:	4621      	mov	r1, r4
 800456c:	b991      	cbnz	r1, 8004594 <_malloc_r+0x54>
 800456e:	4c20      	ldr	r4, [pc, #128]	; (80045f0 <_malloc_r+0xb0>)
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	b91b      	cbnz	r3, 800457c <_malloc_r+0x3c>
 8004574:	4630      	mov	r0, r6
 8004576:	f000 fc8d 	bl	8004e94 <_sbrk_r>
 800457a:	6020      	str	r0, [r4, #0]
 800457c:	4629      	mov	r1, r5
 800457e:	4630      	mov	r0, r6
 8004580:	f000 fc88 	bl	8004e94 <_sbrk_r>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d124      	bne.n	80045d2 <_malloc_r+0x92>
 8004588:	230c      	movs	r3, #12
 800458a:	4630      	mov	r0, r6
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	f001 fbf0 	bl	8005d72 <__malloc_unlock>
 8004592:	e7e4      	b.n	800455e <_malloc_r+0x1e>
 8004594:	680b      	ldr	r3, [r1, #0]
 8004596:	1b5b      	subs	r3, r3, r5
 8004598:	d418      	bmi.n	80045cc <_malloc_r+0x8c>
 800459a:	2b0b      	cmp	r3, #11
 800459c:	d90f      	bls.n	80045be <_malloc_r+0x7e>
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	18cc      	adds	r4, r1, r3
 80045a2:	50cd      	str	r5, [r1, r3]
 80045a4:	4630      	mov	r0, r6
 80045a6:	f001 fbe4 	bl	8005d72 <__malloc_unlock>
 80045aa:	f104 000b 	add.w	r0, r4, #11
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	f020 0007 	bic.w	r0, r0, #7
 80045b4:	1ac3      	subs	r3, r0, r3
 80045b6:	d0d3      	beq.n	8004560 <_malloc_r+0x20>
 80045b8:	425a      	negs	r2, r3
 80045ba:	50e2      	str	r2, [r4, r3]
 80045bc:	e7d0      	b.n	8004560 <_malloc_r+0x20>
 80045be:	684b      	ldr	r3, [r1, #4]
 80045c0:	428c      	cmp	r4, r1
 80045c2:	bf16      	itet	ne
 80045c4:	6063      	strne	r3, [r4, #4]
 80045c6:	6013      	streq	r3, [r2, #0]
 80045c8:	460c      	movne	r4, r1
 80045ca:	e7eb      	b.n	80045a4 <_malloc_r+0x64>
 80045cc:	460c      	mov	r4, r1
 80045ce:	6849      	ldr	r1, [r1, #4]
 80045d0:	e7cc      	b.n	800456c <_malloc_r+0x2c>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d005      	beq.n	80045e8 <_malloc_r+0xa8>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 fc58 	bl	8004e94 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d0cf      	beq.n	8004588 <_malloc_r+0x48>
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	e7db      	b.n	80045a4 <_malloc_r+0x64>
 80045ec:	200002e8 	.word	0x200002e8
 80045f0:	200002ec 	.word	0x200002ec

080045f4 <__cvt>:
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fa:	461e      	mov	r6, r3
 80045fc:	bfbb      	ittet	lt
 80045fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004602:	461e      	movlt	r6, r3
 8004604:	2300      	movge	r3, #0
 8004606:	232d      	movlt	r3, #45	; 0x2d
 8004608:	b088      	sub	sp, #32
 800460a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800460c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004610:	f027 0720 	bic.w	r7, r7, #32
 8004614:	2f46      	cmp	r7, #70	; 0x46
 8004616:	4614      	mov	r4, r2
 8004618:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800461a:	700b      	strb	r3, [r1, #0]
 800461c:	d004      	beq.n	8004628 <__cvt+0x34>
 800461e:	2f45      	cmp	r7, #69	; 0x45
 8004620:	d100      	bne.n	8004624 <__cvt+0x30>
 8004622:	3501      	adds	r5, #1
 8004624:	2302      	movs	r3, #2
 8004626:	e000      	b.n	800462a <__cvt+0x36>
 8004628:	2303      	movs	r3, #3
 800462a:	aa07      	add	r2, sp, #28
 800462c:	9204      	str	r2, [sp, #16]
 800462e:	aa06      	add	r2, sp, #24
 8004630:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004634:	e9cd 3500 	strd	r3, r5, [sp]
 8004638:	4622      	mov	r2, r4
 800463a:	4633      	mov	r3, r6
 800463c:	f000 fdc0 	bl	80051c0 <_dtoa_r>
 8004640:	2f47      	cmp	r7, #71	; 0x47
 8004642:	4680      	mov	r8, r0
 8004644:	d102      	bne.n	800464c <__cvt+0x58>
 8004646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004648:	07db      	lsls	r3, r3, #31
 800464a:	d526      	bpl.n	800469a <__cvt+0xa6>
 800464c:	2f46      	cmp	r7, #70	; 0x46
 800464e:	eb08 0905 	add.w	r9, r8, r5
 8004652:	d111      	bne.n	8004678 <__cvt+0x84>
 8004654:	f898 3000 	ldrb.w	r3, [r8]
 8004658:	2b30      	cmp	r3, #48	; 0x30
 800465a:	d10a      	bne.n	8004672 <__cvt+0x7e>
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	4620      	mov	r0, r4
 8004662:	4631      	mov	r1, r6
 8004664:	f7fc f9a0 	bl	80009a8 <__aeabi_dcmpeq>
 8004668:	b918      	cbnz	r0, 8004672 <__cvt+0x7e>
 800466a:	f1c5 0501 	rsb	r5, r5, #1
 800466e:	f8ca 5000 	str.w	r5, [sl]
 8004672:	f8da 3000 	ldr.w	r3, [sl]
 8004676:	4499      	add	r9, r3
 8004678:	2200      	movs	r2, #0
 800467a:	2300      	movs	r3, #0
 800467c:	4620      	mov	r0, r4
 800467e:	4631      	mov	r1, r6
 8004680:	f7fc f992 	bl	80009a8 <__aeabi_dcmpeq>
 8004684:	b938      	cbnz	r0, 8004696 <__cvt+0xa2>
 8004686:	2230      	movs	r2, #48	; 0x30
 8004688:	9b07      	ldr	r3, [sp, #28]
 800468a:	454b      	cmp	r3, r9
 800468c:	d205      	bcs.n	800469a <__cvt+0xa6>
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	9107      	str	r1, [sp, #28]
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e7f8      	b.n	8004688 <__cvt+0x94>
 8004696:	f8cd 901c 	str.w	r9, [sp, #28]
 800469a:	4640      	mov	r0, r8
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046a0:	eba3 0308 	sub.w	r3, r3, r8
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	b008      	add	sp, #32
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046ac <__exponent>:
 80046ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ae:	2900      	cmp	r1, #0
 80046b0:	bfb4      	ite	lt
 80046b2:	232d      	movlt	r3, #45	; 0x2d
 80046b4:	232b      	movge	r3, #43	; 0x2b
 80046b6:	4604      	mov	r4, r0
 80046b8:	bfb8      	it	lt
 80046ba:	4249      	neglt	r1, r1
 80046bc:	2909      	cmp	r1, #9
 80046be:	f804 2b02 	strb.w	r2, [r4], #2
 80046c2:	7043      	strb	r3, [r0, #1]
 80046c4:	dd21      	ble.n	800470a <__exponent+0x5e>
 80046c6:	f10d 0307 	add.w	r3, sp, #7
 80046ca:	461f      	mov	r7, r3
 80046cc:	260a      	movs	r6, #10
 80046ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80046d2:	fb06 1115 	mls	r1, r6, r5, r1
 80046d6:	2d09      	cmp	r5, #9
 80046d8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80046dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046e0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80046e4:	4629      	mov	r1, r5
 80046e6:	dc09      	bgt.n	80046fc <__exponent+0x50>
 80046e8:	3130      	adds	r1, #48	; 0x30
 80046ea:	3b02      	subs	r3, #2
 80046ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046f0:	42bb      	cmp	r3, r7
 80046f2:	4622      	mov	r2, r4
 80046f4:	d304      	bcc.n	8004700 <__exponent+0x54>
 80046f6:	1a10      	subs	r0, r2, r0
 80046f8:	b003      	add	sp, #12
 80046fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fc:	4613      	mov	r3, r2
 80046fe:	e7e6      	b.n	80046ce <__exponent+0x22>
 8004700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004704:	f804 2b01 	strb.w	r2, [r4], #1
 8004708:	e7f2      	b.n	80046f0 <__exponent+0x44>
 800470a:	2330      	movs	r3, #48	; 0x30
 800470c:	4419      	add	r1, r3
 800470e:	7083      	strb	r3, [r0, #2]
 8004710:	1d02      	adds	r2, r0, #4
 8004712:	70c1      	strb	r1, [r0, #3]
 8004714:	e7ef      	b.n	80046f6 <__exponent+0x4a>
	...

08004718 <_printf_float>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	b091      	sub	sp, #68	; 0x44
 800471e:	460c      	mov	r4, r1
 8004720:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004722:	4693      	mov	fp, r2
 8004724:	461e      	mov	r6, r3
 8004726:	4605      	mov	r5, r0
 8004728:	f001 fb02 	bl	8005d30 <_localeconv_r>
 800472c:	6803      	ldr	r3, [r0, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	9309      	str	r3, [sp, #36]	; 0x24
 8004732:	f7fb fd0d 	bl	8000150 <strlen>
 8004736:	2300      	movs	r3, #0
 8004738:	930e      	str	r3, [sp, #56]	; 0x38
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	900a      	str	r0, [sp, #40]	; 0x28
 800473e:	3307      	adds	r3, #7
 8004740:	f023 0307 	bic.w	r3, r3, #7
 8004744:	f103 0208 	add.w	r2, r3, #8
 8004748:	f894 8018 	ldrb.w	r8, [r4, #24]
 800474c:	f8d4 a000 	ldr.w	sl, [r4]
 8004750:	603a      	str	r2, [r7, #0]
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800475a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800475e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004762:	930b      	str	r3, [sp, #44]	; 0x2c
 8004764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004768:	4ba6      	ldr	r3, [pc, #664]	; (8004a04 <_printf_float+0x2ec>)
 800476a:	4638      	mov	r0, r7
 800476c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800476e:	f7fc f94d 	bl	8000a0c <__aeabi_dcmpun>
 8004772:	bb68      	cbnz	r0, 80047d0 <_printf_float+0xb8>
 8004774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004778:	4ba2      	ldr	r3, [pc, #648]	; (8004a04 <_printf_float+0x2ec>)
 800477a:	4638      	mov	r0, r7
 800477c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800477e:	f7fc f927 	bl	80009d0 <__aeabi_dcmple>
 8004782:	bb28      	cbnz	r0, 80047d0 <_printf_float+0xb8>
 8004784:	2200      	movs	r2, #0
 8004786:	2300      	movs	r3, #0
 8004788:	4638      	mov	r0, r7
 800478a:	4649      	mov	r1, r9
 800478c:	f7fc f916 	bl	80009bc <__aeabi_dcmplt>
 8004790:	b110      	cbz	r0, 8004798 <_printf_float+0x80>
 8004792:	232d      	movs	r3, #45	; 0x2d
 8004794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004798:	4f9b      	ldr	r7, [pc, #620]	; (8004a08 <_printf_float+0x2f0>)
 800479a:	4b9c      	ldr	r3, [pc, #624]	; (8004a0c <_printf_float+0x2f4>)
 800479c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047a0:	bf98      	it	ls
 80047a2:	461f      	movls	r7, r3
 80047a4:	2303      	movs	r3, #3
 80047a6:	f04f 0900 	mov.w	r9, #0
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	f02a 0304 	bic.w	r3, sl, #4
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	9600      	str	r6, [sp, #0]
 80047b4:	465b      	mov	r3, fp
 80047b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 f9e2 	bl	8004b84 <_printf_common>
 80047c0:	3001      	adds	r0, #1
 80047c2:	f040 8090 	bne.w	80048e6 <_printf_float+0x1ce>
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ca:	b011      	add	sp, #68	; 0x44
 80047cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d0:	463a      	mov	r2, r7
 80047d2:	464b      	mov	r3, r9
 80047d4:	4638      	mov	r0, r7
 80047d6:	4649      	mov	r1, r9
 80047d8:	f7fc f918 	bl	8000a0c <__aeabi_dcmpun>
 80047dc:	b110      	cbz	r0, 80047e4 <_printf_float+0xcc>
 80047de:	4f8c      	ldr	r7, [pc, #560]	; (8004a10 <_printf_float+0x2f8>)
 80047e0:	4b8c      	ldr	r3, [pc, #560]	; (8004a14 <_printf_float+0x2fc>)
 80047e2:	e7db      	b.n	800479c <_printf_float+0x84>
 80047e4:	6863      	ldr	r3, [r4, #4]
 80047e6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	a80d      	add	r0, sp, #52	; 0x34
 80047ee:	a90e      	add	r1, sp, #56	; 0x38
 80047f0:	d140      	bne.n	8004874 <_printf_float+0x15c>
 80047f2:	2306      	movs	r3, #6
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	f04f 0c00 	mov.w	ip, #0
 80047fa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80047fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004802:	6863      	ldr	r3, [r4, #4]
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	463a      	mov	r2, r7
 800480e:	464b      	mov	r3, r9
 8004810:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004814:	4628      	mov	r0, r5
 8004816:	f7ff feed 	bl	80045f4 <__cvt>
 800481a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800481e:	2b47      	cmp	r3, #71	; 0x47
 8004820:	4607      	mov	r7, r0
 8004822:	d109      	bne.n	8004838 <_printf_float+0x120>
 8004824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004826:	1cd8      	adds	r0, r3, #3
 8004828:	db02      	blt.n	8004830 <_printf_float+0x118>
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	4293      	cmp	r3, r2
 800482e:	dd47      	ble.n	80048c0 <_printf_float+0x1a8>
 8004830:	f1a8 0802 	sub.w	r8, r8, #2
 8004834:	fa5f f888 	uxtb.w	r8, r8
 8004838:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800483c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800483e:	d824      	bhi.n	800488a <_printf_float+0x172>
 8004840:	3901      	subs	r1, #1
 8004842:	4642      	mov	r2, r8
 8004844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004848:	910d      	str	r1, [sp, #52]	; 0x34
 800484a:	f7ff ff2f 	bl	80046ac <__exponent>
 800484e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004850:	4681      	mov	r9, r0
 8004852:	1813      	adds	r3, r2, r0
 8004854:	2a01      	cmp	r2, #1
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	dc02      	bgt.n	8004860 <_printf_float+0x148>
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	07d1      	lsls	r1, r2, #31
 800485e:	d501      	bpl.n	8004864 <_printf_float+0x14c>
 8004860:	3301      	adds	r3, #1
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0a2      	beq.n	80047b2 <_printf_float+0x9a>
 800486c:	232d      	movs	r3, #45	; 0x2d
 800486e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004872:	e79e      	b.n	80047b2 <_printf_float+0x9a>
 8004874:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004878:	f000 816e 	beq.w	8004b58 <_printf_float+0x440>
 800487c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004880:	d1b9      	bne.n	80047f6 <_printf_float+0xde>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1b7      	bne.n	80047f6 <_printf_float+0xde>
 8004886:	2301      	movs	r3, #1
 8004888:	e7b4      	b.n	80047f4 <_printf_float+0xdc>
 800488a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800488e:	d119      	bne.n	80048c4 <_printf_float+0x1ac>
 8004890:	2900      	cmp	r1, #0
 8004892:	6863      	ldr	r3, [r4, #4]
 8004894:	dd0c      	ble.n	80048b0 <_printf_float+0x198>
 8004896:	6121      	str	r1, [r4, #16]
 8004898:	b913      	cbnz	r3, 80048a0 <_printf_float+0x188>
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	07d2      	lsls	r2, r2, #31
 800489e:	d502      	bpl.n	80048a6 <_printf_float+0x18e>
 80048a0:	3301      	adds	r3, #1
 80048a2:	440b      	add	r3, r1
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048a8:	f04f 0900 	mov.w	r9, #0
 80048ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80048ae:	e7d9      	b.n	8004864 <_printf_float+0x14c>
 80048b0:	b913      	cbnz	r3, 80048b8 <_printf_float+0x1a0>
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	07d0      	lsls	r0, r2, #31
 80048b6:	d501      	bpl.n	80048bc <_printf_float+0x1a4>
 80048b8:	3302      	adds	r3, #2
 80048ba:	e7f3      	b.n	80048a4 <_printf_float+0x18c>
 80048bc:	2301      	movs	r3, #1
 80048be:	e7f1      	b.n	80048a4 <_printf_float+0x18c>
 80048c0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80048c4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80048c8:	4293      	cmp	r3, r2
 80048ca:	db05      	blt.n	80048d8 <_printf_float+0x1c0>
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	6123      	str	r3, [r4, #16]
 80048d0:	07d1      	lsls	r1, r2, #31
 80048d2:	d5e8      	bpl.n	80048a6 <_printf_float+0x18e>
 80048d4:	3301      	adds	r3, #1
 80048d6:	e7e5      	b.n	80048a4 <_printf_float+0x18c>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfcc      	ite	gt
 80048dc:	2301      	movgt	r3, #1
 80048de:	f1c3 0302 	rsble	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	e7de      	b.n	80048a4 <_printf_float+0x18c>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	055a      	lsls	r2, r3, #21
 80048ea:	d407      	bmi.n	80048fc <_printf_float+0x1e4>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	463a      	mov	r2, r7
 80048f0:	4659      	mov	r1, fp
 80048f2:	4628      	mov	r0, r5
 80048f4:	47b0      	blx	r6
 80048f6:	3001      	adds	r0, #1
 80048f8:	d129      	bne.n	800494e <_printf_float+0x236>
 80048fa:	e764      	b.n	80047c6 <_printf_float+0xae>
 80048fc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004900:	f240 80d7 	bls.w	8004ab2 <_printf_float+0x39a>
 8004904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004908:	2200      	movs	r2, #0
 800490a:	2300      	movs	r3, #0
 800490c:	f7fc f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8004910:	b388      	cbz	r0, 8004976 <_printf_float+0x25e>
 8004912:	2301      	movs	r3, #1
 8004914:	4a40      	ldr	r2, [pc, #256]	; (8004a18 <_printf_float+0x300>)
 8004916:	4659      	mov	r1, fp
 8004918:	4628      	mov	r0, r5
 800491a:	47b0      	blx	r6
 800491c:	3001      	adds	r0, #1
 800491e:	f43f af52 	beq.w	80047c6 <_printf_float+0xae>
 8004922:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004926:	429a      	cmp	r2, r3
 8004928:	db02      	blt.n	8004930 <_printf_float+0x218>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	07d8      	lsls	r0, r3, #31
 800492e:	d50e      	bpl.n	800494e <_printf_float+0x236>
 8004930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004934:	4659      	mov	r1, fp
 8004936:	4628      	mov	r0, r5
 8004938:	47b0      	blx	r6
 800493a:	3001      	adds	r0, #1
 800493c:	f43f af43 	beq.w	80047c6 <_printf_float+0xae>
 8004940:	2700      	movs	r7, #0
 8004942:	f104 081a 	add.w	r8, r4, #26
 8004946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004948:	3b01      	subs	r3, #1
 800494a:	42bb      	cmp	r3, r7
 800494c:	dc09      	bgt.n	8004962 <_printf_float+0x24a>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	079f      	lsls	r7, r3, #30
 8004952:	f100 80fd 	bmi.w	8004b50 <_printf_float+0x438>
 8004956:	68e0      	ldr	r0, [r4, #12]
 8004958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800495a:	4298      	cmp	r0, r3
 800495c:	bfb8      	it	lt
 800495e:	4618      	movlt	r0, r3
 8004960:	e733      	b.n	80047ca <_printf_float+0xb2>
 8004962:	2301      	movs	r3, #1
 8004964:	4642      	mov	r2, r8
 8004966:	4659      	mov	r1, fp
 8004968:	4628      	mov	r0, r5
 800496a:	47b0      	blx	r6
 800496c:	3001      	adds	r0, #1
 800496e:	f43f af2a 	beq.w	80047c6 <_printf_float+0xae>
 8004972:	3701      	adds	r7, #1
 8004974:	e7e7      	b.n	8004946 <_printf_float+0x22e>
 8004976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	dc2b      	bgt.n	80049d4 <_printf_float+0x2bc>
 800497c:	2301      	movs	r3, #1
 800497e:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <_printf_float+0x300>)
 8004980:	4659      	mov	r1, fp
 8004982:	4628      	mov	r0, r5
 8004984:	47b0      	blx	r6
 8004986:	3001      	adds	r0, #1
 8004988:	f43f af1d 	beq.w	80047c6 <_printf_float+0xae>
 800498c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800498e:	b923      	cbnz	r3, 800499a <_printf_float+0x282>
 8004990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004992:	b913      	cbnz	r3, 800499a <_printf_float+0x282>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	07d9      	lsls	r1, r3, #31
 8004998:	d5d9      	bpl.n	800494e <_printf_float+0x236>
 800499a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800499e:	4659      	mov	r1, fp
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	3001      	adds	r0, #1
 80049a6:	f43f af0e 	beq.w	80047c6 <_printf_float+0xae>
 80049aa:	f04f 0800 	mov.w	r8, #0
 80049ae:	f104 091a 	add.w	r9, r4, #26
 80049b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049b4:	425b      	negs	r3, r3
 80049b6:	4543      	cmp	r3, r8
 80049b8:	dc01      	bgt.n	80049be <_printf_float+0x2a6>
 80049ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049bc:	e797      	b.n	80048ee <_printf_float+0x1d6>
 80049be:	2301      	movs	r3, #1
 80049c0:	464a      	mov	r2, r9
 80049c2:	4659      	mov	r1, fp
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b0      	blx	r6
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f aefc 	beq.w	80047c6 <_printf_float+0xae>
 80049ce:	f108 0801 	add.w	r8, r8, #1
 80049d2:	e7ee      	b.n	80049b2 <_printf_float+0x29a>
 80049d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049d8:	429a      	cmp	r2, r3
 80049da:	bfa8      	it	ge
 80049dc:	461a      	movge	r2, r3
 80049de:	2a00      	cmp	r2, #0
 80049e0:	4690      	mov	r8, r2
 80049e2:	dd07      	ble.n	80049f4 <_printf_float+0x2dc>
 80049e4:	4613      	mov	r3, r2
 80049e6:	4659      	mov	r1, fp
 80049e8:	463a      	mov	r2, r7
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b0      	blx	r6
 80049ee:	3001      	adds	r0, #1
 80049f0:	f43f aee9 	beq.w	80047c6 <_printf_float+0xae>
 80049f4:	f104 031a 	add.w	r3, r4, #26
 80049f8:	f04f 0a00 	mov.w	sl, #0
 80049fc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004a00:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a02:	e015      	b.n	8004a30 <_printf_float+0x318>
 8004a04:	7fefffff 	.word	0x7fefffff
 8004a08:	080066d4 	.word	0x080066d4
 8004a0c:	080066d0 	.word	0x080066d0
 8004a10:	080066dc 	.word	0x080066dc
 8004a14:	080066d8 	.word	0x080066d8
 8004a18:	080066e0 	.word	0x080066e0
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a20:	4659      	mov	r1, fp
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b0      	blx	r6
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f aecd 	beq.w	80047c6 <_printf_float+0xae>
 8004a2c:	f10a 0a01 	add.w	sl, sl, #1
 8004a30:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004a34:	eba9 0308 	sub.w	r3, r9, r8
 8004a38:	4553      	cmp	r3, sl
 8004a3a:	dcef      	bgt.n	8004a1c <_printf_float+0x304>
 8004a3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a40:	429a      	cmp	r2, r3
 8004a42:	444f      	add	r7, r9
 8004a44:	db14      	blt.n	8004a70 <_printf_float+0x358>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	07da      	lsls	r2, r3, #31
 8004a4a:	d411      	bmi.n	8004a70 <_printf_float+0x358>
 8004a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a50:	eba3 0209 	sub.w	r2, r3, r9
 8004a54:	eba3 0901 	sub.w	r9, r3, r1
 8004a58:	4591      	cmp	r9, r2
 8004a5a:	bfa8      	it	ge
 8004a5c:	4691      	movge	r9, r2
 8004a5e:	f1b9 0f00 	cmp.w	r9, #0
 8004a62:	dc0d      	bgt.n	8004a80 <_printf_float+0x368>
 8004a64:	2700      	movs	r7, #0
 8004a66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a6a:	f104 081a 	add.w	r8, r4, #26
 8004a6e:	e018      	b.n	8004aa2 <_printf_float+0x38a>
 8004a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a74:	4659      	mov	r1, fp
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b0      	blx	r6
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d1e6      	bne.n	8004a4c <_printf_float+0x334>
 8004a7e:	e6a2      	b.n	80047c6 <_printf_float+0xae>
 8004a80:	464b      	mov	r3, r9
 8004a82:	463a      	mov	r2, r7
 8004a84:	4659      	mov	r1, fp
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b0      	blx	r6
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d1ea      	bne.n	8004a64 <_printf_float+0x34c>
 8004a8e:	e69a      	b.n	80047c6 <_printf_float+0xae>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4642      	mov	r2, r8
 8004a94:	4659      	mov	r1, fp
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b0      	blx	r6
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f ae93 	beq.w	80047c6 <_printf_float+0xae>
 8004aa0:	3701      	adds	r7, #1
 8004aa2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	eba3 0309 	sub.w	r3, r3, r9
 8004aac:	42bb      	cmp	r3, r7
 8004aae:	dcef      	bgt.n	8004a90 <_printf_float+0x378>
 8004ab0:	e74d      	b.n	800494e <_printf_float+0x236>
 8004ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ab4:	2a01      	cmp	r2, #1
 8004ab6:	dc01      	bgt.n	8004abc <_printf_float+0x3a4>
 8004ab8:	07db      	lsls	r3, r3, #31
 8004aba:	d538      	bpl.n	8004b2e <_printf_float+0x416>
 8004abc:	2301      	movs	r3, #1
 8004abe:	463a      	mov	r2, r7
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b0      	blx	r6
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f ae7d 	beq.w	80047c6 <_printf_float+0xae>
 8004acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b0      	blx	r6
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f107 0701 	add.w	r7, r7, #1
 8004adc:	f43f ae73 	beq.w	80047c6 <_printf_float+0xae>
 8004ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004aec:	2300      	movs	r3, #0
 8004aee:	f7fb ff5b 	bl	80009a8 <__aeabi_dcmpeq>
 8004af2:	b9c0      	cbnz	r0, 8004b26 <_printf_float+0x40e>
 8004af4:	4643      	mov	r3, r8
 8004af6:	463a      	mov	r2, r7
 8004af8:	4659      	mov	r1, fp
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b0      	blx	r6
 8004afe:	3001      	adds	r0, #1
 8004b00:	d10d      	bne.n	8004b1e <_printf_float+0x406>
 8004b02:	e660      	b.n	80047c6 <_printf_float+0xae>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4642      	mov	r2, r8
 8004b08:	4659      	mov	r1, fp
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b0      	blx	r6
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f ae59 	beq.w	80047c6 <_printf_float+0xae>
 8004b14:	3701      	adds	r7, #1
 8004b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	42bb      	cmp	r3, r7
 8004b1c:	dcf2      	bgt.n	8004b04 <_printf_float+0x3ec>
 8004b1e:	464b      	mov	r3, r9
 8004b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b24:	e6e4      	b.n	80048f0 <_printf_float+0x1d8>
 8004b26:	2700      	movs	r7, #0
 8004b28:	f104 081a 	add.w	r8, r4, #26
 8004b2c:	e7f3      	b.n	8004b16 <_printf_float+0x3fe>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e7e1      	b.n	8004af6 <_printf_float+0x3de>
 8004b32:	2301      	movs	r3, #1
 8004b34:	4642      	mov	r2, r8
 8004b36:	4659      	mov	r1, fp
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b0      	blx	r6
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	f43f ae42 	beq.w	80047c6 <_printf_float+0xae>
 8004b42:	3701      	adds	r7, #1
 8004b44:	68e3      	ldr	r3, [r4, #12]
 8004b46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	42bb      	cmp	r3, r7
 8004b4c:	dcf1      	bgt.n	8004b32 <_printf_float+0x41a>
 8004b4e:	e702      	b.n	8004956 <_printf_float+0x23e>
 8004b50:	2700      	movs	r7, #0
 8004b52:	f104 0819 	add.w	r8, r4, #25
 8004b56:	e7f5      	b.n	8004b44 <_printf_float+0x42c>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f43f ae94 	beq.w	8004886 <_printf_float+0x16e>
 8004b5e:	f04f 0c00 	mov.w	ip, #0
 8004b62:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b66:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004b6a:	6022      	str	r2, [r4, #0]
 8004b6c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b70:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	463a      	mov	r2, r7
 8004b78:	464b      	mov	r3, r9
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7ff fd3a 	bl	80045f4 <__cvt>
 8004b80:	4607      	mov	r7, r0
 8004b82:	e64f      	b.n	8004824 <_printf_float+0x10c>

08004b84 <_printf_common>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	4691      	mov	r9, r2
 8004b8a:	461f      	mov	r7, r3
 8004b8c:	688a      	ldr	r2, [r1, #8]
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	4606      	mov	r6, r0
 8004b92:	4293      	cmp	r3, r2
 8004b94:	bfb8      	it	lt
 8004b96:	4613      	movlt	r3, r2
 8004b98:	f8c9 3000 	str.w	r3, [r9]
 8004b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba6:	b112      	cbz	r2, 8004bae <_printf_common+0x2a>
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f8c9 3000 	str.w	r3, [r9]
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	0699      	lsls	r1, r3, #26
 8004bb2:	bf42      	ittt	mi
 8004bb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bb8:	3302      	addmi	r3, #2
 8004bba:	f8c9 3000 	strmi.w	r3, [r9]
 8004bbe:	6825      	ldr	r5, [r4, #0]
 8004bc0:	f015 0506 	ands.w	r5, r5, #6
 8004bc4:	d107      	bne.n	8004bd6 <_printf_common+0x52>
 8004bc6:	f104 0a19 	add.w	sl, r4, #25
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	f8d9 2000 	ldr.w	r2, [r9]
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	42ab      	cmp	r3, r5
 8004bd4:	dc29      	bgt.n	8004c2a <_printf_common+0xa6>
 8004bd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	3300      	adds	r3, #0
 8004bde:	bf18      	it	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	0692      	lsls	r2, r2, #26
 8004be4:	d42e      	bmi.n	8004c44 <_printf_common+0xc0>
 8004be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bea:	4639      	mov	r1, r7
 8004bec:	4630      	mov	r0, r6
 8004bee:	47c0      	blx	r8
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d021      	beq.n	8004c38 <_printf_common+0xb4>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	68e5      	ldr	r5, [r4, #12]
 8004bf8:	f003 0306 	and.w	r3, r3, #6
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	bf18      	it	ne
 8004c00:	2500      	movne	r5, #0
 8004c02:	f8d9 2000 	ldr.w	r2, [r9]
 8004c06:	f04f 0900 	mov.w	r9, #0
 8004c0a:	bf08      	it	eq
 8004c0c:	1aad      	subeq	r5, r5, r2
 8004c0e:	68a3      	ldr	r3, [r4, #8]
 8004c10:	6922      	ldr	r2, [r4, #16]
 8004c12:	bf08      	it	eq
 8004c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	bfc4      	itt	gt
 8004c1c:	1a9b      	subgt	r3, r3, r2
 8004c1e:	18ed      	addgt	r5, r5, r3
 8004c20:	341a      	adds	r4, #26
 8004c22:	454d      	cmp	r5, r9
 8004c24:	d11a      	bne.n	8004c5c <_printf_common+0xd8>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e008      	b.n	8004c3c <_printf_common+0xb8>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4630      	mov	r0, r6
 8004c32:	47c0      	blx	r8
 8004c34:	3001      	adds	r0, #1
 8004c36:	d103      	bne.n	8004c40 <_printf_common+0xbc>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c40:	3501      	adds	r5, #1
 8004c42:	e7c2      	b.n	8004bca <_printf_common+0x46>
 8004c44:	2030      	movs	r0, #48	; 0x30
 8004c46:	18e1      	adds	r1, r4, r3
 8004c48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c52:	4422      	add	r2, r4
 8004c54:	3302      	adds	r3, #2
 8004c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c5a:	e7c4      	b.n	8004be6 <_printf_common+0x62>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4622      	mov	r2, r4
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d0e6      	beq.n	8004c38 <_printf_common+0xb4>
 8004c6a:	f109 0901 	add.w	r9, r9, #1
 8004c6e:	e7d8      	b.n	8004c22 <_printf_common+0x9e>

08004c70 <_printf_i>:
 8004c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c78:	460c      	mov	r4, r1
 8004c7a:	7e09      	ldrb	r1, [r1, #24]
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	296e      	cmp	r1, #110	; 0x6e
 8004c80:	4617      	mov	r7, r2
 8004c82:	4606      	mov	r6, r0
 8004c84:	4698      	mov	r8, r3
 8004c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c88:	f000 80b3 	beq.w	8004df2 <_printf_i+0x182>
 8004c8c:	d822      	bhi.n	8004cd4 <_printf_i+0x64>
 8004c8e:	2963      	cmp	r1, #99	; 0x63
 8004c90:	d036      	beq.n	8004d00 <_printf_i+0x90>
 8004c92:	d80a      	bhi.n	8004caa <_printf_i+0x3a>
 8004c94:	2900      	cmp	r1, #0
 8004c96:	f000 80b9 	beq.w	8004e0c <_printf_i+0x19c>
 8004c9a:	2958      	cmp	r1, #88	; 0x58
 8004c9c:	f000 8083 	beq.w	8004da6 <_printf_i+0x136>
 8004ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ca8:	e032      	b.n	8004d10 <_printf_i+0xa0>
 8004caa:	2964      	cmp	r1, #100	; 0x64
 8004cac:	d001      	beq.n	8004cb2 <_printf_i+0x42>
 8004cae:	2969      	cmp	r1, #105	; 0x69
 8004cb0:	d1f6      	bne.n	8004ca0 <_printf_i+0x30>
 8004cb2:	6820      	ldr	r0, [r4, #0]
 8004cb4:	6813      	ldr	r3, [r2, #0]
 8004cb6:	0605      	lsls	r5, r0, #24
 8004cb8:	f103 0104 	add.w	r1, r3, #4
 8004cbc:	d52a      	bpl.n	8004d14 <_printf_i+0xa4>
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da03      	bge.n	8004cce <_printf_i+0x5e>
 8004cc6:	222d      	movs	r2, #45	; 0x2d
 8004cc8:	425b      	negs	r3, r3
 8004cca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cce:	486f      	ldr	r0, [pc, #444]	; (8004e8c <_printf_i+0x21c>)
 8004cd0:	220a      	movs	r2, #10
 8004cd2:	e039      	b.n	8004d48 <_printf_i+0xd8>
 8004cd4:	2973      	cmp	r1, #115	; 0x73
 8004cd6:	f000 809d 	beq.w	8004e14 <_printf_i+0x1a4>
 8004cda:	d808      	bhi.n	8004cee <_printf_i+0x7e>
 8004cdc:	296f      	cmp	r1, #111	; 0x6f
 8004cde:	d020      	beq.n	8004d22 <_printf_i+0xb2>
 8004ce0:	2970      	cmp	r1, #112	; 0x70
 8004ce2:	d1dd      	bne.n	8004ca0 <_printf_i+0x30>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	f043 0320 	orr.w	r3, r3, #32
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	e003      	b.n	8004cf6 <_printf_i+0x86>
 8004cee:	2975      	cmp	r1, #117	; 0x75
 8004cf0:	d017      	beq.n	8004d22 <_printf_i+0xb2>
 8004cf2:	2978      	cmp	r1, #120	; 0x78
 8004cf4:	d1d4      	bne.n	8004ca0 <_printf_i+0x30>
 8004cf6:	2378      	movs	r3, #120	; 0x78
 8004cf8:	4865      	ldr	r0, [pc, #404]	; (8004e90 <_printf_i+0x220>)
 8004cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cfe:	e055      	b.n	8004dac <_printf_i+0x13c>
 8004d00:	6813      	ldr	r3, [r2, #0]
 8004d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d06:	1d19      	adds	r1, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6011      	str	r1, [r2, #0]
 8004d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d10:	2301      	movs	r3, #1
 8004d12:	e08c      	b.n	8004e2e <_printf_i+0x1be>
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d1a:	6011      	str	r1, [r2, #0]
 8004d1c:	bf18      	it	ne
 8004d1e:	b21b      	sxthne	r3, r3
 8004d20:	e7cf      	b.n	8004cc2 <_printf_i+0x52>
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	6825      	ldr	r5, [r4, #0]
 8004d26:	1d18      	adds	r0, r3, #4
 8004d28:	6010      	str	r0, [r2, #0]
 8004d2a:	0628      	lsls	r0, r5, #24
 8004d2c:	d501      	bpl.n	8004d32 <_printf_i+0xc2>
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	e002      	b.n	8004d38 <_printf_i+0xc8>
 8004d32:	0668      	lsls	r0, r5, #25
 8004d34:	d5fb      	bpl.n	8004d2e <_printf_i+0xbe>
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	296f      	cmp	r1, #111	; 0x6f
 8004d3a:	bf14      	ite	ne
 8004d3c:	220a      	movne	r2, #10
 8004d3e:	2208      	moveq	r2, #8
 8004d40:	4852      	ldr	r0, [pc, #328]	; (8004e8c <_printf_i+0x21c>)
 8004d42:	2100      	movs	r1, #0
 8004d44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d48:	6865      	ldr	r5, [r4, #4]
 8004d4a:	2d00      	cmp	r5, #0
 8004d4c:	60a5      	str	r5, [r4, #8]
 8004d4e:	f2c0 8095 	blt.w	8004e7c <_printf_i+0x20c>
 8004d52:	6821      	ldr	r1, [r4, #0]
 8004d54:	f021 0104 	bic.w	r1, r1, #4
 8004d58:	6021      	str	r1, [r4, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d13d      	bne.n	8004dda <_printf_i+0x16a>
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	f040 808e 	bne.w	8004e80 <_printf_i+0x210>
 8004d64:	4665      	mov	r5, ip
 8004d66:	2a08      	cmp	r2, #8
 8004d68:	d10b      	bne.n	8004d82 <_printf_i+0x112>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	07db      	lsls	r3, r3, #31
 8004d6e:	d508      	bpl.n	8004d82 <_printf_i+0x112>
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	bfde      	ittt	le
 8004d78:	2330      	movle	r3, #48	; 0x30
 8004d7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d82:	ebac 0305 	sub.w	r3, ip, r5
 8004d86:	6123      	str	r3, [r4, #16]
 8004d88:	f8cd 8000 	str.w	r8, [sp]
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	aa03      	add	r2, sp, #12
 8004d90:	4621      	mov	r1, r4
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff fef6 	bl	8004b84 <_printf_common>
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d14d      	bne.n	8004e38 <_printf_i+0x1c8>
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004da0:	b005      	add	sp, #20
 8004da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004da6:	4839      	ldr	r0, [pc, #228]	; (8004e8c <_printf_i+0x21c>)
 8004da8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	6821      	ldr	r1, [r4, #0]
 8004db0:	1d1d      	adds	r5, r3, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6015      	str	r5, [r2, #0]
 8004db6:	060a      	lsls	r2, r1, #24
 8004db8:	d50b      	bpl.n	8004dd2 <_printf_i+0x162>
 8004dba:	07ca      	lsls	r2, r1, #31
 8004dbc:	bf44      	itt	mi
 8004dbe:	f041 0120 	orrmi.w	r1, r1, #32
 8004dc2:	6021      	strmi	r1, [r4, #0]
 8004dc4:	b91b      	cbnz	r3, 8004dce <_printf_i+0x15e>
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	f022 0220 	bic.w	r2, r2, #32
 8004dcc:	6022      	str	r2, [r4, #0]
 8004dce:	2210      	movs	r2, #16
 8004dd0:	e7b7      	b.n	8004d42 <_printf_i+0xd2>
 8004dd2:	064d      	lsls	r5, r1, #25
 8004dd4:	bf48      	it	mi
 8004dd6:	b29b      	uxthmi	r3, r3
 8004dd8:	e7ef      	b.n	8004dba <_printf_i+0x14a>
 8004dda:	4665      	mov	r5, ip
 8004ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004de0:	fb02 3311 	mls	r3, r2, r1, r3
 8004de4:	5cc3      	ldrb	r3, [r0, r3]
 8004de6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004dea:	460b      	mov	r3, r1
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d1f5      	bne.n	8004ddc <_printf_i+0x16c>
 8004df0:	e7b9      	b.n	8004d66 <_printf_i+0xf6>
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	1d18      	adds	r0, r3, #4
 8004df8:	6961      	ldr	r1, [r4, #20]
 8004dfa:	6010      	str	r0, [r2, #0]
 8004dfc:	0628      	lsls	r0, r5, #24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	d501      	bpl.n	8004e06 <_printf_i+0x196>
 8004e02:	6019      	str	r1, [r3, #0]
 8004e04:	e002      	b.n	8004e0c <_printf_i+0x19c>
 8004e06:	066a      	lsls	r2, r5, #25
 8004e08:	d5fb      	bpl.n	8004e02 <_printf_i+0x192>
 8004e0a:	8019      	strh	r1, [r3, #0]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4665      	mov	r5, ip
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	e7b9      	b.n	8004d88 <_printf_i+0x118>
 8004e14:	6813      	ldr	r3, [r2, #0]
 8004e16:	1d19      	adds	r1, r3, #4
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	681d      	ldr	r5, [r3, #0]
 8004e1c:	6862      	ldr	r2, [r4, #4]
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4628      	mov	r0, r5
 8004e22:	f7ff fb07 	bl	8004434 <memchr>
 8004e26:	b108      	cbz	r0, 8004e2c <_printf_i+0x1bc>
 8004e28:	1b40      	subs	r0, r0, r5
 8004e2a:	6060      	str	r0, [r4, #4]
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	2300      	movs	r3, #0
 8004e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e36:	e7a7      	b.n	8004d88 <_printf_i+0x118>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	4630      	mov	r0, r6
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d0aa      	beq.n	8004d9c <_printf_i+0x12c>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	079b      	lsls	r3, r3, #30
 8004e4a:	d413      	bmi.n	8004e74 <_printf_i+0x204>
 8004e4c:	68e0      	ldr	r0, [r4, #12]
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	4298      	cmp	r0, r3
 8004e52:	bfb8      	it	lt
 8004e54:	4618      	movlt	r0, r3
 8004e56:	e7a3      	b.n	8004da0 <_printf_i+0x130>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	464a      	mov	r2, r9
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	47c0      	blx	r8
 8004e62:	3001      	adds	r0, #1
 8004e64:	d09a      	beq.n	8004d9c <_printf_i+0x12c>
 8004e66:	3501      	adds	r5, #1
 8004e68:	68e3      	ldr	r3, [r4, #12]
 8004e6a:	9a03      	ldr	r2, [sp, #12]
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	42ab      	cmp	r3, r5
 8004e70:	dcf2      	bgt.n	8004e58 <_printf_i+0x1e8>
 8004e72:	e7eb      	b.n	8004e4c <_printf_i+0x1dc>
 8004e74:	2500      	movs	r5, #0
 8004e76:	f104 0919 	add.w	r9, r4, #25
 8004e7a:	e7f5      	b.n	8004e68 <_printf_i+0x1f8>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ac      	bne.n	8004dda <_printf_i+0x16a>
 8004e80:	7803      	ldrb	r3, [r0, #0]
 8004e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e8a:	e76c      	b.n	8004d66 <_printf_i+0xf6>
 8004e8c:	080066e2 	.word	0x080066e2
 8004e90:	080066f3 	.word	0x080066f3

08004e94 <_sbrk_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	2300      	movs	r3, #0
 8004e98:	4c05      	ldr	r4, [pc, #20]	; (8004eb0 <_sbrk_r+0x1c>)
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	f7fc fe04 	bl	8001aac <_sbrk>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_sbrk_r+0x1a>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_sbrk_r+0x1a>
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	200002f4 	.word	0x200002f4

08004eb4 <_raise_r>:
 8004eb4:	291f      	cmp	r1, #31
 8004eb6:	b538      	push	{r3, r4, r5, lr}
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	d904      	bls.n	8004ec8 <_raise_r+0x14>
 8004ebe:	2316      	movs	r3, #22
 8004ec0:	6003      	str	r3, [r0, #0]
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eca:	b112      	cbz	r2, 8004ed2 <_raise_r+0x1e>
 8004ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ed0:	b94b      	cbnz	r3, 8004ee6 <_raise_r+0x32>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f830 	bl	8004f38 <_getpid_r>
 8004ed8:	462a      	mov	r2, r5
 8004eda:	4601      	mov	r1, r0
 8004edc:	4620      	mov	r0, r4
 8004ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee2:	f000 b817 	b.w	8004f14 <_kill_r>
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d00a      	beq.n	8004f00 <_raise_r+0x4c>
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	d103      	bne.n	8004ef6 <_raise_r+0x42>
 8004eee:	2316      	movs	r3, #22
 8004ef0:	6003      	str	r3, [r0, #0]
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	e7e7      	b.n	8004ec6 <_raise_r+0x12>
 8004ef6:	2400      	movs	r4, #0
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004efe:	4798      	blx	r3
 8004f00:	2000      	movs	r0, #0
 8004f02:	e7e0      	b.n	8004ec6 <_raise_r+0x12>

08004f04 <raise>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <raise+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f7ff bfd3 	b.w	8004eb4 <_raise_r>
 8004f0e:	bf00      	nop
 8004f10:	20000010 	.word	0x20000010

08004f14 <_kill_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	2300      	movs	r3, #0
 8004f18:	4c06      	ldr	r4, [pc, #24]	; (8004f34 <_kill_r+0x20>)
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	f7fc fda8 	bl	8001a76 <_kill>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d102      	bne.n	8004f30 <_kill_r+0x1c>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	b103      	cbz	r3, 8004f30 <_kill_r+0x1c>
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	200002f4 	.word	0x200002f4

08004f38 <_getpid_r>:
 8004f38:	f7fc bd96 	b.w	8001a68 <_getpid>

08004f3c <_strtol_l.isra.0>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4680      	mov	r8, r0
 8004f42:	4689      	mov	r9, r1
 8004f44:	4692      	mov	sl, r2
 8004f46:	461e      	mov	r6, r3
 8004f48:	460f      	mov	r7, r1
 8004f4a:	463d      	mov	r5, r7
 8004f4c:	9808      	ldr	r0, [sp, #32]
 8004f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f52:	f000 fee9 	bl	8005d28 <__locale_ctype_ptr_l>
 8004f56:	4420      	add	r0, r4
 8004f58:	7843      	ldrb	r3, [r0, #1]
 8004f5a:	f013 0308 	ands.w	r3, r3, #8
 8004f5e:	d132      	bne.n	8004fc6 <_strtol_l.isra.0+0x8a>
 8004f60:	2c2d      	cmp	r4, #45	; 0x2d
 8004f62:	d132      	bne.n	8004fca <_strtol_l.isra.0+0x8e>
 8004f64:	2201      	movs	r2, #1
 8004f66:	787c      	ldrb	r4, [r7, #1]
 8004f68:	1cbd      	adds	r5, r7, #2
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	d05d      	beq.n	800502a <_strtol_l.isra.0+0xee>
 8004f6e:	2e10      	cmp	r6, #16
 8004f70:	d109      	bne.n	8004f86 <_strtol_l.isra.0+0x4a>
 8004f72:	2c30      	cmp	r4, #48	; 0x30
 8004f74:	d107      	bne.n	8004f86 <_strtol_l.isra.0+0x4a>
 8004f76:	782b      	ldrb	r3, [r5, #0]
 8004f78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f7c:	2b58      	cmp	r3, #88	; 0x58
 8004f7e:	d14f      	bne.n	8005020 <_strtol_l.isra.0+0xe4>
 8004f80:	2610      	movs	r6, #16
 8004f82:	786c      	ldrb	r4, [r5, #1]
 8004f84:	3502      	adds	r5, #2
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004f8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004f92:	2700      	movs	r7, #0
 8004f94:	fbb1 fcf6 	udiv	ip, r1, r6
 8004f98:	4638      	mov	r0, r7
 8004f9a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004f9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	d817      	bhi.n	8004fd6 <_strtol_l.isra.0+0x9a>
 8004fa6:	461c      	mov	r4, r3
 8004fa8:	42a6      	cmp	r6, r4
 8004faa:	dd23      	ble.n	8004ff4 <_strtol_l.isra.0+0xb8>
 8004fac:	1c7b      	adds	r3, r7, #1
 8004fae:	d007      	beq.n	8004fc0 <_strtol_l.isra.0+0x84>
 8004fb0:	4584      	cmp	ip, r0
 8004fb2:	d31c      	bcc.n	8004fee <_strtol_l.isra.0+0xb2>
 8004fb4:	d101      	bne.n	8004fba <_strtol_l.isra.0+0x7e>
 8004fb6:	45a6      	cmp	lr, r4
 8004fb8:	db19      	blt.n	8004fee <_strtol_l.isra.0+0xb2>
 8004fba:	2701      	movs	r7, #1
 8004fbc:	fb00 4006 	mla	r0, r0, r6, r4
 8004fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fc4:	e7eb      	b.n	8004f9e <_strtol_l.isra.0+0x62>
 8004fc6:	462f      	mov	r7, r5
 8004fc8:	e7bf      	b.n	8004f4a <_strtol_l.isra.0+0xe>
 8004fca:	2c2b      	cmp	r4, #43	; 0x2b
 8004fcc:	bf04      	itt	eq
 8004fce:	1cbd      	addeq	r5, r7, #2
 8004fd0:	787c      	ldrbeq	r4, [r7, #1]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	e7c9      	b.n	8004f6a <_strtol_l.isra.0+0x2e>
 8004fd6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004fda:	2b19      	cmp	r3, #25
 8004fdc:	d801      	bhi.n	8004fe2 <_strtol_l.isra.0+0xa6>
 8004fde:	3c37      	subs	r4, #55	; 0x37
 8004fe0:	e7e2      	b.n	8004fa8 <_strtol_l.isra.0+0x6c>
 8004fe2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004fe6:	2b19      	cmp	r3, #25
 8004fe8:	d804      	bhi.n	8004ff4 <_strtol_l.isra.0+0xb8>
 8004fea:	3c57      	subs	r4, #87	; 0x57
 8004fec:	e7dc      	b.n	8004fa8 <_strtol_l.isra.0+0x6c>
 8004fee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ff2:	e7e5      	b.n	8004fc0 <_strtol_l.isra.0+0x84>
 8004ff4:	1c7b      	adds	r3, r7, #1
 8004ff6:	d108      	bne.n	800500a <_strtol_l.isra.0+0xce>
 8004ff8:	2322      	movs	r3, #34	; 0x22
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	f8c8 3000 	str.w	r3, [r8]
 8005000:	f1ba 0f00 	cmp.w	sl, #0
 8005004:	d107      	bne.n	8005016 <_strtol_l.isra.0+0xda>
 8005006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500a:	b102      	cbz	r2, 800500e <_strtol_l.isra.0+0xd2>
 800500c:	4240      	negs	r0, r0
 800500e:	f1ba 0f00 	cmp.w	sl, #0
 8005012:	d0f8      	beq.n	8005006 <_strtol_l.isra.0+0xca>
 8005014:	b10f      	cbz	r7, 800501a <_strtol_l.isra.0+0xde>
 8005016:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800501a:	f8ca 9000 	str.w	r9, [sl]
 800501e:	e7f2      	b.n	8005006 <_strtol_l.isra.0+0xca>
 8005020:	2430      	movs	r4, #48	; 0x30
 8005022:	2e00      	cmp	r6, #0
 8005024:	d1af      	bne.n	8004f86 <_strtol_l.isra.0+0x4a>
 8005026:	2608      	movs	r6, #8
 8005028:	e7ad      	b.n	8004f86 <_strtol_l.isra.0+0x4a>
 800502a:	2c30      	cmp	r4, #48	; 0x30
 800502c:	d0a3      	beq.n	8004f76 <_strtol_l.isra.0+0x3a>
 800502e:	260a      	movs	r6, #10
 8005030:	e7a9      	b.n	8004f86 <_strtol_l.isra.0+0x4a>
	...

08005034 <strtol>:
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <strtol+0x24>)
 8005036:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005038:	681c      	ldr	r4, [r3, #0]
 800503a:	4d08      	ldr	r5, [pc, #32]	; (800505c <strtol+0x28>)
 800503c:	6a23      	ldr	r3, [r4, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf08      	it	eq
 8005042:	462b      	moveq	r3, r5
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	460a      	mov	r2, r1
 800504a:	4601      	mov	r1, r0
 800504c:	4620      	mov	r0, r4
 800504e:	f7ff ff75 	bl	8004f3c <_strtol_l.isra.0>
 8005052:	b003      	add	sp, #12
 8005054:	bd30      	pop	{r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	20000010 	.word	0x20000010
 800505c:	20000074 	.word	0x20000074

08005060 <_vsiprintf_r>:
 8005060:	b500      	push	{lr}
 8005062:	b09b      	sub	sp, #108	; 0x6c
 8005064:	9100      	str	r1, [sp, #0]
 8005066:	9104      	str	r1, [sp, #16]
 8005068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800506c:	9105      	str	r1, [sp, #20]
 800506e:	9102      	str	r1, [sp, #8]
 8005070:	4905      	ldr	r1, [pc, #20]	; (8005088 <_vsiprintf_r+0x28>)
 8005072:	9103      	str	r1, [sp, #12]
 8005074:	4669      	mov	r1, sp
 8005076:	f001 f9c1 	bl	80063fc <_svfiprintf_r>
 800507a:	2200      	movs	r2, #0
 800507c:	9b00      	ldr	r3, [sp, #0]
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	b01b      	add	sp, #108	; 0x6c
 8005082:	f85d fb04 	ldr.w	pc, [sp], #4
 8005086:	bf00      	nop
 8005088:	ffff0208 	.word	0xffff0208

0800508c <vsiprintf>:
 800508c:	4613      	mov	r3, r2
 800508e:	460a      	mov	r2, r1
 8005090:	4601      	mov	r1, r0
 8005092:	4802      	ldr	r0, [pc, #8]	; (800509c <vsiprintf+0x10>)
 8005094:	6800      	ldr	r0, [r0, #0]
 8005096:	f7ff bfe3 	b.w	8005060 <_vsiprintf_r>
 800509a:	bf00      	nop
 800509c:	20000010 	.word	0x20000010

080050a0 <quorem>:
 80050a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	6903      	ldr	r3, [r0, #16]
 80050a6:	690c      	ldr	r4, [r1, #16]
 80050a8:	4680      	mov	r8, r0
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	f2c0 8084 	blt.w	80051b8 <quorem+0x118>
 80050b0:	3c01      	subs	r4, #1
 80050b2:	f101 0714 	add.w	r7, r1, #20
 80050b6:	f100 0614 	add.w	r6, r0, #20
 80050ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050c2:	3501      	adds	r5, #1
 80050c4:	fbb0 f5f5 	udiv	r5, r0, r5
 80050c8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80050cc:	eb06 030c 	add.w	r3, r6, ip
 80050d0:	eb07 090c 	add.w	r9, r7, ip
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	b39d      	cbz	r5, 8005140 <quorem+0xa0>
 80050d8:	f04f 0a00 	mov.w	sl, #0
 80050dc:	4638      	mov	r0, r7
 80050de:	46b6      	mov	lr, r6
 80050e0:	46d3      	mov	fp, sl
 80050e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80050e6:	b293      	uxth	r3, r2
 80050e8:	fb05 a303 	mla	r3, r5, r3, sl
 80050ec:	0c12      	lsrs	r2, r2, #16
 80050ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050f2:	fb05 a202 	mla	r2, r5, r2, sl
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	ebab 0303 	sub.w	r3, fp, r3
 80050fc:	f8de b000 	ldr.w	fp, [lr]
 8005100:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005104:	fa1f fb8b 	uxth.w	fp, fp
 8005108:	445b      	add	r3, fp
 800510a:	fa1f fb82 	uxth.w	fp, r2
 800510e:	f8de 2000 	ldr.w	r2, [lr]
 8005112:	4581      	cmp	r9, r0
 8005114:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800511c:	b29b      	uxth	r3, r3
 800511e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005122:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005126:	f84e 3b04 	str.w	r3, [lr], #4
 800512a:	d2da      	bcs.n	80050e2 <quorem+0x42>
 800512c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005130:	b933      	cbnz	r3, 8005140 <quorem+0xa0>
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	3b04      	subs	r3, #4
 8005136:	429e      	cmp	r6, r3
 8005138:	461a      	mov	r2, r3
 800513a:	d331      	bcc.n	80051a0 <quorem+0x100>
 800513c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005140:	4640      	mov	r0, r8
 8005142:	f001 f82b 	bl	800619c <__mcmp>
 8005146:	2800      	cmp	r0, #0
 8005148:	db26      	blt.n	8005198 <quorem+0xf8>
 800514a:	4630      	mov	r0, r6
 800514c:	f04f 0c00 	mov.w	ip, #0
 8005150:	3501      	adds	r5, #1
 8005152:	f857 1b04 	ldr.w	r1, [r7], #4
 8005156:	f8d0 e000 	ldr.w	lr, [r0]
 800515a:	b28b      	uxth	r3, r1
 800515c:	ebac 0303 	sub.w	r3, ip, r3
 8005160:	fa1f f28e 	uxth.w	r2, lr
 8005164:	4413      	add	r3, r2
 8005166:	0c0a      	lsrs	r2, r1, #16
 8005168:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800516c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005170:	b29b      	uxth	r3, r3
 8005172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005176:	45b9      	cmp	r9, r7
 8005178:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800517c:	f840 3b04 	str.w	r3, [r0], #4
 8005180:	d2e7      	bcs.n	8005152 <quorem+0xb2>
 8005182:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005186:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800518a:	b92a      	cbnz	r2, 8005198 <quorem+0xf8>
 800518c:	3b04      	subs	r3, #4
 800518e:	429e      	cmp	r6, r3
 8005190:	461a      	mov	r2, r3
 8005192:	d30b      	bcc.n	80051ac <quorem+0x10c>
 8005194:	f8c8 4010 	str.w	r4, [r8, #16]
 8005198:	4628      	mov	r0, r5
 800519a:	b003      	add	sp, #12
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	3b04      	subs	r3, #4
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d1c9      	bne.n	800513c <quorem+0x9c>
 80051a8:	3c01      	subs	r4, #1
 80051aa:	e7c4      	b.n	8005136 <quorem+0x96>
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	3b04      	subs	r3, #4
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d1ef      	bne.n	8005194 <quorem+0xf4>
 80051b4:	3c01      	subs	r4, #1
 80051b6:	e7ea      	b.n	800518e <quorem+0xee>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e7ee      	b.n	800519a <quorem+0xfa>
 80051bc:	0000      	movs	r0, r0
	...

080051c0 <_dtoa_r>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	4616      	mov	r6, r2
 80051c6:	461f      	mov	r7, r3
 80051c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051ca:	b095      	sub	sp, #84	; 0x54
 80051cc:	4604      	mov	r4, r0
 80051ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80051d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80051d6:	b93d      	cbnz	r5, 80051e8 <_dtoa_r+0x28>
 80051d8:	2010      	movs	r0, #16
 80051da:	f7ff f923 	bl	8004424 <malloc>
 80051de:	6260      	str	r0, [r4, #36]	; 0x24
 80051e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051e4:	6005      	str	r5, [r0, #0]
 80051e6:	60c5      	str	r5, [r0, #12]
 80051e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ea:	6819      	ldr	r1, [r3, #0]
 80051ec:	b151      	cbz	r1, 8005204 <_dtoa_r+0x44>
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	2301      	movs	r3, #1
 80051f2:	4093      	lsls	r3, r2
 80051f4:	604a      	str	r2, [r1, #4]
 80051f6:	608b      	str	r3, [r1, #8]
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fdef 	bl	8005ddc <_Bfree>
 80051fe:	2200      	movs	r2, #0
 8005200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	1e3b      	subs	r3, r7, #0
 8005206:	bfaf      	iteee	ge
 8005208:	2300      	movge	r3, #0
 800520a:	2201      	movlt	r2, #1
 800520c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005210:	9303      	strlt	r3, [sp, #12]
 8005212:	bfac      	ite	ge
 8005214:	f8c8 3000 	strge.w	r3, [r8]
 8005218:	f8c8 2000 	strlt.w	r2, [r8]
 800521c:	4bae      	ldr	r3, [pc, #696]	; (80054d8 <_dtoa_r+0x318>)
 800521e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005222:	ea33 0308 	bics.w	r3, r3, r8
 8005226:	d11b      	bne.n	8005260 <_dtoa_r+0xa0>
 8005228:	f242 730f 	movw	r3, #9999	; 0x270f
 800522c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	9b02      	ldr	r3, [sp, #8]
 8005232:	b923      	cbnz	r3, 800523e <_dtoa_r+0x7e>
 8005234:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005238:	2800      	cmp	r0, #0
 800523a:	f000 8545 	beq.w	8005cc8 <_dtoa_r+0xb08>
 800523e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005240:	b953      	cbnz	r3, 8005258 <_dtoa_r+0x98>
 8005242:	4ba6      	ldr	r3, [pc, #664]	; (80054dc <_dtoa_r+0x31c>)
 8005244:	e021      	b.n	800528a <_dtoa_r+0xca>
 8005246:	4ba6      	ldr	r3, [pc, #664]	; (80054e0 <_dtoa_r+0x320>)
 8005248:	9306      	str	r3, [sp, #24]
 800524a:	3308      	adds	r3, #8
 800524c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	9806      	ldr	r0, [sp, #24]
 8005252:	b015      	add	sp, #84	; 0x54
 8005254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005258:	4ba0      	ldr	r3, [pc, #640]	; (80054dc <_dtoa_r+0x31c>)
 800525a:	9306      	str	r3, [sp, #24]
 800525c:	3303      	adds	r3, #3
 800525e:	e7f5      	b.n	800524c <_dtoa_r+0x8c>
 8005260:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	4630      	mov	r0, r6
 800526a:	4639      	mov	r1, r7
 800526c:	f7fb fb9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005270:	4682      	mov	sl, r0
 8005272:	b160      	cbz	r0, 800528e <_dtoa_r+0xce>
 8005274:	2301      	movs	r3, #1
 8005276:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8520 	beq.w	8005cc2 <_dtoa_r+0xb02>
 8005282:	4b98      	ldr	r3, [pc, #608]	; (80054e4 <_dtoa_r+0x324>)
 8005284:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	3b01      	subs	r3, #1
 800528a:	9306      	str	r3, [sp, #24]
 800528c:	e7e0      	b.n	8005250 <_dtoa_r+0x90>
 800528e:	ab12      	add	r3, sp, #72	; 0x48
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	ab13      	add	r3, sp, #76	; 0x4c
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4632      	mov	r2, r6
 8005298:	463b      	mov	r3, r7
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fff6 	bl	800628c <__d2b>
 80052a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80052a4:	4683      	mov	fp, r0
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	d07d      	beq.n	80053a6 <_dtoa_r+0x1e6>
 80052aa:	46b0      	mov	r8, r6
 80052ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80052b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80052b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80052c0:	2200      	movs	r2, #0
 80052c2:	4b89      	ldr	r3, [pc, #548]	; (80054e8 <_dtoa_r+0x328>)
 80052c4:	4640      	mov	r0, r8
 80052c6:	4649      	mov	r1, r9
 80052c8:	f7fa ff4e 	bl	8000168 <__aeabi_dsub>
 80052cc:	a37c      	add	r3, pc, #496	; (adr r3, 80054c0 <_dtoa_r+0x300>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fb f901 	bl	80004d8 <__aeabi_dmul>
 80052d6:	a37c      	add	r3, pc, #496	; (adr r3, 80054c8 <_dtoa_r+0x308>)
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f7fa ff46 	bl	800016c <__adddf3>
 80052e0:	4606      	mov	r6, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	460f      	mov	r7, r1
 80052e6:	f7fb f88d 	bl	8000404 <__aeabi_i2d>
 80052ea:	a379      	add	r3, pc, #484	; (adr r3, 80054d0 <_dtoa_r+0x310>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fb f8f2 	bl	80004d8 <__aeabi_dmul>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fa ff36 	bl	800016c <__adddf3>
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	f7fb fb98 	bl	8000a38 <__aeabi_d2iz>
 8005308:	2200      	movs	r2, #0
 800530a:	4682      	mov	sl, r0
 800530c:	2300      	movs	r3, #0
 800530e:	4630      	mov	r0, r6
 8005310:	4639      	mov	r1, r7
 8005312:	f7fb fb53 	bl	80009bc <__aeabi_dcmplt>
 8005316:	b148      	cbz	r0, 800532c <_dtoa_r+0x16c>
 8005318:	4650      	mov	r0, sl
 800531a:	f7fb f873 	bl	8000404 <__aeabi_i2d>
 800531e:	4632      	mov	r2, r6
 8005320:	463b      	mov	r3, r7
 8005322:	f7fb fb41 	bl	80009a8 <__aeabi_dcmpeq>
 8005326:	b908      	cbnz	r0, 800532c <_dtoa_r+0x16c>
 8005328:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800532c:	f1ba 0f16 	cmp.w	sl, #22
 8005330:	d85a      	bhi.n	80053e8 <_dtoa_r+0x228>
 8005332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005336:	496d      	ldr	r1, [pc, #436]	; (80054ec <_dtoa_r+0x32c>)
 8005338:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800533c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005340:	f7fb fb5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005344:	2800      	cmp	r0, #0
 8005346:	d051      	beq.n	80053ec <_dtoa_r+0x22c>
 8005348:	2300      	movs	r3, #0
 800534a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800534e:	930d      	str	r3, [sp, #52]	; 0x34
 8005350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005352:	1b5d      	subs	r5, r3, r5
 8005354:	1e6b      	subs	r3, r5, #1
 8005356:	9307      	str	r3, [sp, #28]
 8005358:	bf43      	ittte	mi
 800535a:	2300      	movmi	r3, #0
 800535c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005360:	9307      	strmi	r3, [sp, #28]
 8005362:	f04f 0900 	movpl.w	r9, #0
 8005366:	f1ba 0f00 	cmp.w	sl, #0
 800536a:	db41      	blt.n	80053f0 <_dtoa_r+0x230>
 800536c:	9b07      	ldr	r3, [sp, #28]
 800536e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005372:	4453      	add	r3, sl
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	2300      	movs	r3, #0
 8005378:	9308      	str	r3, [sp, #32]
 800537a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800537c:	2b09      	cmp	r3, #9
 800537e:	f200 808f 	bhi.w	80054a0 <_dtoa_r+0x2e0>
 8005382:	2b05      	cmp	r3, #5
 8005384:	bfc4      	itt	gt
 8005386:	3b04      	subgt	r3, #4
 8005388:	931e      	strgt	r3, [sp, #120]	; 0x78
 800538a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800538c:	bfc8      	it	gt
 800538e:	2500      	movgt	r5, #0
 8005390:	f1a3 0302 	sub.w	r3, r3, #2
 8005394:	bfd8      	it	le
 8005396:	2501      	movle	r5, #1
 8005398:	2b03      	cmp	r3, #3
 800539a:	f200 808d 	bhi.w	80054b8 <_dtoa_r+0x2f8>
 800539e:	e8df f003 	tbb	[pc, r3]
 80053a2:	7d7b      	.short	0x7d7b
 80053a4:	6f2f      	.short	0x6f2f
 80053a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80053aa:	441d      	add	r5, r3
 80053ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80053b0:	2820      	cmp	r0, #32
 80053b2:	dd13      	ble.n	80053dc <_dtoa_r+0x21c>
 80053b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80053b8:	9b02      	ldr	r3, [sp, #8]
 80053ba:	fa08 f800 	lsl.w	r8, r8, r0
 80053be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053c2:	fa23 f000 	lsr.w	r0, r3, r0
 80053c6:	ea48 0000 	orr.w	r0, r8, r0
 80053ca:	f7fb f80b 	bl	80003e4 <__aeabi_ui2d>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4680      	mov	r8, r0
 80053d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80053d6:	3d01      	subs	r5, #1
 80053d8:	9310      	str	r3, [sp, #64]	; 0x40
 80053da:	e771      	b.n	80052c0 <_dtoa_r+0x100>
 80053dc:	9b02      	ldr	r3, [sp, #8]
 80053de:	f1c0 0020 	rsb	r0, r0, #32
 80053e2:	fa03 f000 	lsl.w	r0, r3, r0
 80053e6:	e7f0      	b.n	80053ca <_dtoa_r+0x20a>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e7b0      	b.n	800534e <_dtoa_r+0x18e>
 80053ec:	900d      	str	r0, [sp, #52]	; 0x34
 80053ee:	e7af      	b.n	8005350 <_dtoa_r+0x190>
 80053f0:	f1ca 0300 	rsb	r3, sl, #0
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	2300      	movs	r3, #0
 80053f8:	eba9 090a 	sub.w	r9, r9, sl
 80053fc:	930c      	str	r3, [sp, #48]	; 0x30
 80053fe:	e7bc      	b.n	800537a <_dtoa_r+0x1ba>
 8005400:	2301      	movs	r3, #1
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd74      	ble.n	80054f4 <_dtoa_r+0x334>
 800540a:	4698      	mov	r8, r3
 800540c:	9304      	str	r3, [sp, #16]
 800540e:	2200      	movs	r2, #0
 8005410:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005412:	6072      	str	r2, [r6, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	f102 0014 	add.w	r0, r2, #20
 800541a:	4298      	cmp	r0, r3
 800541c:	6871      	ldr	r1, [r6, #4]
 800541e:	d96e      	bls.n	80054fe <_dtoa_r+0x33e>
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fca7 	bl	8005d74 <_Balloc>
 8005426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b8 0f0e 	cmp.w	r8, #14
 8005430:	9306      	str	r3, [sp, #24]
 8005432:	f200 80ed 	bhi.w	8005610 <_dtoa_r+0x450>
 8005436:	2d00      	cmp	r5, #0
 8005438:	f000 80ea 	beq.w	8005610 <_dtoa_r+0x450>
 800543c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005440:	f1ba 0f00 	cmp.w	sl, #0
 8005444:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005448:	dd77      	ble.n	800553a <_dtoa_r+0x37a>
 800544a:	4a28      	ldr	r2, [pc, #160]	; (80054ec <_dtoa_r+0x32c>)
 800544c:	f00a 030f 	and.w	r3, sl, #15
 8005450:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005454:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005458:	06f0      	lsls	r0, r6, #27
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005462:	d568      	bpl.n	8005536 <_dtoa_r+0x376>
 8005464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005468:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <_dtoa_r+0x330>)
 800546a:	2503      	movs	r5, #3
 800546c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005470:	f7fb f95c 	bl	800072c <__aeabi_ddiv>
 8005474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005478:	f006 060f 	and.w	r6, r6, #15
 800547c:	4f1c      	ldr	r7, [pc, #112]	; (80054f0 <_dtoa_r+0x330>)
 800547e:	e04f      	b.n	8005520 <_dtoa_r+0x360>
 8005480:	2301      	movs	r3, #1
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005486:	4453      	add	r3, sl
 8005488:	f103 0801 	add.w	r8, r3, #1
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	4643      	mov	r3, r8
 8005490:	2b01      	cmp	r3, #1
 8005492:	bfb8      	it	lt
 8005494:	2301      	movlt	r3, #1
 8005496:	e7ba      	b.n	800540e <_dtoa_r+0x24e>
 8005498:	2300      	movs	r3, #0
 800549a:	e7b2      	b.n	8005402 <_dtoa_r+0x242>
 800549c:	2300      	movs	r3, #0
 800549e:	e7f0      	b.n	8005482 <_dtoa_r+0x2c2>
 80054a0:	2501      	movs	r5, #1
 80054a2:	2300      	movs	r3, #0
 80054a4:	9509      	str	r5, [sp, #36]	; 0x24
 80054a6:	931e      	str	r3, [sp, #120]	; 0x78
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ac:	2200      	movs	r2, #0
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	4698      	mov	r8, r3
 80054b2:	2312      	movs	r3, #18
 80054b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80054b6:	e7aa      	b.n	800540e <_dtoa_r+0x24e>
 80054b8:	2301      	movs	r3, #1
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	e7f4      	b.n	80054a8 <_dtoa_r+0x2e8>
 80054be:	bf00      	nop
 80054c0:	636f4361 	.word	0x636f4361
 80054c4:	3fd287a7 	.word	0x3fd287a7
 80054c8:	8b60c8b3 	.word	0x8b60c8b3
 80054cc:	3fc68a28 	.word	0x3fc68a28
 80054d0:	509f79fb 	.word	0x509f79fb
 80054d4:	3fd34413 	.word	0x3fd34413
 80054d8:	7ff00000 	.word	0x7ff00000
 80054dc:	0800670d 	.word	0x0800670d
 80054e0:	08006704 	.word	0x08006704
 80054e4:	080066e1 	.word	0x080066e1
 80054e8:	3ff80000 	.word	0x3ff80000
 80054ec:	08006748 	.word	0x08006748
 80054f0:	08006720 	.word	0x08006720
 80054f4:	2301      	movs	r3, #1
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	4698      	mov	r8, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	e7da      	b.n	80054b4 <_dtoa_r+0x2f4>
 80054fe:	3101      	adds	r1, #1
 8005500:	6071      	str	r1, [r6, #4]
 8005502:	0052      	lsls	r2, r2, #1
 8005504:	e787      	b.n	8005416 <_dtoa_r+0x256>
 8005506:	07f1      	lsls	r1, r6, #31
 8005508:	d508      	bpl.n	800551c <_dtoa_r+0x35c>
 800550a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800550e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005512:	f7fa ffe1 	bl	80004d8 <__aeabi_dmul>
 8005516:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800551a:	3501      	adds	r5, #1
 800551c:	1076      	asrs	r6, r6, #1
 800551e:	3708      	adds	r7, #8
 8005520:	2e00      	cmp	r6, #0
 8005522:	d1f0      	bne.n	8005506 <_dtoa_r+0x346>
 8005524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800552c:	f7fb f8fe 	bl	800072c <__aeabi_ddiv>
 8005530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005534:	e01b      	b.n	800556e <_dtoa_r+0x3ae>
 8005536:	2502      	movs	r5, #2
 8005538:	e7a0      	b.n	800547c <_dtoa_r+0x2bc>
 800553a:	f000 80a4 	beq.w	8005686 <_dtoa_r+0x4c6>
 800553e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005542:	f1ca 0600 	rsb	r6, sl, #0
 8005546:	4ba0      	ldr	r3, [pc, #640]	; (80057c8 <_dtoa_r+0x608>)
 8005548:	f006 020f 	and.w	r2, r6, #15
 800554c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa ffc0 	bl	80004d8 <__aeabi_dmul>
 8005558:	2502      	movs	r5, #2
 800555a:	2300      	movs	r3, #0
 800555c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005560:	4f9a      	ldr	r7, [pc, #616]	; (80057cc <_dtoa_r+0x60c>)
 8005562:	1136      	asrs	r6, r6, #4
 8005564:	2e00      	cmp	r6, #0
 8005566:	f040 8083 	bne.w	8005670 <_dtoa_r+0x4b0>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e0      	bne.n	8005530 <_dtoa_r+0x370>
 800556e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 808a 	beq.w	800568a <_dtoa_r+0x4ca>
 8005576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800557a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800557e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005582:	2200      	movs	r2, #0
 8005584:	4b92      	ldr	r3, [pc, #584]	; (80057d0 <_dtoa_r+0x610>)
 8005586:	f7fb fa19 	bl	80009bc <__aeabi_dcmplt>
 800558a:	2800      	cmp	r0, #0
 800558c:	d07d      	beq.n	800568a <_dtoa_r+0x4ca>
 800558e:	f1b8 0f00 	cmp.w	r8, #0
 8005592:	d07a      	beq.n	800568a <_dtoa_r+0x4ca>
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd36      	ble.n	8005608 <_dtoa_r+0x448>
 800559a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800559e:	2200      	movs	r2, #0
 80055a0:	4b8c      	ldr	r3, [pc, #560]	; (80057d4 <_dtoa_r+0x614>)
 80055a2:	f7fa ff99 	bl	80004d8 <__aeabi_dmul>
 80055a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055aa:	9e04      	ldr	r6, [sp, #16]
 80055ac:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80055b0:	3501      	adds	r5, #1
 80055b2:	4628      	mov	r0, r5
 80055b4:	f7fa ff26 	bl	8000404 <__aeabi_i2d>
 80055b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055bc:	f7fa ff8c 	bl	80004d8 <__aeabi_dmul>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4b85      	ldr	r3, [pc, #532]	; (80057d8 <_dtoa_r+0x618>)
 80055c4:	f7fa fdd2 	bl	800016c <__adddf3>
 80055c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80055cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	d15c      	bne.n	8005690 <_dtoa_r+0x4d0>
 80055d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	4b7f      	ldr	r3, [pc, #508]	; (80057dc <_dtoa_r+0x61c>)
 80055de:	f7fa fdc3 	bl	8000168 <__aeabi_dsub>
 80055e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e4:	462b      	mov	r3, r5
 80055e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ea:	f7fb fa05 	bl	80009f8 <__aeabi_dcmpgt>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f040 8281 	bne.w	8005af6 <_dtoa_r+0x936>
 80055f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80055fe:	f7fb f9dd 	bl	80009bc <__aeabi_dcmplt>
 8005602:	2800      	cmp	r0, #0
 8005604:	f040 8275 	bne.w	8005af2 <_dtoa_r+0x932>
 8005608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800560c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005612:	2b00      	cmp	r3, #0
 8005614:	f2c0 814b 	blt.w	80058ae <_dtoa_r+0x6ee>
 8005618:	f1ba 0f0e 	cmp.w	sl, #14
 800561c:	f300 8147 	bgt.w	80058ae <_dtoa_r+0x6ee>
 8005620:	4b69      	ldr	r3, [pc, #420]	; (80057c8 <_dtoa_r+0x608>)
 8005622:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800562e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005630:	2b00      	cmp	r3, #0
 8005632:	f280 80d7 	bge.w	80057e4 <_dtoa_r+0x624>
 8005636:	f1b8 0f00 	cmp.w	r8, #0
 800563a:	f300 80d3 	bgt.w	80057e4 <_dtoa_r+0x624>
 800563e:	f040 8257 	bne.w	8005af0 <_dtoa_r+0x930>
 8005642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005646:	2200      	movs	r2, #0
 8005648:	4b64      	ldr	r3, [pc, #400]	; (80057dc <_dtoa_r+0x61c>)
 800564a:	f7fa ff45 	bl	80004d8 <__aeabi_dmul>
 800564e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005652:	f7fb f9c7 	bl	80009e4 <__aeabi_dcmpge>
 8005656:	4646      	mov	r6, r8
 8005658:	4647      	mov	r7, r8
 800565a:	2800      	cmp	r0, #0
 800565c:	f040 822d 	bne.w	8005aba <_dtoa_r+0x8fa>
 8005660:	9b06      	ldr	r3, [sp, #24]
 8005662:	9a06      	ldr	r2, [sp, #24]
 8005664:	1c5d      	adds	r5, r3, #1
 8005666:	2331      	movs	r3, #49	; 0x31
 8005668:	f10a 0a01 	add.w	sl, sl, #1
 800566c:	7013      	strb	r3, [r2, #0]
 800566e:	e228      	b.n	8005ac2 <_dtoa_r+0x902>
 8005670:	07f2      	lsls	r2, r6, #31
 8005672:	d505      	bpl.n	8005680 <_dtoa_r+0x4c0>
 8005674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005678:	f7fa ff2e 	bl	80004d8 <__aeabi_dmul>
 800567c:	2301      	movs	r3, #1
 800567e:	3501      	adds	r5, #1
 8005680:	1076      	asrs	r6, r6, #1
 8005682:	3708      	adds	r7, #8
 8005684:	e76e      	b.n	8005564 <_dtoa_r+0x3a4>
 8005686:	2502      	movs	r5, #2
 8005688:	e771      	b.n	800556e <_dtoa_r+0x3ae>
 800568a:	4657      	mov	r7, sl
 800568c:	4646      	mov	r6, r8
 800568e:	e790      	b.n	80055b2 <_dtoa_r+0x3f2>
 8005690:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <_dtoa_r+0x608>)
 8005692:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005696:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d048      	beq.n	8005732 <_dtoa_r+0x572>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	2000      	movs	r0, #0
 80056a6:	494e      	ldr	r1, [pc, #312]	; (80057e0 <_dtoa_r+0x620>)
 80056a8:	f7fb f840 	bl	800072c <__aeabi_ddiv>
 80056ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056b0:	f7fa fd5a 	bl	8000168 <__aeabi_dsub>
 80056b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056b8:	9d06      	ldr	r5, [sp, #24]
 80056ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056be:	f7fb f9bb 	bl	8000a38 <__aeabi_d2iz>
 80056c2:	9011      	str	r0, [sp, #68]	; 0x44
 80056c4:	f7fa fe9e 	bl	8000404 <__aeabi_i2d>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d0:	f7fa fd4a 	bl	8000168 <__aeabi_dsub>
 80056d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056da:	3330      	adds	r3, #48	; 0x30
 80056dc:	f805 3b01 	strb.w	r3, [r5], #1
 80056e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056e4:	f7fb f96a 	bl	80009bc <__aeabi_dcmplt>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d163      	bne.n	80057b4 <_dtoa_r+0x5f4>
 80056ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056f0:	2000      	movs	r0, #0
 80056f2:	4937      	ldr	r1, [pc, #220]	; (80057d0 <_dtoa_r+0x610>)
 80056f4:	f7fa fd38 	bl	8000168 <__aeabi_dsub>
 80056f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056fc:	f7fb f95e 	bl	80009bc <__aeabi_dcmplt>
 8005700:	2800      	cmp	r0, #0
 8005702:	f040 80b5 	bne.w	8005870 <_dtoa_r+0x6b0>
 8005706:	9b06      	ldr	r3, [sp, #24]
 8005708:	1aeb      	subs	r3, r5, r3
 800570a:	429e      	cmp	r6, r3
 800570c:	f77f af7c 	ble.w	8005608 <_dtoa_r+0x448>
 8005710:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005714:	2200      	movs	r2, #0
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <_dtoa_r+0x614>)
 8005718:	f7fa fede 	bl	80004d8 <__aeabi_dmul>
 800571c:	2200      	movs	r2, #0
 800571e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005726:	4b2b      	ldr	r3, [pc, #172]	; (80057d4 <_dtoa_r+0x614>)
 8005728:	f7fa fed6 	bl	80004d8 <__aeabi_dmul>
 800572c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005730:	e7c3      	b.n	80056ba <_dtoa_r+0x4fa>
 8005732:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005736:	f7fa fecf 	bl	80004d8 <__aeabi_dmul>
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005740:	199d      	adds	r5, r3, r6
 8005742:	461e      	mov	r6, r3
 8005744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005748:	f7fb f976 	bl	8000a38 <__aeabi_d2iz>
 800574c:	9011      	str	r0, [sp, #68]	; 0x44
 800574e:	f7fa fe59 	bl	8000404 <__aeabi_i2d>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800575a:	f7fa fd05 	bl	8000168 <__aeabi_dsub>
 800575e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005764:	3330      	adds	r3, #48	; 0x30
 8005766:	f806 3b01 	strb.w	r3, [r6], #1
 800576a:	42ae      	cmp	r6, r5
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	d124      	bne.n	80057bc <_dtoa_r+0x5fc>
 8005772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005776:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <_dtoa_r+0x620>)
 8005778:	f7fa fcf8 	bl	800016c <__adddf3>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005784:	f7fb f938 	bl	80009f8 <__aeabi_dcmpgt>
 8005788:	2800      	cmp	r0, #0
 800578a:	d171      	bne.n	8005870 <_dtoa_r+0x6b0>
 800578c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005790:	2000      	movs	r0, #0
 8005792:	4913      	ldr	r1, [pc, #76]	; (80057e0 <_dtoa_r+0x620>)
 8005794:	f7fa fce8 	bl	8000168 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a0:	f7fb f90c 	bl	80009bc <__aeabi_dcmplt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f43f af2f 	beq.w	8005608 <_dtoa_r+0x448>
 80057aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057ae:	1e6a      	subs	r2, r5, #1
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d001      	beq.n	80057b8 <_dtoa_r+0x5f8>
 80057b4:	46ba      	mov	sl, r7
 80057b6:	e04a      	b.n	800584e <_dtoa_r+0x68e>
 80057b8:	4615      	mov	r5, r2
 80057ba:	e7f6      	b.n	80057aa <_dtoa_r+0x5ea>
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <_dtoa_r+0x614>)
 80057be:	f7fa fe8b 	bl	80004d8 <__aeabi_dmul>
 80057c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c6:	e7bd      	b.n	8005744 <_dtoa_r+0x584>
 80057c8:	08006748 	.word	0x08006748
 80057cc:	08006720 	.word	0x08006720
 80057d0:	3ff00000 	.word	0x3ff00000
 80057d4:	40240000 	.word	0x40240000
 80057d8:	401c0000 	.word	0x401c0000
 80057dc:	40140000 	.word	0x40140000
 80057e0:	3fe00000 	.word	0x3fe00000
 80057e4:	9d06      	ldr	r5, [sp, #24]
 80057e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ee:	4630      	mov	r0, r6
 80057f0:	4639      	mov	r1, r7
 80057f2:	f7fa ff9b 	bl	800072c <__aeabi_ddiv>
 80057f6:	f7fb f91f 	bl	8000a38 <__aeabi_d2iz>
 80057fa:	4681      	mov	r9, r0
 80057fc:	f7fa fe02 	bl	8000404 <__aeabi_i2d>
 8005800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4630      	mov	r0, r6
 800580e:	4639      	mov	r1, r7
 8005810:	f7fa fcaa 	bl	8000168 <__aeabi_dsub>
 8005814:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005818:	f805 6b01 	strb.w	r6, [r5], #1
 800581c:	9e06      	ldr	r6, [sp, #24]
 800581e:	4602      	mov	r2, r0
 8005820:	1bae      	subs	r6, r5, r6
 8005822:	45b0      	cmp	r8, r6
 8005824:	460b      	mov	r3, r1
 8005826:	d135      	bne.n	8005894 <_dtoa_r+0x6d4>
 8005828:	f7fa fca0 	bl	800016c <__adddf3>
 800582c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005830:	4606      	mov	r6, r0
 8005832:	460f      	mov	r7, r1
 8005834:	f7fb f8e0 	bl	80009f8 <__aeabi_dcmpgt>
 8005838:	b9c8      	cbnz	r0, 800586e <_dtoa_r+0x6ae>
 800583a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583e:	4630      	mov	r0, r6
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f8b1 	bl	80009a8 <__aeabi_dcmpeq>
 8005846:	b110      	cbz	r0, 800584e <_dtoa_r+0x68e>
 8005848:	f019 0f01 	tst.w	r9, #1
 800584c:	d10f      	bne.n	800586e <_dtoa_r+0x6ae>
 800584e:	4659      	mov	r1, fp
 8005850:	4620      	mov	r0, r4
 8005852:	f000 fac3 	bl	8005ddc <_Bfree>
 8005856:	2300      	movs	r3, #0
 8005858:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800585a:	702b      	strb	r3, [r5, #0]
 800585c:	f10a 0301 	add.w	r3, sl, #1
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005864:	2b00      	cmp	r3, #0
 8005866:	f43f acf3 	beq.w	8005250 <_dtoa_r+0x90>
 800586a:	601d      	str	r5, [r3, #0]
 800586c:	e4f0      	b.n	8005250 <_dtoa_r+0x90>
 800586e:	4657      	mov	r7, sl
 8005870:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005874:	1e6b      	subs	r3, r5, #1
 8005876:	2a39      	cmp	r2, #57	; 0x39
 8005878:	d106      	bne.n	8005888 <_dtoa_r+0x6c8>
 800587a:	9a06      	ldr	r2, [sp, #24]
 800587c:	429a      	cmp	r2, r3
 800587e:	d107      	bne.n	8005890 <_dtoa_r+0x6d0>
 8005880:	2330      	movs	r3, #48	; 0x30
 8005882:	7013      	strb	r3, [r2, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	3701      	adds	r7, #1
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	3201      	adds	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e791      	b.n	80057b4 <_dtoa_r+0x5f4>
 8005890:	461d      	mov	r5, r3
 8005892:	e7ed      	b.n	8005870 <_dtoa_r+0x6b0>
 8005894:	2200      	movs	r2, #0
 8005896:	4b99      	ldr	r3, [pc, #612]	; (8005afc <_dtoa_r+0x93c>)
 8005898:	f7fa fe1e 	bl	80004d8 <__aeabi_dmul>
 800589c:	2200      	movs	r2, #0
 800589e:	2300      	movs	r3, #0
 80058a0:	4606      	mov	r6, r0
 80058a2:	460f      	mov	r7, r1
 80058a4:	f7fb f880 	bl	80009a8 <__aeabi_dcmpeq>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d09e      	beq.n	80057ea <_dtoa_r+0x62a>
 80058ac:	e7cf      	b.n	800584e <_dtoa_r+0x68e>
 80058ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	f000 8088 	beq.w	80059c6 <_dtoa_r+0x806>
 80058b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058b8:	2a01      	cmp	r2, #1
 80058ba:	dc6d      	bgt.n	8005998 <_dtoa_r+0x7d8>
 80058bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058be:	2a00      	cmp	r2, #0
 80058c0:	d066      	beq.n	8005990 <_dtoa_r+0x7d0>
 80058c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058c6:	464d      	mov	r5, r9
 80058c8:	9e08      	ldr	r6, [sp, #32]
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	2101      	movs	r1, #1
 80058ce:	441a      	add	r2, r3
 80058d0:	4620      	mov	r0, r4
 80058d2:	4499      	add	r9, r3
 80058d4:	9207      	str	r2, [sp, #28]
 80058d6:	f000 fb21 	bl	8005f1c <__i2b>
 80058da:	4607      	mov	r7, r0
 80058dc:	2d00      	cmp	r5, #0
 80058de:	dd0b      	ble.n	80058f8 <_dtoa_r+0x738>
 80058e0:	9b07      	ldr	r3, [sp, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dd08      	ble.n	80058f8 <_dtoa_r+0x738>
 80058e6:	42ab      	cmp	r3, r5
 80058e8:	bfa8      	it	ge
 80058ea:	462b      	movge	r3, r5
 80058ec:	9a07      	ldr	r2, [sp, #28]
 80058ee:	eba9 0903 	sub.w	r9, r9, r3
 80058f2:	1aed      	subs	r5, r5, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	9307      	str	r3, [sp, #28]
 80058f8:	9b08      	ldr	r3, [sp, #32]
 80058fa:	b1eb      	cbz	r3, 8005938 <_dtoa_r+0x778>
 80058fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d065      	beq.n	80059ce <_dtoa_r+0x80e>
 8005902:	b18e      	cbz	r6, 8005928 <_dtoa_r+0x768>
 8005904:	4639      	mov	r1, r7
 8005906:	4632      	mov	r2, r6
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fba5 	bl	8006058 <__pow5mult>
 800590e:	465a      	mov	r2, fp
 8005910:	4601      	mov	r1, r0
 8005912:	4607      	mov	r7, r0
 8005914:	4620      	mov	r0, r4
 8005916:	f000 fb0a 	bl	8005f2e <__multiply>
 800591a:	4659      	mov	r1, fp
 800591c:	900a      	str	r0, [sp, #40]	; 0x28
 800591e:	4620      	mov	r0, r4
 8005920:	f000 fa5c 	bl	8005ddc <_Bfree>
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	469b      	mov	fp, r3
 8005928:	9b08      	ldr	r3, [sp, #32]
 800592a:	1b9a      	subs	r2, r3, r6
 800592c:	d004      	beq.n	8005938 <_dtoa_r+0x778>
 800592e:	4659      	mov	r1, fp
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fb91 	bl	8006058 <__pow5mult>
 8005936:	4683      	mov	fp, r0
 8005938:	2101      	movs	r1, #1
 800593a:	4620      	mov	r0, r4
 800593c:	f000 faee 	bl	8005f1c <__i2b>
 8005940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005942:	4606      	mov	r6, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 81c6 	beq.w	8005cd6 <_dtoa_r+0xb16>
 800594a:	461a      	mov	r2, r3
 800594c:	4601      	mov	r1, r0
 800594e:	4620      	mov	r0, r4
 8005950:	f000 fb82 	bl	8006058 <__pow5mult>
 8005954:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005956:	4606      	mov	r6, r0
 8005958:	2b01      	cmp	r3, #1
 800595a:	dc3e      	bgt.n	80059da <_dtoa_r+0x81a>
 800595c:	9b02      	ldr	r3, [sp, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d137      	bne.n	80059d2 <_dtoa_r+0x812>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005968:	2b00      	cmp	r3, #0
 800596a:	d134      	bne.n	80059d6 <_dtoa_r+0x816>
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005972:	0d1b      	lsrs	r3, r3, #20
 8005974:	051b      	lsls	r3, r3, #20
 8005976:	b12b      	cbz	r3, 8005984 <_dtoa_r+0x7c4>
 8005978:	9b07      	ldr	r3, [sp, #28]
 800597a:	f109 0901 	add.w	r9, r9, #1
 800597e:	3301      	adds	r3, #1
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	2301      	movs	r3, #1
 8005984:	9308      	str	r3, [sp, #32]
 8005986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005988:	2b00      	cmp	r3, #0
 800598a:	d128      	bne.n	80059de <_dtoa_r+0x81e>
 800598c:	2001      	movs	r0, #1
 800598e:	e02e      	b.n	80059ee <_dtoa_r+0x82e>
 8005990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005992:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005996:	e796      	b.n	80058c6 <_dtoa_r+0x706>
 8005998:	9b08      	ldr	r3, [sp, #32]
 800599a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800599e:	42b3      	cmp	r3, r6
 80059a0:	bfb7      	itett	lt
 80059a2:	9b08      	ldrlt	r3, [sp, #32]
 80059a4:	1b9e      	subge	r6, r3, r6
 80059a6:	1af2      	sublt	r2, r6, r3
 80059a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80059aa:	bfbf      	itttt	lt
 80059ac:	9608      	strlt	r6, [sp, #32]
 80059ae:	189b      	addlt	r3, r3, r2
 80059b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80059b2:	2600      	movlt	r6, #0
 80059b4:	f1b8 0f00 	cmp.w	r8, #0
 80059b8:	bfb9      	ittee	lt
 80059ba:	eba9 0508 	sublt.w	r5, r9, r8
 80059be:	2300      	movlt	r3, #0
 80059c0:	464d      	movge	r5, r9
 80059c2:	4643      	movge	r3, r8
 80059c4:	e781      	b.n	80058ca <_dtoa_r+0x70a>
 80059c6:	9e08      	ldr	r6, [sp, #32]
 80059c8:	464d      	mov	r5, r9
 80059ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059cc:	e786      	b.n	80058dc <_dtoa_r+0x71c>
 80059ce:	9a08      	ldr	r2, [sp, #32]
 80059d0:	e7ad      	b.n	800592e <_dtoa_r+0x76e>
 80059d2:	2300      	movs	r3, #0
 80059d4:	e7d6      	b.n	8005984 <_dtoa_r+0x7c4>
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	e7d4      	b.n	8005984 <_dtoa_r+0x7c4>
 80059da:	2300      	movs	r3, #0
 80059dc:	9308      	str	r3, [sp, #32]
 80059de:	6933      	ldr	r3, [r6, #16]
 80059e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059e4:	6918      	ldr	r0, [r3, #16]
 80059e6:	f000 fa4b 	bl	8005e80 <__hi0bits>
 80059ea:	f1c0 0020 	rsb	r0, r0, #32
 80059ee:	9b07      	ldr	r3, [sp, #28]
 80059f0:	4418      	add	r0, r3
 80059f2:	f010 001f 	ands.w	r0, r0, #31
 80059f6:	d047      	beq.n	8005a88 <_dtoa_r+0x8c8>
 80059f8:	f1c0 0320 	rsb	r3, r0, #32
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	dd3b      	ble.n	8005a78 <_dtoa_r+0x8b8>
 8005a00:	9b07      	ldr	r3, [sp, #28]
 8005a02:	f1c0 001c 	rsb	r0, r0, #28
 8005a06:	4481      	add	r9, r0
 8005a08:	4405      	add	r5, r0
 8005a0a:	4403      	add	r3, r0
 8005a0c:	9307      	str	r3, [sp, #28]
 8005a0e:	f1b9 0f00 	cmp.w	r9, #0
 8005a12:	dd05      	ble.n	8005a20 <_dtoa_r+0x860>
 8005a14:	4659      	mov	r1, fp
 8005a16:	464a      	mov	r2, r9
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fb6b 	bl	80060f4 <__lshift>
 8005a1e:	4683      	mov	fp, r0
 8005a20:	9b07      	ldr	r3, [sp, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dd05      	ble.n	8005a32 <_dtoa_r+0x872>
 8005a26:	4631      	mov	r1, r6
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 fb62 	bl	80060f4 <__lshift>
 8005a30:	4606      	mov	r6, r0
 8005a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a34:	b353      	cbz	r3, 8005a8c <_dtoa_r+0x8cc>
 8005a36:	4631      	mov	r1, r6
 8005a38:	4658      	mov	r0, fp
 8005a3a:	f000 fbaf 	bl	800619c <__mcmp>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	da24      	bge.n	8005a8c <_dtoa_r+0x8cc>
 8005a42:	2300      	movs	r3, #0
 8005a44:	4659      	mov	r1, fp
 8005a46:	220a      	movs	r2, #10
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 f9de 	bl	8005e0a <__multadd>
 8005a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a50:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a54:	4683      	mov	fp, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8144 	beq.w	8005ce4 <_dtoa_r+0xb24>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4639      	mov	r1, r7
 8005a60:	220a      	movs	r2, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f9d1 	bl	8005e0a <__multadd>
 8005a68:	9b04      	ldr	r3, [sp, #16]
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dc4d      	bgt.n	8005b0c <_dtoa_r+0x94c>
 8005a70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	dd4a      	ble.n	8005b0c <_dtoa_r+0x94c>
 8005a76:	e011      	b.n	8005a9c <_dtoa_r+0x8dc>
 8005a78:	d0c9      	beq.n	8005a0e <_dtoa_r+0x84e>
 8005a7a:	9a07      	ldr	r2, [sp, #28]
 8005a7c:	331c      	adds	r3, #28
 8005a7e:	441a      	add	r2, r3
 8005a80:	4499      	add	r9, r3
 8005a82:	441d      	add	r5, r3
 8005a84:	4613      	mov	r3, r2
 8005a86:	e7c1      	b.n	8005a0c <_dtoa_r+0x84c>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	e7f6      	b.n	8005a7a <_dtoa_r+0x8ba>
 8005a8c:	f1b8 0f00 	cmp.w	r8, #0
 8005a90:	dc36      	bgt.n	8005b00 <_dtoa_r+0x940>
 8005a92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	dd33      	ble.n	8005b00 <_dtoa_r+0x940>
 8005a98:	f8cd 8010 	str.w	r8, [sp, #16]
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	b963      	cbnz	r3, 8005aba <_dtoa_r+0x8fa>
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 f9b0 	bl	8005e0a <__multadd>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4606      	mov	r6, r0
 8005aae:	4658      	mov	r0, fp
 8005ab0:	f000 fb74 	bl	800619c <__mcmp>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f73f add3 	bgt.w	8005660 <_dtoa_r+0x4a0>
 8005aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005abc:	9d06      	ldr	r5, [sp, #24]
 8005abe:	ea6f 0a03 	mvn.w	sl, r3
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 f987 	bl	8005ddc <_Bfree>
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	f43f aebd 	beq.w	800584e <_dtoa_r+0x68e>
 8005ad4:	f1b9 0f00 	cmp.w	r9, #0
 8005ad8:	d005      	beq.n	8005ae6 <_dtoa_r+0x926>
 8005ada:	45b9      	cmp	r9, r7
 8005adc:	d003      	beq.n	8005ae6 <_dtoa_r+0x926>
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 f97b 	bl	8005ddc <_Bfree>
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f977 	bl	8005ddc <_Bfree>
 8005aee:	e6ae      	b.n	800584e <_dtoa_r+0x68e>
 8005af0:	2600      	movs	r6, #0
 8005af2:	4637      	mov	r7, r6
 8005af4:	e7e1      	b.n	8005aba <_dtoa_r+0x8fa>
 8005af6:	46ba      	mov	sl, r7
 8005af8:	4637      	mov	r7, r6
 8005afa:	e5b1      	b.n	8005660 <_dtoa_r+0x4a0>
 8005afc:	40240000 	.word	0x40240000
 8005b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b02:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80f3 	beq.w	8005cf2 <_dtoa_r+0xb32>
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	dd05      	ble.n	8005b1c <_dtoa_r+0x95c>
 8005b10:	4639      	mov	r1, r7
 8005b12:	462a      	mov	r2, r5
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 faed 	bl	80060f4 <__lshift>
 8005b1a:	4607      	mov	r7, r0
 8005b1c:	9b08      	ldr	r3, [sp, #32]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04c      	beq.n	8005bbc <_dtoa_r+0x9fc>
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 f925 	bl	8005d74 <_Balloc>
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	f107 010c 	add.w	r1, r7, #12
 8005b32:	3202      	adds	r2, #2
 8005b34:	0092      	lsls	r2, r2, #2
 8005b36:	300c      	adds	r0, #12
 8005b38:	f7fe fc8a 	bl	8004450 <memcpy>
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fad7 	bl	80060f4 <__lshift>
 8005b46:	46b9      	mov	r9, r7
 8005b48:	4607      	mov	r7, r0
 8005b4a:	9b06      	ldr	r3, [sp, #24]
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	9b02      	ldr	r3, [sp, #8]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	9308      	str	r3, [sp, #32]
 8005b56:	4631      	mov	r1, r6
 8005b58:	4658      	mov	r0, fp
 8005b5a:	f7ff faa1 	bl	80050a0 <quorem>
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4605      	mov	r5, r0
 8005b62:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b66:	4658      	mov	r0, fp
 8005b68:	f000 fb18 	bl	800619c <__mcmp>
 8005b6c:	463a      	mov	r2, r7
 8005b6e:	9002      	str	r0, [sp, #8]
 8005b70:	4631      	mov	r1, r6
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fb2c 	bl	80061d0 <__mdiff>
 8005b78:	68c3      	ldr	r3, [r0, #12]
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	bb03      	cbnz	r3, 8005bc0 <_dtoa_r+0xa00>
 8005b7e:	4601      	mov	r1, r0
 8005b80:	9009      	str	r0, [sp, #36]	; 0x24
 8005b82:	4658      	mov	r0, fp
 8005b84:	f000 fb0a 	bl	800619c <__mcmp>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4620      	mov	r0, r4
 8005b90:	9309      	str	r3, [sp, #36]	; 0x24
 8005b92:	f000 f923 	bl	8005ddc <_Bfree>
 8005b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b98:	b9a3      	cbnz	r3, 8005bc4 <_dtoa_r+0xa04>
 8005b9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b9c:	b992      	cbnz	r2, 8005bc4 <_dtoa_r+0xa04>
 8005b9e:	9a08      	ldr	r2, [sp, #32]
 8005ba0:	b982      	cbnz	r2, 8005bc4 <_dtoa_r+0xa04>
 8005ba2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ba6:	d029      	beq.n	8005bfc <_dtoa_r+0xa3c>
 8005ba8:	9b02      	ldr	r3, [sp, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dd01      	ble.n	8005bb2 <_dtoa_r+0x9f2>
 8005bae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005bb2:	9b07      	ldr	r3, [sp, #28]
 8005bb4:	1c5d      	adds	r5, r3, #1
 8005bb6:	f883 8000 	strb.w	r8, [r3]
 8005bba:	e784      	b.n	8005ac6 <_dtoa_r+0x906>
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	e7c2      	b.n	8005b46 <_dtoa_r+0x986>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e7e3      	b.n	8005b8c <_dtoa_r+0x9cc>
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	db04      	blt.n	8005bd4 <_dtoa_r+0xa14>
 8005bca:	d123      	bne.n	8005c14 <_dtoa_r+0xa54>
 8005bcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005bce:	bb0a      	cbnz	r2, 8005c14 <_dtoa_r+0xa54>
 8005bd0:	9a08      	ldr	r2, [sp, #32]
 8005bd2:	b9fa      	cbnz	r2, 8005c14 <_dtoa_r+0xa54>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	ddec      	ble.n	8005bb2 <_dtoa_r+0x9f2>
 8005bd8:	4659      	mov	r1, fp
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 fa89 	bl	80060f4 <__lshift>
 8005be2:	4631      	mov	r1, r6
 8005be4:	4683      	mov	fp, r0
 8005be6:	f000 fad9 	bl	800619c <__mcmp>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	dc03      	bgt.n	8005bf6 <_dtoa_r+0xa36>
 8005bee:	d1e0      	bne.n	8005bb2 <_dtoa_r+0x9f2>
 8005bf0:	f018 0f01 	tst.w	r8, #1
 8005bf4:	d0dd      	beq.n	8005bb2 <_dtoa_r+0x9f2>
 8005bf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bfa:	d1d8      	bne.n	8005bae <_dtoa_r+0x9ee>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	9a07      	ldr	r2, [sp, #28]
 8005c00:	1c5d      	adds	r5, r3, #1
 8005c02:	2339      	movs	r3, #57	; 0x39
 8005c04:	7013      	strb	r3, [r2, #0]
 8005c06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c0a:	1e6a      	subs	r2, r5, #1
 8005c0c:	2b39      	cmp	r3, #57	; 0x39
 8005c0e:	d04d      	beq.n	8005cac <_dtoa_r+0xaec>
 8005c10:	3301      	adds	r3, #1
 8005c12:	e052      	b.n	8005cba <_dtoa_r+0xafa>
 8005c14:	9a07      	ldr	r2, [sp, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f102 0501 	add.w	r5, r2, #1
 8005c1c:	dd06      	ble.n	8005c2c <_dtoa_r+0xa6c>
 8005c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c22:	d0eb      	beq.n	8005bfc <_dtoa_r+0xa3c>
 8005c24:	f108 0801 	add.w	r8, r8, #1
 8005c28:	9b07      	ldr	r3, [sp, #28]
 8005c2a:	e7c4      	b.n	8005bb6 <_dtoa_r+0x9f6>
 8005c2c:	9b06      	ldr	r3, [sp, #24]
 8005c2e:	9a04      	ldr	r2, [sp, #16]
 8005c30:	1aeb      	subs	r3, r5, r3
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c38:	d021      	beq.n	8005c7e <_dtoa_r+0xabe>
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	220a      	movs	r2, #10
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f8e2 	bl	8005e0a <__multadd>
 8005c46:	45b9      	cmp	r9, r7
 8005c48:	4683      	mov	fp, r0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	f04f 020a 	mov.w	r2, #10
 8005c52:	4649      	mov	r1, r9
 8005c54:	4620      	mov	r0, r4
 8005c56:	d105      	bne.n	8005c64 <_dtoa_r+0xaa4>
 8005c58:	f000 f8d7 	bl	8005e0a <__multadd>
 8005c5c:	4681      	mov	r9, r0
 8005c5e:	4607      	mov	r7, r0
 8005c60:	9507      	str	r5, [sp, #28]
 8005c62:	e778      	b.n	8005b56 <_dtoa_r+0x996>
 8005c64:	f000 f8d1 	bl	8005e0a <__multadd>
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4681      	mov	r9, r0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	220a      	movs	r2, #10
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 f8ca 	bl	8005e0a <__multadd>
 8005c76:	4607      	mov	r7, r0
 8005c78:	e7f2      	b.n	8005c60 <_dtoa_r+0xaa0>
 8005c7a:	f04f 0900 	mov.w	r9, #0
 8005c7e:	4659      	mov	r1, fp
 8005c80:	2201      	movs	r2, #1
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fa36 	bl	80060f4 <__lshift>
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4683      	mov	fp, r0
 8005c8c:	f000 fa86 	bl	800619c <__mcmp>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	dcb8      	bgt.n	8005c06 <_dtoa_r+0xa46>
 8005c94:	d102      	bne.n	8005c9c <_dtoa_r+0xadc>
 8005c96:	f018 0f01 	tst.w	r8, #1
 8005c9a:	d1b4      	bne.n	8005c06 <_dtoa_r+0xa46>
 8005c9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ca0:	1e6a      	subs	r2, r5, #1
 8005ca2:	2b30      	cmp	r3, #48	; 0x30
 8005ca4:	f47f af0f 	bne.w	8005ac6 <_dtoa_r+0x906>
 8005ca8:	4615      	mov	r5, r2
 8005caa:	e7f7      	b.n	8005c9c <_dtoa_r+0xadc>
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d105      	bne.n	8005cbe <_dtoa_r+0xafe>
 8005cb2:	2331      	movs	r3, #49	; 0x31
 8005cb4:	9a06      	ldr	r2, [sp, #24]
 8005cb6:	f10a 0a01 	add.w	sl, sl, #1
 8005cba:	7013      	strb	r3, [r2, #0]
 8005cbc:	e703      	b.n	8005ac6 <_dtoa_r+0x906>
 8005cbe:	4615      	mov	r5, r2
 8005cc0:	e7a1      	b.n	8005c06 <_dtoa_r+0xa46>
 8005cc2:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <_dtoa_r+0xb60>)
 8005cc4:	f7ff bae1 	b.w	800528a <_dtoa_r+0xca>
 8005cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f47f aabb 	bne.w	8005246 <_dtoa_r+0x86>
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <_dtoa_r+0xb64>)
 8005cd2:	f7ff bada 	b.w	800528a <_dtoa_r+0xca>
 8005cd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f77f ae3f 	ble.w	800595c <_dtoa_r+0x79c>
 8005cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ce0:	9308      	str	r3, [sp, #32]
 8005ce2:	e653      	b.n	800598c <_dtoa_r+0x7cc>
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dc03      	bgt.n	8005cf2 <_dtoa_r+0xb32>
 8005cea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	f73f aed5 	bgt.w	8005a9c <_dtoa_r+0x8dc>
 8005cf2:	9d06      	ldr	r5, [sp, #24]
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	f7ff f9d2 	bl	80050a0 <quorem>
 8005cfc:	9b06      	ldr	r3, [sp, #24]
 8005cfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d02:	f805 8b01 	strb.w	r8, [r5], #1
 8005d06:	9a04      	ldr	r2, [sp, #16]
 8005d08:	1aeb      	subs	r3, r5, r3
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	ddb5      	ble.n	8005c7a <_dtoa_r+0xaba>
 8005d0e:	4659      	mov	r1, fp
 8005d10:	2300      	movs	r3, #0
 8005d12:	220a      	movs	r2, #10
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 f878 	bl	8005e0a <__multadd>
 8005d1a:	4683      	mov	fp, r0
 8005d1c:	e7ea      	b.n	8005cf4 <_dtoa_r+0xb34>
 8005d1e:	bf00      	nop
 8005d20:	080066e0 	.word	0x080066e0
 8005d24:	08006704 	.word	0x08006704

08005d28 <__locale_ctype_ptr_l>:
 8005d28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005d2c:	4770      	bx	lr
	...

08005d30 <_localeconv_r>:
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <_localeconv_r+0x14>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a18      	ldr	r0, [r3, #32]
 8005d36:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <_localeconv_r+0x18>)
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	bf08      	it	eq
 8005d3c:	4618      	moveq	r0, r3
 8005d3e:	30f0      	adds	r0, #240	; 0xf0
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000010 	.word	0x20000010
 8005d48:	20000074 	.word	0x20000074

08005d4c <__ascii_mbtowc>:
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	b901      	cbnz	r1, 8005d52 <__ascii_mbtowc+0x6>
 8005d50:	a901      	add	r1, sp, #4
 8005d52:	b142      	cbz	r2, 8005d66 <__ascii_mbtowc+0x1a>
 8005d54:	b14b      	cbz	r3, 8005d6a <__ascii_mbtowc+0x1e>
 8005d56:	7813      	ldrb	r3, [r2, #0]
 8005d58:	600b      	str	r3, [r1, #0]
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	1c10      	adds	r0, r2, #0
 8005d5e:	bf18      	it	ne
 8005d60:	2001      	movne	r0, #1
 8005d62:	b002      	add	sp, #8
 8005d64:	4770      	bx	lr
 8005d66:	4610      	mov	r0, r2
 8005d68:	e7fb      	b.n	8005d62 <__ascii_mbtowc+0x16>
 8005d6a:	f06f 0001 	mvn.w	r0, #1
 8005d6e:	e7f8      	b.n	8005d62 <__ascii_mbtowc+0x16>

08005d70 <__malloc_lock>:
 8005d70:	4770      	bx	lr

08005d72 <__malloc_unlock>:
 8005d72:	4770      	bx	lr

08005d74 <_Balloc>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460e      	mov	r6, r1
 8005d7c:	b93d      	cbnz	r5, 8005d8e <_Balloc+0x1a>
 8005d7e:	2010      	movs	r0, #16
 8005d80:	f7fe fb50 	bl	8004424 <malloc>
 8005d84:	6260      	str	r0, [r4, #36]	; 0x24
 8005d86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d8a:	6005      	str	r5, [r0, #0]
 8005d8c:	60c5      	str	r5, [r0, #12]
 8005d8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d90:	68eb      	ldr	r3, [r5, #12]
 8005d92:	b183      	cbz	r3, 8005db6 <_Balloc+0x42>
 8005d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d9c:	b9b8      	cbnz	r0, 8005dce <_Balloc+0x5a>
 8005d9e:	2101      	movs	r1, #1
 8005da0:	fa01 f506 	lsl.w	r5, r1, r6
 8005da4:	1d6a      	adds	r2, r5, #5
 8005da6:	0092      	lsls	r2, r2, #2
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fabe 	bl	800632a <_calloc_r>
 8005dae:	b160      	cbz	r0, 8005dca <_Balloc+0x56>
 8005db0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005db4:	e00e      	b.n	8005dd4 <_Balloc+0x60>
 8005db6:	2221      	movs	r2, #33	; 0x21
 8005db8:	2104      	movs	r1, #4
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fab5 	bl	800632a <_calloc_r>
 8005dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc2:	60e8      	str	r0, [r5, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e4      	bne.n	8005d94 <_Balloc+0x20>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
 8005dce:	6802      	ldr	r2, [r0, #0]
 8005dd0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dda:	e7f7      	b.n	8005dcc <_Balloc+0x58>

08005ddc <_Bfree>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005de0:	4606      	mov	r6, r0
 8005de2:	460d      	mov	r5, r1
 8005de4:	b93c      	cbnz	r4, 8005df6 <_Bfree+0x1a>
 8005de6:	2010      	movs	r0, #16
 8005de8:	f7fe fb1c 	bl	8004424 <malloc>
 8005dec:	6270      	str	r0, [r6, #36]	; 0x24
 8005dee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df2:	6004      	str	r4, [r0, #0]
 8005df4:	60c4      	str	r4, [r0, #12]
 8005df6:	b13d      	cbz	r5, 8005e08 <_Bfree+0x2c>
 8005df8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005dfa:	686a      	ldr	r2, [r5, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e02:	6029      	str	r1, [r5, #0]
 8005e04:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e08:	bd70      	pop	{r4, r5, r6, pc}

08005e0a <__multadd>:
 8005e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	461f      	mov	r7, r3
 8005e10:	4606      	mov	r6, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	2300      	movs	r3, #0
 8005e16:	690d      	ldr	r5, [r1, #16]
 8005e18:	f101 0c14 	add.w	ip, r1, #20
 8005e1c:	f8dc 0000 	ldr.w	r0, [ip]
 8005e20:	3301      	adds	r3, #1
 8005e22:	b281      	uxth	r1, r0
 8005e24:	fb02 7101 	mla	r1, r2, r1, r7
 8005e28:	0c00      	lsrs	r0, r0, #16
 8005e2a:	0c0f      	lsrs	r7, r1, #16
 8005e2c:	fb02 7000 	mla	r0, r2, r0, r7
 8005e30:	b289      	uxth	r1, r1
 8005e32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e36:	429d      	cmp	r5, r3
 8005e38:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e3c:	f84c 1b04 	str.w	r1, [ip], #4
 8005e40:	dcec      	bgt.n	8005e1c <__multadd+0x12>
 8005e42:	b1d7      	cbz	r7, 8005e7a <__multadd+0x70>
 8005e44:	68a3      	ldr	r3, [r4, #8]
 8005e46:	42ab      	cmp	r3, r5
 8005e48:	dc12      	bgt.n	8005e70 <__multadd+0x66>
 8005e4a:	6861      	ldr	r1, [r4, #4]
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	3101      	adds	r1, #1
 8005e50:	f7ff ff90 	bl	8005d74 <_Balloc>
 8005e54:	4680      	mov	r8, r0
 8005e56:	6922      	ldr	r2, [r4, #16]
 8005e58:	f104 010c 	add.w	r1, r4, #12
 8005e5c:	3202      	adds	r2, #2
 8005e5e:	0092      	lsls	r2, r2, #2
 8005e60:	300c      	adds	r0, #12
 8005e62:	f7fe faf5 	bl	8004450 <memcpy>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ffb7 	bl	8005ddc <_Bfree>
 8005e6e:	4644      	mov	r4, r8
 8005e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e74:	3501      	adds	r5, #1
 8005e76:	615f      	str	r7, [r3, #20]
 8005e78:	6125      	str	r5, [r4, #16]
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e80 <__hi0bits>:
 8005e80:	0c02      	lsrs	r2, r0, #16
 8005e82:	0412      	lsls	r2, r2, #16
 8005e84:	4603      	mov	r3, r0
 8005e86:	b9b2      	cbnz	r2, 8005eb6 <__hi0bits+0x36>
 8005e88:	0403      	lsls	r3, r0, #16
 8005e8a:	2010      	movs	r0, #16
 8005e8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e90:	bf04      	itt	eq
 8005e92:	021b      	lsleq	r3, r3, #8
 8005e94:	3008      	addeq	r0, #8
 8005e96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e9a:	bf04      	itt	eq
 8005e9c:	011b      	lsleq	r3, r3, #4
 8005e9e:	3004      	addeq	r0, #4
 8005ea0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ea4:	bf04      	itt	eq
 8005ea6:	009b      	lsleq	r3, r3, #2
 8005ea8:	3002      	addeq	r0, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	db06      	blt.n	8005ebc <__hi0bits+0x3c>
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	d503      	bpl.n	8005eba <__hi0bits+0x3a>
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	4770      	bx	lr
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e7e8      	b.n	8005e8c <__hi0bits+0xc>
 8005eba:	2020      	movs	r0, #32
 8005ebc:	4770      	bx	lr

08005ebe <__lo0bits>:
 8005ebe:	6803      	ldr	r3, [r0, #0]
 8005ec0:	4601      	mov	r1, r0
 8005ec2:	f013 0207 	ands.w	r2, r3, #7
 8005ec6:	d00b      	beq.n	8005ee0 <__lo0bits+0x22>
 8005ec8:	07da      	lsls	r2, r3, #31
 8005eca:	d423      	bmi.n	8005f14 <__lo0bits+0x56>
 8005ecc:	0798      	lsls	r0, r3, #30
 8005ece:	bf49      	itett	mi
 8005ed0:	085b      	lsrmi	r3, r3, #1
 8005ed2:	089b      	lsrpl	r3, r3, #2
 8005ed4:	2001      	movmi	r0, #1
 8005ed6:	600b      	strmi	r3, [r1, #0]
 8005ed8:	bf5c      	itt	pl
 8005eda:	600b      	strpl	r3, [r1, #0]
 8005edc:	2002      	movpl	r0, #2
 8005ede:	4770      	bx	lr
 8005ee0:	b298      	uxth	r0, r3
 8005ee2:	b9a8      	cbnz	r0, 8005f10 <__lo0bits+0x52>
 8005ee4:	2010      	movs	r0, #16
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005eec:	bf04      	itt	eq
 8005eee:	0a1b      	lsreq	r3, r3, #8
 8005ef0:	3008      	addeq	r0, #8
 8005ef2:	071a      	lsls	r2, r3, #28
 8005ef4:	bf04      	itt	eq
 8005ef6:	091b      	lsreq	r3, r3, #4
 8005ef8:	3004      	addeq	r0, #4
 8005efa:	079a      	lsls	r2, r3, #30
 8005efc:	bf04      	itt	eq
 8005efe:	089b      	lsreq	r3, r3, #2
 8005f00:	3002      	addeq	r0, #2
 8005f02:	07da      	lsls	r2, r3, #31
 8005f04:	d402      	bmi.n	8005f0c <__lo0bits+0x4e>
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	d006      	beq.n	8005f18 <__lo0bits+0x5a>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	600b      	str	r3, [r1, #0]
 8005f0e:	4770      	bx	lr
 8005f10:	4610      	mov	r0, r2
 8005f12:	e7e9      	b.n	8005ee8 <__lo0bits+0x2a>
 8005f14:	2000      	movs	r0, #0
 8005f16:	4770      	bx	lr
 8005f18:	2020      	movs	r0, #32
 8005f1a:	4770      	bx	lr

08005f1c <__i2b>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	460c      	mov	r4, r1
 8005f20:	2101      	movs	r1, #1
 8005f22:	f7ff ff27 	bl	8005d74 <_Balloc>
 8005f26:	2201      	movs	r2, #1
 8005f28:	6144      	str	r4, [r0, #20]
 8005f2a:	6102      	str	r2, [r0, #16]
 8005f2c:	bd10      	pop	{r4, pc}

08005f2e <__multiply>:
 8005f2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f32:	4614      	mov	r4, r2
 8005f34:	690a      	ldr	r2, [r1, #16]
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	4688      	mov	r8, r1
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	bfbe      	ittt	lt
 8005f3e:	460b      	movlt	r3, r1
 8005f40:	46a0      	movlt	r8, r4
 8005f42:	461c      	movlt	r4, r3
 8005f44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f54:	eb07 0609 	add.w	r6, r7, r9
 8005f58:	42b3      	cmp	r3, r6
 8005f5a:	bfb8      	it	lt
 8005f5c:	3101      	addlt	r1, #1
 8005f5e:	f7ff ff09 	bl	8005d74 <_Balloc>
 8005f62:	f100 0514 	add.w	r5, r0, #20
 8005f66:	462b      	mov	r3, r5
 8005f68:	2200      	movs	r2, #0
 8005f6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f6e:	4573      	cmp	r3, lr
 8005f70:	d316      	bcc.n	8005fa0 <__multiply+0x72>
 8005f72:	f104 0214 	add.w	r2, r4, #20
 8005f76:	f108 0114 	add.w	r1, r8, #20
 8005f7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	9b00      	ldr	r3, [sp, #0]
 8005f86:	9201      	str	r2, [sp, #4]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d80c      	bhi.n	8005fa6 <__multiply+0x78>
 8005f8c:	2e00      	cmp	r6, #0
 8005f8e:	dd03      	ble.n	8005f98 <__multiply+0x6a>
 8005f90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d05d      	beq.n	8006054 <__multiply+0x126>
 8005f98:	6106      	str	r6, [r0, #16]
 8005f9a:	b003      	add	sp, #12
 8005f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa0:	f843 2b04 	str.w	r2, [r3], #4
 8005fa4:	e7e3      	b.n	8005f6e <__multiply+0x40>
 8005fa6:	f8b2 b000 	ldrh.w	fp, [r2]
 8005faa:	f1bb 0f00 	cmp.w	fp, #0
 8005fae:	d023      	beq.n	8005ff8 <__multiply+0xca>
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	46ac      	mov	ip, r5
 8005fb4:	f04f 0800 	mov.w	r8, #0
 8005fb8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005fbc:	f8dc a000 	ldr.w	sl, [ip]
 8005fc0:	b2a3      	uxth	r3, r4
 8005fc2:	fa1f fa8a 	uxth.w	sl, sl
 8005fc6:	fb0b a303 	mla	r3, fp, r3, sl
 8005fca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005fce:	f8dc 4000 	ldr.w	r4, [ip]
 8005fd2:	4443      	add	r3, r8
 8005fd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fd8:	fb0b 840a 	mla	r4, fp, sl, r8
 8005fdc:	46e2      	mov	sl, ip
 8005fde:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fe8:	454f      	cmp	r7, r9
 8005fea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fee:	f84a 3b04 	str.w	r3, [sl], #4
 8005ff2:	d82b      	bhi.n	800604c <__multiply+0x11e>
 8005ff4:	f8cc 8004 	str.w	r8, [ip, #4]
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	3204      	adds	r2, #4
 8005ffc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006000:	f1ba 0f00 	cmp.w	sl, #0
 8006004:	d020      	beq.n	8006048 <__multiply+0x11a>
 8006006:	4689      	mov	r9, r1
 8006008:	46a8      	mov	r8, r5
 800600a:	f04f 0b00 	mov.w	fp, #0
 800600e:	682b      	ldr	r3, [r5, #0]
 8006010:	f8b9 c000 	ldrh.w	ip, [r9]
 8006014:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006018:	b29b      	uxth	r3, r3
 800601a:	fb0a 440c 	mla	r4, sl, ip, r4
 800601e:	46c4      	mov	ip, r8
 8006020:	445c      	add	r4, fp
 8006022:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006026:	f84c 3b04 	str.w	r3, [ip], #4
 800602a:	f859 3b04 	ldr.w	r3, [r9], #4
 800602e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	fb0a b303 	mla	r3, sl, r3, fp
 8006038:	454f      	cmp	r7, r9
 800603a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800603e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006042:	d805      	bhi.n	8006050 <__multiply+0x122>
 8006044:	f8c8 3004 	str.w	r3, [r8, #4]
 8006048:	3504      	adds	r5, #4
 800604a:	e79b      	b.n	8005f84 <__multiply+0x56>
 800604c:	46d4      	mov	ip, sl
 800604e:	e7b3      	b.n	8005fb8 <__multiply+0x8a>
 8006050:	46e0      	mov	r8, ip
 8006052:	e7dd      	b.n	8006010 <__multiply+0xe2>
 8006054:	3e01      	subs	r6, #1
 8006056:	e799      	b.n	8005f8c <__multiply+0x5e>

08006058 <__pow5mult>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	4615      	mov	r5, r2
 800605e:	f012 0203 	ands.w	r2, r2, #3
 8006062:	4606      	mov	r6, r0
 8006064:	460f      	mov	r7, r1
 8006066:	d007      	beq.n	8006078 <__pow5mult+0x20>
 8006068:	4c21      	ldr	r4, [pc, #132]	; (80060f0 <__pow5mult+0x98>)
 800606a:	3a01      	subs	r2, #1
 800606c:	2300      	movs	r3, #0
 800606e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006072:	f7ff feca 	bl	8005e0a <__multadd>
 8006076:	4607      	mov	r7, r0
 8006078:	10ad      	asrs	r5, r5, #2
 800607a:	d035      	beq.n	80060e8 <__pow5mult+0x90>
 800607c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800607e:	b93c      	cbnz	r4, 8006090 <__pow5mult+0x38>
 8006080:	2010      	movs	r0, #16
 8006082:	f7fe f9cf 	bl	8004424 <malloc>
 8006086:	6270      	str	r0, [r6, #36]	; 0x24
 8006088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800608c:	6004      	str	r4, [r0, #0]
 800608e:	60c4      	str	r4, [r0, #12]
 8006090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006098:	b94c      	cbnz	r4, 80060ae <__pow5mult+0x56>
 800609a:	f240 2171 	movw	r1, #625	; 0x271
 800609e:	4630      	mov	r0, r6
 80060a0:	f7ff ff3c 	bl	8005f1c <__i2b>
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80060ac:	6003      	str	r3, [r0, #0]
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	07eb      	lsls	r3, r5, #31
 80060b4:	d50a      	bpl.n	80060cc <__pow5mult+0x74>
 80060b6:	4639      	mov	r1, r7
 80060b8:	4622      	mov	r2, r4
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ff37 	bl	8005f2e <__multiply>
 80060c0:	4681      	mov	r9, r0
 80060c2:	4639      	mov	r1, r7
 80060c4:	4630      	mov	r0, r6
 80060c6:	f7ff fe89 	bl	8005ddc <_Bfree>
 80060ca:	464f      	mov	r7, r9
 80060cc:	106d      	asrs	r5, r5, #1
 80060ce:	d00b      	beq.n	80060e8 <__pow5mult+0x90>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	b938      	cbnz	r0, 80060e4 <__pow5mult+0x8c>
 80060d4:	4622      	mov	r2, r4
 80060d6:	4621      	mov	r1, r4
 80060d8:	4630      	mov	r0, r6
 80060da:	f7ff ff28 	bl	8005f2e <__multiply>
 80060de:	6020      	str	r0, [r4, #0]
 80060e0:	f8c0 8000 	str.w	r8, [r0]
 80060e4:	4604      	mov	r4, r0
 80060e6:	e7e4      	b.n	80060b2 <__pow5mult+0x5a>
 80060e8:	4638      	mov	r0, r7
 80060ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ee:	bf00      	nop
 80060f0:	08006810 	.word	0x08006810

080060f4 <__lshift>:
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	460c      	mov	r4, r1
 80060fa:	4607      	mov	r7, r0
 80060fc:	4616      	mov	r6, r2
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006104:	eb0a 0903 	add.w	r9, sl, r3
 8006108:	6849      	ldr	r1, [r1, #4]
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	f109 0501 	add.w	r5, r9, #1
 8006110:	42ab      	cmp	r3, r5
 8006112:	db32      	blt.n	800617a <__lshift+0x86>
 8006114:	4638      	mov	r0, r7
 8006116:	f7ff fe2d 	bl	8005d74 <_Balloc>
 800611a:	2300      	movs	r3, #0
 800611c:	4680      	mov	r8, r0
 800611e:	461a      	mov	r2, r3
 8006120:	f100 0114 	add.w	r1, r0, #20
 8006124:	4553      	cmp	r3, sl
 8006126:	db2b      	blt.n	8006180 <__lshift+0x8c>
 8006128:	6920      	ldr	r0, [r4, #16]
 800612a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800612e:	f104 0314 	add.w	r3, r4, #20
 8006132:	f016 021f 	ands.w	r2, r6, #31
 8006136:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800613a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800613e:	d025      	beq.n	800618c <__lshift+0x98>
 8006140:	2000      	movs	r0, #0
 8006142:	f1c2 0e20 	rsb	lr, r2, #32
 8006146:	468a      	mov	sl, r1
 8006148:	681e      	ldr	r6, [r3, #0]
 800614a:	4096      	lsls	r6, r2
 800614c:	4330      	orrs	r0, r6
 800614e:	f84a 0b04 	str.w	r0, [sl], #4
 8006152:	f853 0b04 	ldr.w	r0, [r3], #4
 8006156:	459c      	cmp	ip, r3
 8006158:	fa20 f00e 	lsr.w	r0, r0, lr
 800615c:	d814      	bhi.n	8006188 <__lshift+0x94>
 800615e:	6048      	str	r0, [r1, #4]
 8006160:	b108      	cbz	r0, 8006166 <__lshift+0x72>
 8006162:	f109 0502 	add.w	r5, r9, #2
 8006166:	3d01      	subs	r5, #1
 8006168:	4638      	mov	r0, r7
 800616a:	f8c8 5010 	str.w	r5, [r8, #16]
 800616e:	4621      	mov	r1, r4
 8006170:	f7ff fe34 	bl	8005ddc <_Bfree>
 8006174:	4640      	mov	r0, r8
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	3101      	adds	r1, #1
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	e7c7      	b.n	8006110 <__lshift+0x1c>
 8006180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006184:	3301      	adds	r3, #1
 8006186:	e7cd      	b.n	8006124 <__lshift+0x30>
 8006188:	4651      	mov	r1, sl
 800618a:	e7dc      	b.n	8006146 <__lshift+0x52>
 800618c:	3904      	subs	r1, #4
 800618e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006192:	459c      	cmp	ip, r3
 8006194:	f841 2f04 	str.w	r2, [r1, #4]!
 8006198:	d8f9      	bhi.n	800618e <__lshift+0x9a>
 800619a:	e7e4      	b.n	8006166 <__lshift+0x72>

0800619c <__mcmp>:
 800619c:	6903      	ldr	r3, [r0, #16]
 800619e:	690a      	ldr	r2, [r1, #16]
 80061a0:	b530      	push	{r4, r5, lr}
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	d10c      	bne.n	80061c0 <__mcmp+0x24>
 80061a6:	0092      	lsls	r2, r2, #2
 80061a8:	3014      	adds	r0, #20
 80061aa:	3114      	adds	r1, #20
 80061ac:	1884      	adds	r4, r0, r2
 80061ae:	4411      	add	r1, r2
 80061b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061b8:	4295      	cmp	r5, r2
 80061ba:	d003      	beq.n	80061c4 <__mcmp+0x28>
 80061bc:	d305      	bcc.n	80061ca <__mcmp+0x2e>
 80061be:	2301      	movs	r3, #1
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd30      	pop	{r4, r5, pc}
 80061c4:	42a0      	cmp	r0, r4
 80061c6:	d3f3      	bcc.n	80061b0 <__mcmp+0x14>
 80061c8:	e7fa      	b.n	80061c0 <__mcmp+0x24>
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ce:	e7f7      	b.n	80061c0 <__mcmp+0x24>

080061d0 <__mdiff>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	460d      	mov	r5, r1
 80061d6:	4607      	mov	r7, r0
 80061d8:	4611      	mov	r1, r2
 80061da:	4628      	mov	r0, r5
 80061dc:	4614      	mov	r4, r2
 80061de:	f7ff ffdd 	bl	800619c <__mcmp>
 80061e2:	1e06      	subs	r6, r0, #0
 80061e4:	d108      	bne.n	80061f8 <__mdiff+0x28>
 80061e6:	4631      	mov	r1, r6
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7ff fdc3 	bl	8005d74 <_Balloc>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	bfa4      	itt	ge
 80061fa:	4623      	movge	r3, r4
 80061fc:	462c      	movge	r4, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	6861      	ldr	r1, [r4, #4]
 8006202:	bfa6      	itte	ge
 8006204:	461d      	movge	r5, r3
 8006206:	2600      	movge	r6, #0
 8006208:	2601      	movlt	r6, #1
 800620a:	f7ff fdb3 	bl	8005d74 <_Balloc>
 800620e:	f04f 0e00 	mov.w	lr, #0
 8006212:	60c6      	str	r6, [r0, #12]
 8006214:	692b      	ldr	r3, [r5, #16]
 8006216:	6926      	ldr	r6, [r4, #16]
 8006218:	f104 0214 	add.w	r2, r4, #20
 800621c:	f105 0914 	add.w	r9, r5, #20
 8006220:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006224:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006228:	f100 0114 	add.w	r1, r0, #20
 800622c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006230:	f859 5b04 	ldr.w	r5, [r9], #4
 8006234:	fa1f f38a 	uxth.w	r3, sl
 8006238:	4473      	add	r3, lr
 800623a:	b2ac      	uxth	r4, r5
 800623c:	1b1b      	subs	r3, r3, r4
 800623e:	0c2c      	lsrs	r4, r5, #16
 8006240:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006244:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006248:	b29b      	uxth	r3, r3
 800624a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800624e:	45c8      	cmp	r8, r9
 8006250:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006254:	4694      	mov	ip, r2
 8006256:	f841 4b04 	str.w	r4, [r1], #4
 800625a:	d8e7      	bhi.n	800622c <__mdiff+0x5c>
 800625c:	45bc      	cmp	ip, r7
 800625e:	d304      	bcc.n	800626a <__mdiff+0x9a>
 8006260:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006264:	b183      	cbz	r3, 8006288 <__mdiff+0xb8>
 8006266:	6106      	str	r6, [r0, #16]
 8006268:	e7c4      	b.n	80061f4 <__mdiff+0x24>
 800626a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800626e:	b2a2      	uxth	r2, r4
 8006270:	4472      	add	r2, lr
 8006272:	1413      	asrs	r3, r2, #16
 8006274:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006278:	b292      	uxth	r2, r2
 800627a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800627e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006282:	f841 2b04 	str.w	r2, [r1], #4
 8006286:	e7e9      	b.n	800625c <__mdiff+0x8c>
 8006288:	3e01      	subs	r6, #1
 800628a:	e7e9      	b.n	8006260 <__mdiff+0x90>

0800628c <__d2b>:
 800628c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006290:	461c      	mov	r4, r3
 8006292:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006296:	2101      	movs	r1, #1
 8006298:	4690      	mov	r8, r2
 800629a:	f7ff fd6b 	bl	8005d74 <_Balloc>
 800629e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80062a2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80062a6:	4607      	mov	r7, r0
 80062a8:	bb34      	cbnz	r4, 80062f8 <__d2b+0x6c>
 80062aa:	9201      	str	r2, [sp, #4]
 80062ac:	f1b8 0200 	subs.w	r2, r8, #0
 80062b0:	d027      	beq.n	8006302 <__d2b+0x76>
 80062b2:	a802      	add	r0, sp, #8
 80062b4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80062b8:	f7ff fe01 	bl	8005ebe <__lo0bits>
 80062bc:	9900      	ldr	r1, [sp, #0]
 80062be:	b1f0      	cbz	r0, 80062fe <__d2b+0x72>
 80062c0:	9a01      	ldr	r2, [sp, #4]
 80062c2:	f1c0 0320 	rsb	r3, r0, #32
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	430b      	orrs	r3, r1
 80062cc:	40c2      	lsrs	r2, r0
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	9201      	str	r2, [sp, #4]
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf14      	ite	ne
 80062d8:	2102      	movne	r1, #2
 80062da:	2101      	moveq	r1, #1
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	6139      	str	r1, [r7, #16]
 80062e0:	b1c4      	cbz	r4, 8006314 <__d2b+0x88>
 80062e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80062e6:	4404      	add	r4, r0
 80062e8:	6034      	str	r4, [r6, #0]
 80062ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062ee:	6028      	str	r0, [r5, #0]
 80062f0:	4638      	mov	r0, r7
 80062f2:	b002      	add	sp, #8
 80062f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062fc:	e7d5      	b.n	80062aa <__d2b+0x1e>
 80062fe:	6179      	str	r1, [r7, #20]
 8006300:	e7e7      	b.n	80062d2 <__d2b+0x46>
 8006302:	a801      	add	r0, sp, #4
 8006304:	f7ff fddb 	bl	8005ebe <__lo0bits>
 8006308:	2101      	movs	r1, #1
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	6139      	str	r1, [r7, #16]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	3020      	adds	r0, #32
 8006312:	e7e5      	b.n	80062e0 <__d2b+0x54>
 8006314:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006318:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800631c:	6030      	str	r0, [r6, #0]
 800631e:	6918      	ldr	r0, [r3, #16]
 8006320:	f7ff fdae 	bl	8005e80 <__hi0bits>
 8006324:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006328:	e7e1      	b.n	80062ee <__d2b+0x62>

0800632a <_calloc_r>:
 800632a:	b538      	push	{r3, r4, r5, lr}
 800632c:	fb02 f401 	mul.w	r4, r2, r1
 8006330:	4621      	mov	r1, r4
 8006332:	f7fe f905 	bl	8004540 <_malloc_r>
 8006336:	4605      	mov	r5, r0
 8006338:	b118      	cbz	r0, 8006342 <_calloc_r+0x18>
 800633a:	4622      	mov	r2, r4
 800633c:	2100      	movs	r1, #0
 800633e:	f7fe f8ab 	bl	8004498 <memset>
 8006342:	4628      	mov	r0, r5
 8006344:	bd38      	pop	{r3, r4, r5, pc}

08006346 <__ssputs_r>:
 8006346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634a:	688e      	ldr	r6, [r1, #8]
 800634c:	4682      	mov	sl, r0
 800634e:	429e      	cmp	r6, r3
 8006350:	460c      	mov	r4, r1
 8006352:	4690      	mov	r8, r2
 8006354:	4699      	mov	r9, r3
 8006356:	d837      	bhi.n	80063c8 <__ssputs_r+0x82>
 8006358:	898a      	ldrh	r2, [r1, #12]
 800635a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800635e:	d031      	beq.n	80063c4 <__ssputs_r+0x7e>
 8006360:	2302      	movs	r3, #2
 8006362:	6825      	ldr	r5, [r4, #0]
 8006364:	6909      	ldr	r1, [r1, #16]
 8006366:	1a6f      	subs	r7, r5, r1
 8006368:	6965      	ldr	r5, [r4, #20]
 800636a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800636e:	fb95 f5f3 	sdiv	r5, r5, r3
 8006372:	f109 0301 	add.w	r3, r9, #1
 8006376:	443b      	add	r3, r7
 8006378:	429d      	cmp	r5, r3
 800637a:	bf38      	it	cc
 800637c:	461d      	movcc	r5, r3
 800637e:	0553      	lsls	r3, r2, #21
 8006380:	d530      	bpl.n	80063e4 <__ssputs_r+0x9e>
 8006382:	4629      	mov	r1, r5
 8006384:	f7fe f8dc 	bl	8004540 <_malloc_r>
 8006388:	4606      	mov	r6, r0
 800638a:	b950      	cbnz	r0, 80063a2 <__ssputs_r+0x5c>
 800638c:	230c      	movs	r3, #12
 800638e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006392:	f8ca 3000 	str.w	r3, [sl]
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a2:	463a      	mov	r2, r7
 80063a4:	6921      	ldr	r1, [r4, #16]
 80063a6:	f7fe f853 	bl	8004450 <memcpy>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	6126      	str	r6, [r4, #16]
 80063b8:	443e      	add	r6, r7
 80063ba:	6026      	str	r6, [r4, #0]
 80063bc:	464e      	mov	r6, r9
 80063be:	6165      	str	r5, [r4, #20]
 80063c0:	1bed      	subs	r5, r5, r7
 80063c2:	60a5      	str	r5, [r4, #8]
 80063c4:	454e      	cmp	r6, r9
 80063c6:	d900      	bls.n	80063ca <__ssputs_r+0x84>
 80063c8:	464e      	mov	r6, r9
 80063ca:	4632      	mov	r2, r6
 80063cc:	4641      	mov	r1, r8
 80063ce:	6820      	ldr	r0, [r4, #0]
 80063d0:	f7fe f849 	bl	8004466 <memmove>
 80063d4:	68a3      	ldr	r3, [r4, #8]
 80063d6:	2000      	movs	r0, #0
 80063d8:	1b9b      	subs	r3, r3, r6
 80063da:	60a3      	str	r3, [r4, #8]
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	441e      	add	r6, r3
 80063e0:	6026      	str	r6, [r4, #0]
 80063e2:	e7dc      	b.n	800639e <__ssputs_r+0x58>
 80063e4:	462a      	mov	r2, r5
 80063e6:	f000 f90e 	bl	8006606 <_realloc_r>
 80063ea:	4606      	mov	r6, r0
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d1e2      	bne.n	80063b6 <__ssputs_r+0x70>
 80063f0:	6921      	ldr	r1, [r4, #16]
 80063f2:	4650      	mov	r0, sl
 80063f4:	f7fe f858 	bl	80044a8 <_free_r>
 80063f8:	e7c8      	b.n	800638c <__ssputs_r+0x46>
	...

080063fc <_svfiprintf_r>:
 80063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	461d      	mov	r5, r3
 8006402:	898b      	ldrh	r3, [r1, #12]
 8006404:	b09d      	sub	sp, #116	; 0x74
 8006406:	061f      	lsls	r7, r3, #24
 8006408:	4680      	mov	r8, r0
 800640a:	460c      	mov	r4, r1
 800640c:	4616      	mov	r6, r2
 800640e:	d50f      	bpl.n	8006430 <_svfiprintf_r+0x34>
 8006410:	690b      	ldr	r3, [r1, #16]
 8006412:	b96b      	cbnz	r3, 8006430 <_svfiprintf_r+0x34>
 8006414:	2140      	movs	r1, #64	; 0x40
 8006416:	f7fe f893 	bl	8004540 <_malloc_r>
 800641a:	6020      	str	r0, [r4, #0]
 800641c:	6120      	str	r0, [r4, #16]
 800641e:	b928      	cbnz	r0, 800642c <_svfiprintf_r+0x30>
 8006420:	230c      	movs	r3, #12
 8006422:	f8c8 3000 	str.w	r3, [r8]
 8006426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642a:	e0c8      	b.n	80065be <_svfiprintf_r+0x1c2>
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	6163      	str	r3, [r4, #20]
 8006430:	2300      	movs	r3, #0
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	2320      	movs	r3, #32
 8006436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800643a:	2330      	movs	r3, #48	; 0x30
 800643c:	f04f 0b01 	mov.w	fp, #1
 8006440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006444:	9503      	str	r5, [sp, #12]
 8006446:	4637      	mov	r7, r6
 8006448:	463d      	mov	r5, r7
 800644a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800644e:	b10b      	cbz	r3, 8006454 <_svfiprintf_r+0x58>
 8006450:	2b25      	cmp	r3, #37	; 0x25
 8006452:	d13e      	bne.n	80064d2 <_svfiprintf_r+0xd6>
 8006454:	ebb7 0a06 	subs.w	sl, r7, r6
 8006458:	d00b      	beq.n	8006472 <_svfiprintf_r+0x76>
 800645a:	4653      	mov	r3, sl
 800645c:	4632      	mov	r2, r6
 800645e:	4621      	mov	r1, r4
 8006460:	4640      	mov	r0, r8
 8006462:	f7ff ff70 	bl	8006346 <__ssputs_r>
 8006466:	3001      	adds	r0, #1
 8006468:	f000 80a4 	beq.w	80065b4 <_svfiprintf_r+0x1b8>
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	4453      	add	r3, sl
 8006470:	9309      	str	r3, [sp, #36]	; 0x24
 8006472:	783b      	ldrb	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 809d 	beq.w	80065b4 <_svfiprintf_r+0x1b8>
 800647a:	2300      	movs	r3, #0
 800647c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	9307      	str	r3, [sp, #28]
 8006488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800648c:	931a      	str	r3, [sp, #104]	; 0x68
 800648e:	462f      	mov	r7, r5
 8006490:	2205      	movs	r2, #5
 8006492:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006496:	4850      	ldr	r0, [pc, #320]	; (80065d8 <_svfiprintf_r+0x1dc>)
 8006498:	f7fd ffcc 	bl	8004434 <memchr>
 800649c:	9b04      	ldr	r3, [sp, #16]
 800649e:	b9d0      	cbnz	r0, 80064d6 <_svfiprintf_r+0xda>
 80064a0:	06d9      	lsls	r1, r3, #27
 80064a2:	bf44      	itt	mi
 80064a4:	2220      	movmi	r2, #32
 80064a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064aa:	071a      	lsls	r2, r3, #28
 80064ac:	bf44      	itt	mi
 80064ae:	222b      	movmi	r2, #43	; 0x2b
 80064b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064b4:	782a      	ldrb	r2, [r5, #0]
 80064b6:	2a2a      	cmp	r2, #42	; 0x2a
 80064b8:	d015      	beq.n	80064e6 <_svfiprintf_r+0xea>
 80064ba:	462f      	mov	r7, r5
 80064bc:	2000      	movs	r0, #0
 80064be:	250a      	movs	r5, #10
 80064c0:	9a07      	ldr	r2, [sp, #28]
 80064c2:	4639      	mov	r1, r7
 80064c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c8:	3b30      	subs	r3, #48	; 0x30
 80064ca:	2b09      	cmp	r3, #9
 80064cc:	d94d      	bls.n	800656a <_svfiprintf_r+0x16e>
 80064ce:	b1b8      	cbz	r0, 8006500 <_svfiprintf_r+0x104>
 80064d0:	e00f      	b.n	80064f2 <_svfiprintf_r+0xf6>
 80064d2:	462f      	mov	r7, r5
 80064d4:	e7b8      	b.n	8006448 <_svfiprintf_r+0x4c>
 80064d6:	4a40      	ldr	r2, [pc, #256]	; (80065d8 <_svfiprintf_r+0x1dc>)
 80064d8:	463d      	mov	r5, r7
 80064da:	1a80      	subs	r0, r0, r2
 80064dc:	fa0b f000 	lsl.w	r0, fp, r0
 80064e0:	4318      	orrs	r0, r3
 80064e2:	9004      	str	r0, [sp, #16]
 80064e4:	e7d3      	b.n	800648e <_svfiprintf_r+0x92>
 80064e6:	9a03      	ldr	r2, [sp, #12]
 80064e8:	1d11      	adds	r1, r2, #4
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	9103      	str	r1, [sp, #12]
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	db01      	blt.n	80064f6 <_svfiprintf_r+0xfa>
 80064f2:	9207      	str	r2, [sp, #28]
 80064f4:	e004      	b.n	8006500 <_svfiprintf_r+0x104>
 80064f6:	4252      	negs	r2, r2
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	9207      	str	r2, [sp, #28]
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	783b      	ldrb	r3, [r7, #0]
 8006502:	2b2e      	cmp	r3, #46	; 0x2e
 8006504:	d10c      	bne.n	8006520 <_svfiprintf_r+0x124>
 8006506:	787b      	ldrb	r3, [r7, #1]
 8006508:	2b2a      	cmp	r3, #42	; 0x2a
 800650a:	d133      	bne.n	8006574 <_svfiprintf_r+0x178>
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	3702      	adds	r7, #2
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	9203      	str	r2, [sp, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	bfb8      	it	lt
 800651a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800651e:	9305      	str	r3, [sp, #20]
 8006520:	4d2e      	ldr	r5, [pc, #184]	; (80065dc <_svfiprintf_r+0x1e0>)
 8006522:	2203      	movs	r2, #3
 8006524:	7839      	ldrb	r1, [r7, #0]
 8006526:	4628      	mov	r0, r5
 8006528:	f7fd ff84 	bl	8004434 <memchr>
 800652c:	b138      	cbz	r0, 800653e <_svfiprintf_r+0x142>
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	1b40      	subs	r0, r0, r5
 8006532:	fa03 f000 	lsl.w	r0, r3, r0
 8006536:	9b04      	ldr	r3, [sp, #16]
 8006538:	3701      	adds	r7, #1
 800653a:	4303      	orrs	r3, r0
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	7839      	ldrb	r1, [r7, #0]
 8006540:	2206      	movs	r2, #6
 8006542:	4827      	ldr	r0, [pc, #156]	; (80065e0 <_svfiprintf_r+0x1e4>)
 8006544:	1c7e      	adds	r6, r7, #1
 8006546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800654a:	f7fd ff73 	bl	8004434 <memchr>
 800654e:	2800      	cmp	r0, #0
 8006550:	d038      	beq.n	80065c4 <_svfiprintf_r+0x1c8>
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <_svfiprintf_r+0x1e8>)
 8006554:	bb13      	cbnz	r3, 800659c <_svfiprintf_r+0x1a0>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	3307      	adds	r3, #7
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	3308      	adds	r3, #8
 8006560:	9303      	str	r3, [sp, #12]
 8006562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006564:	444b      	add	r3, r9
 8006566:	9309      	str	r3, [sp, #36]	; 0x24
 8006568:	e76d      	b.n	8006446 <_svfiprintf_r+0x4a>
 800656a:	fb05 3202 	mla	r2, r5, r2, r3
 800656e:	2001      	movs	r0, #1
 8006570:	460f      	mov	r7, r1
 8006572:	e7a6      	b.n	80064c2 <_svfiprintf_r+0xc6>
 8006574:	2300      	movs	r3, #0
 8006576:	250a      	movs	r5, #10
 8006578:	4619      	mov	r1, r3
 800657a:	3701      	adds	r7, #1
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	4638      	mov	r0, r7
 8006580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006584:	3a30      	subs	r2, #48	; 0x30
 8006586:	2a09      	cmp	r2, #9
 8006588:	d903      	bls.n	8006592 <_svfiprintf_r+0x196>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0c8      	beq.n	8006520 <_svfiprintf_r+0x124>
 800658e:	9105      	str	r1, [sp, #20]
 8006590:	e7c6      	b.n	8006520 <_svfiprintf_r+0x124>
 8006592:	fb05 2101 	mla	r1, r5, r1, r2
 8006596:	2301      	movs	r3, #1
 8006598:	4607      	mov	r7, r0
 800659a:	e7f0      	b.n	800657e <_svfiprintf_r+0x182>
 800659c:	ab03      	add	r3, sp, #12
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4622      	mov	r2, r4
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <_svfiprintf_r+0x1ec>)
 80065a4:	a904      	add	r1, sp, #16
 80065a6:	4640      	mov	r0, r8
 80065a8:	f7fe f8b6 	bl	8004718 <_printf_float>
 80065ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80065b0:	4681      	mov	r9, r0
 80065b2:	d1d6      	bne.n	8006562 <_svfiprintf_r+0x166>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	065b      	lsls	r3, r3, #25
 80065b8:	f53f af35 	bmi.w	8006426 <_svfiprintf_r+0x2a>
 80065bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065be:	b01d      	add	sp, #116	; 0x74
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	ab03      	add	r3, sp, #12
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4622      	mov	r2, r4
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <_svfiprintf_r+0x1ec>)
 80065cc:	a904      	add	r1, sp, #16
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7fe fb4e 	bl	8004c70 <_printf_i>
 80065d4:	e7ea      	b.n	80065ac <_svfiprintf_r+0x1b0>
 80065d6:	bf00      	nop
 80065d8:	0800681c 	.word	0x0800681c
 80065dc:	08006822 	.word	0x08006822
 80065e0:	08006826 	.word	0x08006826
 80065e4:	08004719 	.word	0x08004719
 80065e8:	08006347 	.word	0x08006347

080065ec <__ascii_wctomb>:
 80065ec:	b149      	cbz	r1, 8006602 <__ascii_wctomb+0x16>
 80065ee:	2aff      	cmp	r2, #255	; 0xff
 80065f0:	bf8b      	itete	hi
 80065f2:	238a      	movhi	r3, #138	; 0x8a
 80065f4:	700a      	strbls	r2, [r1, #0]
 80065f6:	6003      	strhi	r3, [r0, #0]
 80065f8:	2001      	movls	r0, #1
 80065fa:	bf88      	it	hi
 80065fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006600:	4770      	bx	lr
 8006602:	4608      	mov	r0, r1
 8006604:	4770      	bx	lr

08006606 <_realloc_r>:
 8006606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006608:	4607      	mov	r7, r0
 800660a:	4614      	mov	r4, r2
 800660c:	460e      	mov	r6, r1
 800660e:	b921      	cbnz	r1, 800661a <_realloc_r+0x14>
 8006610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006614:	4611      	mov	r1, r2
 8006616:	f7fd bf93 	b.w	8004540 <_malloc_r>
 800661a:	b922      	cbnz	r2, 8006626 <_realloc_r+0x20>
 800661c:	f7fd ff44 	bl	80044a8 <_free_r>
 8006620:	4625      	mov	r5, r4
 8006622:	4628      	mov	r0, r5
 8006624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006626:	f000 f814 	bl	8006652 <_malloc_usable_size_r>
 800662a:	42a0      	cmp	r0, r4
 800662c:	d20f      	bcs.n	800664e <_realloc_r+0x48>
 800662e:	4621      	mov	r1, r4
 8006630:	4638      	mov	r0, r7
 8006632:	f7fd ff85 	bl	8004540 <_malloc_r>
 8006636:	4605      	mov	r5, r0
 8006638:	2800      	cmp	r0, #0
 800663a:	d0f2      	beq.n	8006622 <_realloc_r+0x1c>
 800663c:	4631      	mov	r1, r6
 800663e:	4622      	mov	r2, r4
 8006640:	f7fd ff06 	bl	8004450 <memcpy>
 8006644:	4631      	mov	r1, r6
 8006646:	4638      	mov	r0, r7
 8006648:	f7fd ff2e 	bl	80044a8 <_free_r>
 800664c:	e7e9      	b.n	8006622 <_realloc_r+0x1c>
 800664e:	4635      	mov	r5, r6
 8006650:	e7e7      	b.n	8006622 <_realloc_r+0x1c>

08006652 <_malloc_usable_size_r>:
 8006652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006656:	1f18      	subs	r0, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	bfbc      	itt	lt
 800665c:	580b      	ldrlt	r3, [r1, r0]
 800665e:	18c0      	addlt	r0, r0, r3
 8006660:	4770      	bx	lr
	...

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
